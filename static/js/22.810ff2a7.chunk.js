(this["webpackJsonpbitter-code"]=this["webpackJsonpbitter-code"]||[]).push([[22],{580:function(e,n,a){"use strict";var t=a(0),l=a.n(t),o=a(20),r=function(e){var n=e.show,a=e.children,t=e.shadow,r=void 0===t||t;return l.a.createElement(o.b,{in:n,timing:700,suffix:{enter:"show",exit:""},onEnter:function(e){e.classList.add("transition"),e.style.height=0},onEntering:function(e){return e.style.height="".concat(e.scrollHeight,"px")},onEntered:function(e){e.classList.remove("transition"),e.style.height=null},onExit:function(e){e.classList.add("transition"),e.style.height="".concat(e.offsetHeight,"px")},onExiting:function(e){return e.style.height=0},onExited:function(e){e.classList.remove("transition"),e.style.height=null},allowRef:!0},l.a.createElement("div",{className:"n-collapse d-block transition","data-shadow":r,style:{height:0}},l.a.createElement("div",{className:"n-collapse-content"},a)))},i=a(10),s=a.n(i),c=function(e){var n=e.children;return l.a.createElement("div",{className:"n-modal-body"},n)},d=function(e){var n=e.children;return l.a.createElement("div",{className:"n-modal-footer"},n)},m=function(e){var n=e.show,a=e.size,t=e.onHide,r=e.children;return s.a.createPortal(l.a.createElement(o.b,{in:n,timing:800,suffix:{enter:"show",exit:""},onEnter:function(e){e.classList.add("transition"),document.body.classList.add("n-modal-shown")},onEntered:function(e){e.classList.remove("transition")},onExit:function(e){e.classList.add("transition")},onExited:function(e){e.classList.remove("transition"),document.body.classList.remove("n-modal-shown")},allowRef:!0},l.a.createElement("div",{className:"n-modal d-block",onClick:function(e){return n&&e.target.matches(".n-modal")&&t&&t(e)}},l.a.createElement("div",{className:"n-modal-dialog".concat(a?" n-modal-".concat(a):"")},l.a.createElement("div",{className:"n-modal-content"},r)))),u)};m.Title=function(e){var n=e.onHide,a=e.children;return l.a.createElement("div",{className:"n-modal-header"},l.a.createElement("h5",{className:"n-modal-title"},a),n&&l.a.createElement("button",{className:"n-btn n-btn-xs",onClick:n},"\xd7"))},m.Body=c,m.Footer=d;var u=document.createElement("div");document.body.appendChild(u);var p=m;a.d(n,"a",(function(){return r})),a.d(n,"b",(function(){return p}))},768:function(e,n,a){"use strict";a.r(n);var t={};a.r(t),a.d(t,"AbortController",(function(){return u})),a.d(t,"fetch",(function(){return p})),a.d(t,"columns",(function(){return b})),a.d(t,"data",(function(){return f}));a(4);var l=a(0),o=a.n(l),r=a(39),i=a(13),s=a(2),c=a(580),d=a(15),m=a(11),u=function(){function e(){Object(d.a)(this,e),this.signal={aborted:!1}}return Object(m.a)(e,[{key:"abort",value:function(){clearTimeout(this.signal.aborted)}}]),e}(),p=function(e,n){var a=n.signal,t=void 0===a?{}:a,l=n.body,o=l.sortOrderBy,r=l.sortOrder,i=l.currentPage,s=l.pageSize,c=l.filters,d=void 0===c?[]:c,m=[].concat(f);d.length&&(m=d.reduce((function(e,n){var a=n.dataIndex,t=n.value.map((function(e){return new RegExp("^".concat(e.replace(/%/g,".*"),"$"),"i")}));return e.filter((function(e){return t.some((function(n){return n.test(e[a])}))}))}),m));var u=m.length;if(o){var p="desc"===r?-1:1;m=m.sort((function(e,n){return("number"===typeof e[o]||/^\d+$/.test(e[o])?e[o]-n[o]:e[o]<n[o]?-1:e[o]>n[o]?1:0)*p}))}return s&&s<f.length&&(m=m.slice(i*s-s,i*s)),new Promise((function(e,n){t.aborted=setTimeout((function(){return e(new Response(new Blob([JSON.stringify({data:m,rowsCount:u},null,2)],{type:"application/json"}),{status:200}))}),Math.round(2e3*Math.random())+1e3)}))},b=[{dataIndex:"fname",label:"First Name",sortable:!0,filterSearch:{label:"Search",like:"{search}%"}},{dataIndex:"lname",label:"Last Name"},{dataIndex:"age",label:"Age",sortable:!0},{dataIndex:"gender",label:"Gender",filters:[{label:"Male",like:"male"},{label:"Female",like:"female"}],filterMultiple:!1}],f=[{id:1,fname:"Jesse",lname:"Jules",age:"73",gender:"female"},{id:2,fname:"Tyler",lname:"Aiden",age:"74",gender:"female"},{id:3,fname:"Ash",lname:"Remy",age:"22",gender:"male"},{id:4,fname:"Winter",lname:"Andy",age:"32",gender:"female"},{id:5,fname:"Daryl",lname:"Campbell",age:"37",gender:"male"},{id:6,fname:"Elliott",lname:"Roan",age:"77",gender:"female"},{id:7,fname:"Emerson",lname:"Kelsey",age:"76",gender:"male"},{id:8,fname:"Sam",lname:"Kelly",age:"52",gender:"male"},{id:9,fname:"Tatum",lname:"Landry",age:"16",gender:"male"},{id:10,fname:"Amari",lname:"Jayden",age:"82",gender:"female"},{id:11,fname:"Drew",lname:"Devin",age:"79",gender:"female"},{id:12,fname:"Hayden",lname:"Maxwell",age:"60",gender:"male"},{id:13,fname:"Glenn",lname:"Eddie",age:"48",gender:"female"},{id:14,fname:"Reagan",lname:"Hunter",age:"21",gender:"female"},{id:15,fname:"Aspen",lname:"Dakota",age:"18",gender:"female"},{id:16,fname:"Jean",lname:"Dallas",age:"23",gender:"male"},{id:17,fname:"Maxwell",lname:"Clay",age:"33",gender:"female"},{id:18,fname:"Kendall",lname:"Amari",age:"70",gender:"female"},{id:19,fname:"Easton",lname:"Mackenzie",age:"74",gender:"male"},{id:20,fname:"Delta",lname:"Lake",age:"77",gender:"female"},{id:21,fname:"Rory",lname:"Rowan",age:"73",gender:"male"},{id:22,fname:"Chris",lname:"Mackenzie",age:"54",gender:"female"},{id:23,fname:"Tatum",lname:"Campbell",age:"48",gender:"female"},{id:24,fname:"Jordan",lname:"Ainsley",age:"89",gender:"female"},{id:25,fname:"Elliott",lname:"Taylor",age:"34",gender:"female"},{id:26,fname:"London",lname:"Remy",age:"20",gender:"male"},{id:27,fname:"Peyton",lname:"Stevie",age:"55",gender:"female"},{id:28,fname:"Hudson",lname:"Ari",age:"72",gender:"male"},{id:29,fname:"Lincoln",lname:"Ryan",age:"28",gender:"female"},{id:30,fname:"Mason",lname:"Lincoln",age:"73",gender:"male"},{id:31,fname:"Kai",lname:"Ash",age:"77",gender:"male"},{id:32,fname:"Roan",lname:"Parker",age:"76",gender:"male"},{id:33,fname:"Gabriel",lname:"Mackenzie",age:"60",gender:"male"},{id:34,fname:"Ray",lname:"Ryan",age:"44",gender:"female"},{id:35,fname:"Hunter",lname:"Kennedy",age:"29",gender:"male"},{id:36,fname:"Kelly",lname:"Rudy",age:"70",gender:"female"},{id:37,fname:"Gabriel",lname:"Dorian",age:"18",gender:"female"},{id:38,fname:"Kaden",lname:"Riley",age:"20",gender:"female"},{id:39,fname:"Frances",lname:"Dakota",age:"89",gender:"male"},{id:40,fname:"Max",lname:"James",age:"43",gender:"female"},{id:41,fname:"Sam",lname:"Bailey",age:"36",gender:"female"},{id:42,fname:"Bobbie",lname:"Brett",age:"44",gender:"male"},{id:43,fname:"Finley",lname:"Stevie",age:"76",gender:"male"},{id:44,fname:"Kai",lname:"Julian",age:"22",gender:"female"},{id:45,fname:"Blaine",lname:"Alex",age:"59",gender:"female"},{id:46,fname:"Kaden",lname:"Remy",age:"27",gender:"female"},{id:47,fname:"Corey",lname:"Dana",age:"50",gender:"female"},{id:48,fname:"Bobbie",lname:"Harley",age:"54",gender:"male"},{id:49,fname:"Reagan",lname:"James",age:"62",gender:"male"},{id:50,fname:"Daryl",lname:"Karter",age:"76",gender:"male"}],g=a(25),h="const data = [\n    {\n        id: 1,\n        fname: 'Drew',\n        lname: 'Kai',\n        age: '24',\n        gender: 'male',\n    },\n    {\n        id: 2,\n        fname: 'Frankie',\n        lname: 'Riley',\n        age: '70',\n        gender: 'male',\n    },\n    {\n        id: 3,\n        fname: 'Brook',\n        lname: 'Mason',\n        age: '38',\n        gender: 'female',\n    },\n    {\n        id: 4,\n        fname: 'West',\n        lname: 'Emery',\n        age: '31',\n        gender: 'male',\n    },\n    {\n        id: 5,\n        fname: 'West',\n        lname: 'Bailey',\n        age: '49',\n        gender: 'female',\n    },\n];",y='import React from "react";\nimport { Table } from "reatable";\n\nconst columns = [\n    {\n        dataIndex: "fname",\n        label: "First Name"\n    },\n    {\n        dataIndex: "lname",\n        label: "Last Name"\n    },\n    {\n        dataIndex: "age",\n        label: "Age"\n    },\n    {\n        dataIndex: "gender",\n        label: "Gender"\n    },\n]\n\n'.concat(h,"\n\n#render(<Table columns={columns} data={data} />)"),x='import React from "react";\nimport { Table } from "reatable";\n\nconst columns = [\n    { \n        label: "Human Data",\n        columns: [\n            {\n                label: "Name",\n                columns: [\n                    {\n                        dataIndex: "fname",\n                        label: "First Name"\n                    },\n                    {\n                        dataIndex: "lname",\n                        label: "Last Name"\n                    },\n                ]\n            },\n            {\n                dataIndex: "age",\n                label: "Age"\n            },\n            { \n                label: "Gender",\n                columns: [\n                    {\n                        dataIndex: "gender",\n                        label: "Male",\n                        render: (gender) => gender === "male" && "<span role="img">\u2714\ufe0f</span>"\n                    },\n                    {\n                        dataIndex: "gender",\n                        label: "Female",\n                        render: (gender) => gender === "female" && "<span role="img">\u2714\ufe0f</span>"\n                    },\n                ]\n            },\n        ]\n    },\n]\n\n'.concat(h,"\n\n#render(\n    <Table columns={columns} data={data} />\n)"),w='import React from "react";\nimport { Table } from "reatable";\n\nconst columns = [\n    {\n        dataIndex: "fname",\n        label: "First Name"\n    },\n    {\n        dataIndex: "lname",\n        label: "Last Name"\n    },\n    {\n        dataIndex: "age",\n        label: "Age"\n    },\n    {\n        dataIndex: "gender",\n        label: "Gender",\n        render: (gender, row, index) => (\n            <span className={`badge badge-${gender === \'male\' ? \'info\' : \'danger\'}`}>\n                {gender}\n            </span>\n        )\n    },\n]\n\n'.concat(h,"\n\n#render(<Table columns={columns} data={data} />)"),v='const data = [\n    {\n        id: 1,\n        fname: "Eli",\n        lname: "Corey",\n        age: "34",\n        gender: "male",\n    },\n    {\n        id: 2,\n        fname: "August",\n        lname: "Shawn",\n        age: "59",\n        gender: "male",\n    },\n    {\n        id: 3,\n        fname: "Shawn",\n        lname: "River",\n        age: "88",\n        gender: "male",\n    },\n    {\n        id: 4,\n        fname: "Rowan",\n        lname: "Maxwell",\n        age: "43",\n        gender: "female",\n    },\n    {\n        id: 5,\n        fname: "Pat",\n        lname: "Lake",\n        age: "100",\n        gender: "male",\n    },\n    {\n        id: 6,\n        fname: "Devin",\n        lname: "Bailey",\n        age: "98",\n        gender: "female",\n    },\n    {\n        id: 7,\n        fname: "Clay",\n        lname: "Finley",\n        age: "97",\n        gender: "male",\n    },\n    {\n        id: 8,\n        fname: "Drew",\n        lname: "London",\n        age: "66",\n        gender: "male",\n    },\n    {\n        id: 9,\n        fname: "Rudy",\n        lname: "Avery",\n        age: "73",\n        gender: "female",\n    },\n    {\n        id: 10,\n        fname: "Dana",\n        lname: "Julian",\n        age: "59",\n        gender: "female",\n    },\n    {\n        id: 11,\n        fname: "Val",\n        lname: "Clay",\n        age: "93",\n        gender: "female",\n    },\n    {\n        id: 12,\n        fname: "Delta",\n        lname: "Dorian",\n        age: "87",\n        gender: "male",\n    },\n    {\n        id: 13,\n        fname: "Ash",\n        lname: "Hayden",\n        age: "50",\n        gender: "female",\n    },\n    {\n        id: 14,\n        fname: "Reed",\n        lname: "Gabriel",\n        age: "37",\n        gender: "male",\n    },\n    {\n        id: 15,\n        fname: "Aiden",\n        lname: "Stevie",\n        age: "68",\n        gender: "female",\n    },\n    {\n        id: 16,\n        fname: "Bay",\n        lname: "Rory",\n        age: "97",\n        gender: "male",\n    },\n    {\n        id: 17,\n        fname: "Campbell",\n        lname: "Harley",\n        age: "56",\n        gender: "female",\n    },\n    {\n        id: 18,\n        fname: "Mason",\n        lname: "Andy",\n        age: "31",\n        gender: "male",\n    },\n    {\n        id: 19,\n        fname: "Glenn",\n        lname: "Carroll",\n        age: "70",\n        gender: "male",\n    },\n    {\n        id: 20,\n        fname: "Brooklyn",\n        lname: "Adrian",\n        age: "62",\n        gender: "female",\n    }\n]',E='import React from "react";\nimport { Table } from "reatable";\n\nconst columns = [\n    {\n        dataIndex: "fname",\n        label: "First Name"\n    },\n    {\n        dataIndex: "lname",\n        label: "Last Name"\n    },\n    {\n        dataIndex: "age",\n        label: "Age"\n    },\n    {\n        dataIndex: "gender",\n        label: "Gender"\n    },\n]\n\n'.concat(v,"\n\n#render(\n    <Table\n        columns={columns} \n        data={data} \n        pagination={{\n            pageSize: 5\n        }} \n    />\n)"),C='import React from "react";\nimport { Table } from "reatable";\n\nconst columns = [\n    {\n        dataIndex: "fname",\n        label: "First Name",\n        sortable: true,\n        sortOrderDefault: \'desc\'\n    },\n    {\n        dataIndex: "lname",\n        label: "Last Name",\n        sortable: (a, b) => a.length - b.length,\n        sortDirection: ["asc"]\n    },\n    {\n        dataIndex: "age",\n        label: "Age",\n        sortable: true,\n        sortDirection: ["desc", "asc"]\n    },\n    {\n        dataIndex: "gender",\n        label: "Gender"\n    },\n]\n\n'.concat(v,'\n\n#render(\n    <>  \n        <style>\n            {`table.sortable-table td[data-sorted="true"], \n            table.sortable-table th[data-sortable="true"]:not([data-sort-order="none"]) {\n                background: rgba(0,0,0,0.04)\n            }`} \n        </style>\n        <Table \n            className="n-table n-no-shadow sortable-table" \n            columns={columns} \n            data={data} \n            pagination={{\n                pageSize: 5\n            }} \n        />\n    </>\n)'),I='import React from "react";\nimport { Table } from "reatable";\n\nconst columns = [\n    {\n        dataIndex: "fname",\n        label: "First Name", \n    },\n    {\n        dataIndex: "lname",\n        label: "Last Name"\n    },\n    {\n        dataIndex: "age",\n        label: "Age",\n        sortable: true,\n        sortOrderDefault: \'asc\'\n    },\n    {\n        dataIndex: "gender",\n        label: "Gender"\n    },\n]\n\n'.concat(h,'\n\n#render(\n    <>\n        <style>\n            {`.row-collapsible tr[data-collapsible="true"] {\n                cursor: pointer; \n            }`}\n            {`.row-collapsible tr[data-collapsible="false"] { \n                background: rgba(0,0,0,0.05)\n            }`}\n        </style>\n        <Table \n            className="n-table n-no-shadow row-collapsible" \n            columns={columns} \n            data={data}  \n            collapsible={{\n                render: (row) => (\n                    <div style={{padding: "10px 20px"}}>\n                    {`${row.fname} ${row.lname} is age below 50, that is why the row is collapsible base on the condition in collapseWhen`}\n                    </div>\n                ),\n                collapseWhen: (row) => parseInt(row.age) < 50,\n                collapseWhenClickRow: true,\n                accordion: true,\n                transition: {\n                    duration: 100,\n                    timingFunction: "ease-in"\n                },\n            }}\n        />\n    </>\n)'),T='import React from "react";\nimport { Table } from "reatable";\n\nconst columns = [\n    {\n        dataIndex: "fname",\n        label: "First Name",\n        render: (fname, row, index, {collapsible, sort, page, filters}) => {\n            const { collapsed, collapseHandler } = collapsible \n            return (\n                <span className="d-flex flex-center-y">\n                    {collapsible && (\n                        <button \n                            className={`n-btn btn-caret mr-2${collapsed ? " active" : ""}`} \n                            onClick={collapseHandler} \n                        />  \n                    )}\n                    {fname}\n                </span>\n            )\n        }\n    },\n    {\n        dataIndex: "lname",\n        label: "Last Name"\n    },\n    {\n        dataIndex: "age",\n        label: "Age",\n        sortable: true,\n        sortOrderDefault: \'asc\'\n    },\n    {\n        dataIndex: "gender",\n        label: "Gender"\n    },\n]\n\n'.concat(h,'\n\n#render(\n    <> \n        <Table \n            className="n-table n-no-shadow row-collapsible" \n            columns={columns} \n            data={data}  \n            collapsible={{\n                render: (row) => (\n                    <div style={{padding: "10px 20px"}}>\n                    {`${row.fname} ${row.lname} is age below 50, that is why the row is collapsible base on the condition in collapseWhen`}\n                    </div>\n                ),\n                collapseWhen: (row) => parseInt(row.age) < 50,\n            }}\n        />\n    </>\n)'),k='import React from "react";\nimport { Table } from "reatable";\n\nconst columns = [\n    {\n        dataIndex: "fname",\n        label: "First Name", \n        sortable: true,\n        filterSearch: { label: "Search", like: "{search}%"}\n    },\n    {\n        dataIndex: "lname",\n        label: "Last Name",\n        sortable: true,\n        filters: [\n            { label: "Starts with A", like: "a%" },\n            { label: "Starts with B", like: "b%" },\n            { label: "Ends with Y", like: "%y" },\n            { label: "Has C", like: "%c%" }\n        ],\n    },\n    {\n        dataIndex: "age",\n        label: "Age", \n        sortable: true,\n    },\n    {\n        dataIndex: "gender",\n        label: "Gender",  \n        filters: [\n            { label: "Male", like: "male" },\n            { label: "Female", like: "female" }\n        ],\n        filterMultiple: false\n    },\n]\n\n'.concat(v,'\n\n#render(\n    <> \n        <Table \n            className="n-table n-no-shadow sortable-table" \n            columns={columns} \n            data={data} \n            pagination={{\n                pageSize: 5\n            }} \n        />\n    </>\n)'),S=function(){return o.a.createElement(i.m,{readonly:!0,title:"Installation",code:"npm i reatable",language:"js",theme:{plain:{color:"rgb(215,215,215)",backgroundColor:"rgb(86,86,86)"},styles:[]}})},N=function(){return o.a.createElement(i.m,{readonly:!0,title:"Imports",code:'import { Table, TableContent, Pagination, Loader, usePagination, useSort, useFilter } from "reatable"'})},F=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(i.m,{title:"Getting Started",context:"it is the basic example for reatable.",code:y,scope:g}),o.a.createElement(i.k,{variant:"info",context:o.a.createElement(o.a.Fragment,null,o.a.createElement("b",null,"Table")," or ",o.a.createElement("b",null,"TableContent")," setting ",o.a.createElement("b",null,"className")," attribute will remove the default stylesheet in table to prevent conflict to the setted class."),style:{marginTop:"-20px"}}),o.a.createElement(i.k,{context:o.a.createElement(o.a.Fragment,null,o.a.createElement("b",null,"Table")," property ",o.a.createElement("b",null,"data")," must be an array of object that contains ",o.a.createElement("b",null,"id")," or ",o.a.createElement("b",null,"key")," to distinguish it from each other to prevent bugs."),style:{marginBottom:"20px"}}))},R=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(i.m,{title:"Column Group",context:"you can group your table column headers.",code:x,scope:g}),o.a.createElement(i.k,{variant:"info",title:"Tip",context:"you can group column headers as many group as you like.",style:{marginTop:"-20px",marginBottom:"20px"}}),o.a.createElement(i.k,{context:o.a.createElement(o.a.Fragment,null,o.a.createElement("b",null,"Table")," property ",o.a.createElement("b",null,"data")," must be an array of object that contains ",o.a.createElement("b",null,"id")," or ",o.a.createElement("b",null,"key")," to distinguish it from each other to prevent bugs.")}))},P=function(){return o.a.createElement(i.m,{title:"Mutating Table Cell",context:"you can mutate the appearance and elements of table cell",code:w,scope:g})},z=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(i.m,{collapsible:!0,title:"Table With Pagination",context:"whenever the data is too big you need to paginate which is built-in in reatable.",code:E,scope:g}),o.a.createElement(i.k,{variant:"info",context:"pagination will only be applicable if you assign value in pagination property pageSize.",style:{marginTop:"-20px",marginBottom:"20px"}}))},A=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(i.m,{collapsible:!0,title:"Sortable Table",context:"it has built-in feature column sorting.",code:C,scope:g}),o.a.createElement(i.k,{variant:"info",context:"the column property sortable can be assign boolean that will be sorted by the built-in sorting algorithm of the component. or you can make your own algorithm by assigning function that compares the two argument.",style:{marginTop:"-20px",marginBottom:"20px"}}),o.a.createElement(i.k,{context:"built-in sorting algorithm is not applicable in asynchronous table."}))},M=function(){return o.a.createElement(i.m,{title:"Collapsible Table",context:"you can make a collapsible table.",code:I,scope:g})},L=function(){return o.a.createElement(i.m,{collapsible:!0,title:"Collapsible Table Using Button",context:"you can make a collapsible table using button in columns render.",code:T,scope:g})},j=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(i.m,{collapsible:!0,title:"Table Filtration",context:"it has built-in feature column filtering.",code:k,scope:g}),o.a.createElement(i.k,{context:"built-in filtering algorithm is not applicable in asynchronous table.",style:{marginTop:"-20px",marginBottom:"20px"}}))},D=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(i.m,{title:"Asynchronous Table",context:"you can make asynchronous table.",code:'import React from "react";\nimport { Table } from "reatable";\n\nconst columns = [\n    {\n        dataIndex: "fname",\n        label: "First Name", \n        sortable: true,\n        filterSearch: { label: "Search", like: "{search}%"}\n    },\n    {\n        dataIndex: "lname",\n        label: "Last Name",\n        sortable: true,\n    },\n    {\n        dataIndex: "age",\n        label: "Age",\n        sortable: true,\n    },\n    {\n        dataIndex: "gender",\n        label: "Gender", \n        filters: [\n            { label: "Male", like: "male" },\n            { label: "Female", like: "female" }\n        ],\n        filterMultiple: false\n    },\n]\n\nconst AsyncTable = () => {\n    const [response, setResponse] = React.useState({data: [], rowsCount: 0})\n    const [changes, setChanges] = React.useState(null)\n\n    React.useEffect(() => {\n        if(!changes) return\n        \n        const controller = new AbortController()\n        fetch("/human/data", {\n            signal: controller.signal,\n            method: "GET", \n            headers: {\n                "Content-Type": "application/json"\n            },\n            body: {\n                sortOrderBy: changes.sort.orderBy,\n                sortOrder: changes.sort.order,\n                currentPage: changes.pagination.currentPage,\n                pageSize: changes.pagination.pageSize,\n                filters: changes.filters,\n            } \n        })\n        .then((response) => {\n            if(response.status === 200) {\n                return response.json() \n            } else {\n                response.error()\n            }\n        }).then((result) => {\n            setResponse({\n                data: result.data,\n                rowsCount: result.rowsCount\n            })\n        })\n        .catch((error) => console.error(error))\n        return () => controller.abort()\n    }, [changes])\n\n    const handleChange = React.useCallback((e) => { \n        setChanges(e)\n    }, [])\n\n    return (\n        <Table \n            className="n-table n-no-shadow sortable-table" \n            columns={columns} \n            data={response.data} \n            pagination={{\n                pageSize: 5,\n                totalRows: response.rowsCount\n            }} \n            asynchronous\n            onChange={handleChange} \n        />\n    )\n}\n\n#render(<AsyncTable />)',scope:Object(s.a)({},g,{fetch:p,AbortController:u})}),o.a.createElement(i.k,{variant:"info",context:"every action you made the loader will be shown because the table is asynchronous which makes it to wait for the sever response.",style:{marginTop:"-20px",marginBottom:"20px"}}))},B=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(i.m,{collapsible:!0,title:"Customizable Table Interfaces",context:"you can customize your table appearance.",code:'import React from "react";\nimport { Table, TableContent, Pagination, Loader } from "reatable";\n\nconst columns = [\n    {\n        dataIndex: "fname",\n        label: "First Name", \n        sortable: true,\n        filterSearch: { label: "Search", like: "{search}%"}\n    },\n    {\n        dataIndex: "lname",\n        label: "Last Name",\n        sortable: true,\n    },\n    {\n        dataIndex: "age",\n        label: "Age",\n        sortable: true,\n    },\n    {\n        dataIndex: "gender",\n        label: "Gender", \n        filters: [\n            { label: "Male", like: "male" },\n            { label: "Female", like: "female" }\n        ],\n        filterMultiple: false\n    },\n]\n\nconst containerStyle = {\n    position: "relative",  \n    overflowX: "auto"\n}\n\nconst AsyncTable = () => {\n    const [response, setResponse] = React.useState({data: [], rowsCount: 0})\n    const [changes, setChanges] = React.useState(null)\n    \n    React.useEffect(() => {\n        if(!changes) return\n        \n        const controller = new AbortController()\n        fetch("/human/data", {\n            signal: controller.signal,\n            method: "GET", \n            headers: {\n                "Content-Type": "application/json"\n            },\n            body: {\n                sortOrderBy: changes.sort.orderBy,\n                sortOrder: changes.sort.order,\n                currentPage: changes.pagination.currentPage,\n                pageSize: changes.pagination.pageSize,\n                filters: changes.filters,\n            } \n        })\n        .then((response) => {\n            if(response.status === 200) {\n                return response.json() \n            } else {\n                response.error()\n            }\n        }).then((result) => {\n            setResponse({\n                data: result.data,\n                rowsCount: result.rowsCount\n            })\n        })\n        .catch((error) => console.error(error))\n        return () => controller.abort()\n    }, [changes])\n\n    const handleChange = React.useCallback((e) => { \n        setChanges(e)\n    }, [])\n\n    return (\n        <Table  \n            columns={columns} \n            data={response.data} \n            pagination={{\n                pageSize: 5,\n                totalRows: response.rowsCount\n            }} \n            asynchronous\n            onChange={handleChange} \n        >\n            <div style={containerStyle}>  \n                <div className="d-flex flex-end-x">\n                    <Pagination /> \n                </div>\n                <TableContent className="n-table n-no-shadow sortable-table" />\n                <div className="d-flex flex-end-x">\n                    <Pagination /> \n                </div>\n                <Loader />\n            </div>\n        </Table>\n    )\n}\n\n#render(<AsyncTable />)',scope:Object(s.a)({},g,{fetch:p,AbortController:u})}),o.a.createElement(i.k,{variant:"info",context:"all the component and hooks are only applicable inside Table component.",style:{marginTop:"-20px",marginBottom:"20px"}}),o.a.createElement(i.k,{variant:"info",context:o.a.createElement(o.a.Fragment,null,"passing the ",o.a.createElement("b",null,"className")," in ",o.a.createElement("b",null,"Table")," will be unnecessary, since you can access directly to the ",o.a.createElement("b",null,"TableContent")," to assign"," ",o.a.createElement("b",null,"className"),".")}))},O=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(i.m,{collapsible:!0,title:"Customize Loader",context:"you can customize your loader appearance.",code:'import React from "react";\nimport { Table, TableContent, Pagination, Loader } from "reatable";\n\nconst columns = [\n    {\n        dataIndex: "fname",\n        label: "First Name", \n        sortable: true,\n        filterSearch: { label: "Search", like: "{search}%"}\n    },\n    {\n        dataIndex: "lname",\n        label: "Last Name",\n        sortable: true,\n    },\n    {\n        dataIndex: "age",\n        label: "Age",\n        sortable: true,\n    },\n    {\n        dataIndex: "gender",\n        label: "Gender", \n        filters: [\n            { label: "Male", like: "male" },\n            { label: "Female", like: "female" }\n        ],\n        filterMultiple: false\n    },\n]\n\nconst loaderStyle = {\n    display: "flex",\n    justifyContent: "center", \n    position: "absolute",\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: "rgba(0, 0, 0, 0.5)",\n    color: "#fff"\n}\n\nconst containerStyle = {\n    position: "relative",  \n    overflowX: "auto"\n}\n\nconst AsyncTable = () => {\n    const [response, setResponse] = React.useState({data: [], rowsCount: 0})\n    const [changes, setChanges] = React.useState(null)\n    \n    React.useEffect(() => {\n        if(!changes) return\n        \n        const controller = new AbortController()\n        fetch("/human/data", {\n            signal: controller.signal,\n            method: "GET", \n            headers: {\n                "Content-Type": "application/json"\n            },\n            body: {\n                sortOrderBy: changes.sort.orderBy,\n                sortOrder: changes.sort.order,\n                currentPage: changes.pagination.currentPage,\n                pageSize: changes.pagination.pageSize,\n                filters: changes.filters,\n            } \n        })\n        .then((response) => {\n            if(response.status === 200) {\n                return response.json() \n            } else {\n                response.error()\n            }\n        }).then((result) => {\n            setResponse({\n                data: result.data,\n                rowsCount: result.rowsCount\n            })\n        })\n        .catch((error) => console.error(error))\n        return () => controller.abort()\n    }, [changes])\n\n    const handleChange = React.useCallback((e) => { \n        setChanges(e)\n    }, [])\n\n    return (\n        <Table  \n            columns={columns} \n            data={response.data} \n            pagination={{\n                pageSize: 5,\n                totalRows: response.rowsCount\n            }} \n            asynchronous\n            onChange={handleChange} \n        >\n            <div style={containerStyle}>   \n                <TableContent className="n-table n-no-shadow sortable-table" />\n                <div className="d-flex flex-end-x">\n                    <Pagination />\n                </div>\n                <Loader>\n                    <div style={loaderStyle}>\n                        loading......\n                    </div>\n                </Loader>\n            </div>\n        </Table>\n    )\n}\n\n#render(<AsyncTable />)',scope:Object(s.a)({},g,{fetch:p,AbortController:u})}),o.a.createElement(i.k,{variant:"warning",context:"Loader will only be visible when the table is asynchronous.",style:{marginTop:"-20px",marginBottom:"20px"}}))},G=function(){return o.a.createElement(i.m,{title:"Customizable Pagination Component",context:"you can customize pagination container and list and still using the Pagination components algorithm.",code:'import React from "react";\nimport { Table, TableContent, Pagination } from "reatable";\nimport data from "human-data.json";\nimport {columns, data} from "human-data"; \n\nconst PaginationContainer = ({ children }) => (\n    <ul className="n-nav n-nav-flated n-no-hover">\n        {children}\n    </ul>\n)\n\nconst PaginationList = ({ children, active, disabled, onClick }) => ( \n    <a \n       className={`n-nav-link${active \n            ? " active" \n            : disabled \n            ? " disabled" \n            : ""}`\n       }\n       href="#" \n       onClick={onClick}>\n        {children}\n    </a> \n)\n\n#render(\n    <Table  \n        columns={columns} \n        data={data} \n        pagination={{\n            pageSize: 5\n        }}>\n        <div className="overflow-x-auto">\n            <TableContent className="n-table n-no-shadow sortable-table" />\n            <div className="d-flex flex-end-x">\n                <Pagination \n                    prevLabel="\u2329"\n                    nextLabel="\u232a"\n                    as={{\n                        Container: PaginationContainer,\n                        List: PaginationList\n                    }} \n                />\n            </div>\n        </div>\n    </Table>\n) ',scope:Object(s.a)({},g,{},t)})},W=function(){return o.a.createElement(i.m,{title:"Create Your Own Pagination",context:"if you don't like the overall Pagination component model, then you can create your own by using usePagination.",code:'import React from "react";\nimport { Table, TableContent, usePagination } from "reatable";\nimport {columns, data} from "human-data"; \n\nconst CustomPagination = () => {\n    const { allowPagination, totalPages, page, setPage } = usePagination();\n    return allowPagination && (\n        <nav className="n-nav">\n            {Array.from(new Int32Array(totalPages)).map((v, index) => {\n                const pageNumber = index + 1\n                return (\n                    <a key={index}\n                        href="#" \n                        className={`n-nav-link${ \n                            pageNumber === page \n                            ? " active"  \n                            : ""}`\n                        }\n                        onClick={(e) => {\n                            e.preventDefault()\n                            setPage(pageNumber)\n                        }}>\n                        {pageNumber}\n                    </a>\n                )\n            })}\n        </nav>\n    )\n}\n\n#render(\n    <Table  \n        columns={columns} \n        data={data} \n        pagination={{\n            pageSize: 10\n        }}>\n        <div className="overflow-x-auto">  \n            <TableContent className="n-table n-no-shadow sortable-table" />\n            <div className="d-flex flex-end-x">\n                <CustomPagination />\n            </div>\n        </div>\n    </Table>\n) ',scope:Object(s.a)({},g,{},t)})},H=function(){return o.a.createElement(i.m,{title:"Changable Page Size",context:"there is no built-in component for page size changer but you can make your own by adding a few lines of code.",code:'import React from "react";\nimport { Table, TableContent, Pagination } from "reatable";\nimport {columns, data} from "human-data"; \n\nconst TableWrapper = () => {\n    const [pagesize, setPagesize] = React.useState(5)\n\n    const showStyle = {\n        borderRadius: "2px",\n        padding: "5px 10px",\n        marginBottom: "16px"\n    }\n    const sizeSelectionStyle = {\n        ...showStyle, \n        borderColor: \'#f0f0f0\'\n    }\n\n    return (\n        <Table  \n            columns={columns} \n            data={data} \n            pagination={{\n                pageSize: pagesize\n            }}>\n            <div className="overflow-x-auto">\n                <TableContent className="n-table n-no-shadow sortable-table" />\n                <div className="d-flex flex-spb-x">\n                    <div className="d-flex">\n                        <span style={showStyle}>show</span>\n                        <select value={pagesize} \n                            onChange={({target}) => setPagesize(parseInt(target.value)) }\n                            style={sizeSelectionStyle}>\n                            <option value="5">5</option>\n                            <option value="10">10</option>\n                            <option value="15">15</option>\n                            <option value="20">20</option>\n                        </select>\n                    </div>\n                    <Pagination /> \n                </div>\n            </div>\n        </Table>\n    )\n}\n\n#render(<TableWrapper />)',scope:Object(s.a)({},g,{},t)})},$=function(){return o.a.createElement(i.m,{collapsible:!0,title:"Create Filter By First Letters",context:"you can do all you want on filtering by using hook useFilter, this is just one of many things that you can do.",code:'import React from "react";\nimport { Table, TableContent, Pagination, useFilter } from "reatable";\nimport { data } from "human-data"; \n\nconst columns = [\n    {\n        dataIndex: "fname",\n        label: "First Name",  \n    },\n    {\n        dataIndex: "lname",\n        label: "Last Name",\n        sortable: true,\n    },\n    {\n        dataIndex: "age",\n        label: "Age", \n    },\n    {\n        dataIndex: "gender",\n        label: "Gender",\n        filters: [\n            { label: "Male", like: "male" },\n            { label: "Female", like: "female" }\n        ],\n        filterMultiple: false,\n    },\n]\n\nconst Alphabet = [ \n    { label: "A", like: "a%" }, \n    { label: "B", like: "b%" },\n    { label: "C", like: "c%" },\n    { label: "D", like: "d%" },\n    { label: "E", like: "e%" },\n    { label: "F", like: "f%" },\n    { label: "G", like: "g%" },\n    { label: "H", like: "h%" }, \n    { label: "I", like: "i%" }, \n    { label: "J", like: "j%" },\n    { label: "K", like: "k%" },\n    { label: "L", like: "l%" },\n    { label: "M", like: "m%" },\n    { label: "N", like: "n%" },\n    { label: "O", like: "o%" },\n    { label: "P", like: "p%" },\n    { label: "Q", like: "q%" },\n    { label: "R", like: "r%" },\n    { label: "S", like: "s%" },\n    { label: "T", like: "t%" },\n    { label: "U", like: "u%" },\n    { label: "V", like: "v%" },\n    { label: "W", like: "w%" },\n    { label: "X", like: "x%" },\n    { label: "Y", like: "y%" },\n    { label: "Z", like: "z%" },\n]\n\nconst CustomFilterAlphabet = () => {\n    const [dataIndex, setDataIndex] = React.useState("fname")\n    const { \n        // filterable, \n        // filters, \n        // filterMultiple, \n        // filterSearch,\n        filterState,\n        setFilter \n    } = useFilter(dataIndex);\n\n    const dataIndexCurrentFilter = filterState.find(each => { \n        return each.dataIndex === dataIndex\n    })\n    \n    return (\n        <div className="d-flex flex-center-y mb-3"> \n            <div className="custom-filter">\n                <span className="filter-label">Filter By:</span>\n                <select\n                    className="filter-form" \n                    value={dataIndex} \n                    onChange={({target}) => setDataIndex(target.value)}>\n                    <option value="fname">First Name</option>\n                    <option value="lname">Last Name</option> \n                </select>    \n                <button \n                    className="filter-form"\n                    onClick={() => setFilter(() => [])}>\n                    Reset\n                </button> \n            </div>  \n            <ul className="custom-letter-filter">\n                {Alphabet.map((each) => (\n                        <li key={each.label} \n                            className={\n                                dataIndexCurrentFilter && \n                                dataIndexCurrentFilter\n                                    .value\n                                    .includes(each.like) \n                                ? " active"  \n                                : "" }>\n                            <a  href="#" \n                                onClick={(e) => {\n                                    e.preventDefault()\n                                    setFilter((current) => {  \n                                        const update = dataIndexCurrentFilter \n                                                            || { dataIndex, value: [] } \n                                        const isAlreadyActive = update.value.includes(each.like)\n                                        update.value = isAlreadyActive\n                                                ? update.value.filter(like => like !== each.like)\n                                                : [...update.value, each.like]\n                                        return update.value.length  \n                                            ? [...current, update]\n                                            : current.filter(fltr => fltr.dataIndex !== dataIndex)\n                                    })\n                                }}>\n                            {each.label}\n                            </a>\n                        </li>\n                    )\n                )}\n            </ul> \n        </div>\n    )\n}\n\nconst showStyle = {\n    borderRadius: "2px",\n    padding: "4px 10px",\n    marginBottom: "16px"\n}\nconst sizeSelectionStyle = {\n    ...showStyle, \n    borderColor: \'#f0f0f0\'\n}\n\nconst TableWrapper = () => {\n    const [pagesize, setPagesize] = React.useState(5)\n    return (\n        <Table  \n            columns={columns} \n            data={data} \n            pagination={{\n                pageSize: pagesize\n            }}>\n            <div className="overflow-x-auto">\n                <CustomFilterAlphabet />  \n                <TableContent className="n-table n-no-shadow sortable-table" />\n                <div className="d-flex flex-spb-x">\n                    <div className="d-flex">\n                        <span style={showStyle}>show</span>\n                        <select value={pagesize} \n                            onChange={({target}) => setPagesize(parseInt(target.value)) }\n                            style={sizeSelectionStyle}>\n                            <option value="5">5</option>\n                            <option value="10">10</option>\n                            <option value="15">15</option>\n                            <option value="20">20</option>\n                        </select>\n                    </div>\n                    <Pagination /> \n                </div>\n            </div>\n        </Table>\n    )\n}\n\n#render(<TableWrapper />) ',scope:Object(s.a)({},g,{},t)})},J=function(){return o.a.createElement(i.m,{collapsible:!0,title:"Create Filter By Search",context:"filter by search is so typical in dynamic table. this is just the idea to create greater things.",code:'import React from "react";\nimport { Table, TableContent, Pagination, useFilter } from "reatable";\nimport { data } from "human-data"; \n\nconst columns = [\n    {\n        dataIndex: "fname",\n        label: "First Name", \n    },\n    {\n        dataIndex: "lname",\n        label: "Last Name",\n        sortable: true, \n    },\n    {\n        dataIndex: "age",\n        label: "Age", \n    },\n    {\n        dataIndex: "gender",\n        label: "Gender",\n        filters: [\n            { label: "Male", like: "male" },\n            { label: "Female", like: "female" }\n        ],\n        filterMultiple: false,\n    },\n] \n\nconst CustomFilterBySearch = () => {\n    const [dataIndex, setDataIndex] = React.useState("fname") \n    const { \n        // filterable, \n        // filters, \n        // filterMultiple, \n        // filterSearch,\n        filterState,\n        setFilter \n    } = useFilter(dataIndex);\n\n    const dataIndexCurrentFilter = filterState.find(each => { \n        return each.dataIndex === dataIndex\n    })\n\n    return ( \n        <div key={dataIndex} className="custom-filter mb-3"> \n                <span className="filter-label">Filter By:</span> \n            <select\n                className="filter-form" \n                value={dataIndex} \n                onChange={({target}) => {\n                    setDataIndex(target.value)\n                    setFilter((current) => current.filter((fltr) => fltr.dataIndex !== dataIndex))\n                }}>\n                <option value="fname">First Name</option>\n                <option value="lname">Last Name</option> \n            </select>    \n            <input \n                className="filter-form"\n                placeholder="search..."\n                value={dataIndexCurrentFilter \n                    ? dataIndexCurrentFilter.value[0].replace(/%/g, "")\n                    : ""}\n                onChange={({target}) => {\n                    const value = target.value \n                    setFilter((current) => { \n                        const update = dataIndexCurrentFilter || { dataIndex, value: []}\n                        update.value = [`${value}%`]\n                        return value.length \n                            ? [...current, update]\n                            : current.filter((fltr) => fltr.dataIndex !== dataIndex) \n                    })\n                }} \n            /> \n            <button \n                className="filter-form"\n                onClick={() => setFilter(() => [])}>\n                Reset\n            </button> \n        </div>  \n    )\n}\n\nconst showStyle = {\n    borderRadius: "2px",\n    padding: "4px 10px",\n    marginBottom: "16px"\n}\nconst sizeSelectionStyle = {\n    ...showStyle, \n    borderColor: \'#f0f0f0\'\n}\n\nconst TableWrapper = () => {\n    const [pagesize, setPagesize] = React.useState(5)\n    return (\n        <Table  \n            columns={columns} \n            data={data} \n            pagination={{\n                pageSize: pagesize\n            }}>\n            <div className="overflow-x-auto">\n                <div className="d-flex flex-spb-x"> \n                    <CustomFilterBySearch />\n                    <Pagination /> \n                </div>\n                <TableContent className="n-table n-no-shadow sortable-table" />\n                <div className="d-flex flex-spb-x"> \n                    <div className="d-flex"> \n                        <span style={showStyle}>show</span>\n                        <select value={pagesize} \n                            onChange={({target}) => setPagesize(parseInt(target.value)) }\n                            style={sizeSelectionStyle}>\n                            <option value="5">5</option>\n                            <option value="10">10</option>\n                            <option value="15">15</option>\n                            <option value="20">20</option>\n                        </select>\n                    </div>\n                    <Pagination /> \n                </div>\n            </div>\n        </Table>\n    )\n}\n\n#render(<TableWrapper />) ',scope:Object(s.a)({},g,{},t)})},K=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(i.m,{collapsible:!0,title:"Customize TableContent Row & Cell",context:"you can customize and create your own features on the table row(tr) and cell(td) in your own perspective, design and functionalities by using useColumn hooks, you can get your column settings you entered in the Table property columns. the customize cell example is editable and it is just one of many features you can create.",code:"import React from \"react\";\nimport { Table, TableContent, Pagination, useColumn } from \"reatable\";\nimport { data } from \"human-data\"; \n\nconst columns = [\n    {\n        dataIndex: 'fname',\n        label: 'First Name',\n        sortable: true,\n        filterSearch: { label: 'Search', like: '{search}%' },\n    },\n    {\n        dataIndex: 'lname',\n        label: 'Last Name',\n        editable: true, // you can create your own feature like this and use the useColumn to get this settings\n    },\n    {\n        dataIndex: 'age',\n        label: 'Age',\n        sortable: true,\n    },\n    {\n        dataIndex: 'gender',\n        label: 'Gender',\n        filters: [\n            { label: 'Male', like: 'male' },\n            { label: 'Female', like: 'female' },\n        ],\n        filterMultiple: false,\n    },\n];\n\nconst TableRow = ({ row, children, ...props}) => (\n    <tr\n        className={`my-class${props['aria-expanded'] ? ' collapsed' : ''}`}\n        {...props}\n    >\n        {children}\n    </tr>\n);\n\nconst EditableTableCell = ({ row, dataIndex, children, ...props}) => {\n    const column = useColumn(dataIndex)  \n    const [isEditMode, setEditMode] = React.useState(false)\n    const [value, setValue] = React.useState(children)\n    const handleDouble = (e) => {\n        e.preventDefault()\n        setEditMode(true)\n    }\n    const handleBlur = () => setEditMode(false)\n    const handleChange = ({target}) => setValue(target.value)\n\n    return (\n        <td\n            className={`your-class${props['data-sorted'] ? ' sorted' : ''}`}\n            onDoubleClick={handleDouble}\n            {...props}\n        >\n            {column.editable && isEditMode ? (\n                <input \n                    autoFocus\n                    value={value} \n                    onBlur={handleBlur} \n                    onChange={handleChange}\n                    style={{\n                        display: \"inline\",\n                        border: 0\n                    }} \n                /> \n            ) : (\n                <span>{value}</span>\n            )}\n        </td>\n    );\n}\n\n#render(\n    <Table  \n        columns={columns} \n        data={data} \n        pagination={{\n            pageSize: 5\n        }}>\n        <div className=\"overflow-x-auto\">  \n            <TableContent \n                as={{\n                    Row: TableRow,\n                    Cell: EditableTableCell\n                }} \n                className=\"n-table n-no-shadow sortable-table\" \n            />\n            <div className=\"d-flex flex-end-x\"> \n                <Pagination /> \n            </div>\n        </div>\n    </Table>\n) ",scope:Object(s.a)({},g,{},t)}),o.a.createElement(i.k,{variant:"info",context:"you can use hooks especially useColumn to get the settings on columns and create your very own features.",style:{marginTop:"-20px",marginBottom:"20px"}}))},q=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(i.m,{title:"Customize TableContent Empty Data",context:"if you don't like the given empty data design you can make your own.",code:'import React from "react";\nimport { Table, TableContent } from "reatable";\nimport { columns } from "human-data"; \n\nconst exampledata = []\n\nconst EmptyData = ({ colSpan }) => (\n    <tr className="myclass" >\n       <td colSpan={colSpan}>\n            <center>Empty Data....</center>\n       </td>\n    </tr>\n);  \n\n#render(\n    <Table  \n        columns={columns} \n        data={exampledata}>\n        <div className="overflow-x-auto">   \n            <TableContent \n                as={{\n                    Empty: EmptyData, \n                }} \n                className="n-table n-no-shadow" \n            />\n        </div>\n    </Table>\n) ',scope:Object(s.a)({},g,{},t)}),o.a.createElement(i.k,{variant:"info",context:"you can use the given hooks in this customizes components.",style:{marginTop:"-20px",marginBottom:"20px"}}))},Y=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(i.m,{title:"Customize TableContent Column Header",context:"it is just a mediocre example on how you create a column header with sortable. it is just an idea for you to create greater header.",code:'import React from "react";\nimport { Table, TableContent, Pagination, useSort, useFilter } from "reatable";\nimport { columns, data } from "human-data"; \n\nconst ColumnHeader = ({ label, dataIndex, ...rest }) => {\n\tconst { sortable, sortOrder, handleSort } = useSort(dataIndex);\n\tconst { filterable } = useFilter(dataIndex);\n    return (\n        <th \n            {...rest}\n            data-sortable={sortable}\n            data-sort-order={sortable ? sortOrder || \'none\' : undefined}\n            style={{backgroundColor: "#00BCD4"}}\n        > \n            {sortable ? (\n                <span className=\'rt-sortable\' onClick={handleSort}>\n                    {label}\n                    <i className=\'rt-sort-icon\' />\n                </span>\n            ) : (\n                label\n            )}  \n        </th>\n    );\n};\n\n#render(\n    <Table  \n        columns={columns} \n        data={data} \n        pagination={{\n            pageSize: 5\n        }}>\n        <div className="overflow-x-auto">   \n            <TableContent \n                as={{\n                    Column: ColumnHeader, \n                }} \n                className="n-table n-no-shadow" \n            />\n            <div className="d-flex flex-end-x"> \n                <Pagination /> \n            </div>\n        </div>\n    </Table>\n)',scope:Object(s.a)({},g,{},t)}),o.a.createElement(i.k,{variant:"info",context:"you can use the given hooks in this customizes components.",style:{marginTop:"-20px",marginBottom:"20px"}}))},U=function(){return o.a.createElement(i.m,{title:"Passing A Row Data On Modal",context:"it is an idea on how to pass a data on modal, since modal is commonly use to handle changes in table.",code:"import React from \"react\";\nimport { Table } from \"reatable\";\nimport { Modal } from \"modal\";\nimport { data } from \"human-data\";  \n\nconst TableWrapper = () => {\n\n    const [modalData, setModalData] = React.useState(false)\n    const columns = React.useMemo(() => [\n        {\n            dataIndex: 'fname',\n            label: 'First Name',\n            sortable: true,\n            filterSearch: { label: 'Search', like: '{search}%' },\n        },\n        {\n            dataIndex: 'lname',\n            label: 'Last Name',\n        },\n        {\n            dataIndex: 'age',\n            label: 'Age',\n            sortable: true,\n        },\n        {\n            dataIndex: 'gender',\n            label: 'Gender',\n            filters: [\n                { label: 'Male', like: 'male' },\n                { label: 'Female', like: 'female' },\n            ],\n            filterMultiple: false,\n        },\n        {\n            dataIndex: 'id',\n            label: 'Action',\n            render: (id, row, index) => {\n                const handleClick = () => setModalData(row)\n                return (\n                    <button \n                        className=\"n-btn n-btn-xs\"\n                        onClick={handleClick}\n                    >\n                        view\n                    </button>\n                )\n            }\n        },\n    ], [])\n\n    const handleClose = () => setModalData(false)\n\n    return (\n        <>\n            <Table\n                className=\"n-table n-no-shadow\"\n                columns={columns} \n                data={data} \n                pagination={{\n                    pageSize: 5\n                }}\n            />  \n            <Modal show={!!modalData} onHide={handleClose}>\n                <Modal.Title onHide={handleClose}>Row Data</Modal.Title>                \n                <Modal.Body> \n                    <p><b>ID</b>: {modalData.id}</p>\n                    <p><b>First Name</b>: {modalData.fname}</p>\n                    <p><b>Last Name</b>: {modalData.lname}</p>\n                    <p><b>Age</b>: {modalData.age}</p>\n                    <p><b>Gender</b>: {modalData.gender}</p>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        className=\"n-btn\" \n                        onClick={handleClose}>\n                        Close\n                    </button> \n                </Modal.Footer>\n            </Modal>\n        </>\n    )\n}\n\n#render(<TableWrapper />)",scope:Object(s.a)({},g,{},t,{Modal:c.b})})},V=function(){return o.a.createElement(i.m,{title:"Table Selection",context:"it is an example to apply a selection on your table with sending multple data in modal.",code:'import React from "react";\nimport { Table } from "reatable"; \nimport { Modal } from "modal";\nimport { data } from "human-data";\n\nconst CustomCheckbox = (props) => (\n    <input type="checkbox" className="n-form-control va-m mb-1" {...props} />\n)\n\nconst TableWrapper = () => {\n    const pageRows = 5\n    const [show, setShow] = React.useState(false)\n    const [selected, setSelected] = React.useState([])\n    const columns = React.useMemo(() => [\n        {\n            dataIndex: "id",\n            label: ({ data }) => (\n                <CustomCheckbox  \n                    id="master"\n                    checked={selected.length === pageRows}\n                    indeterminate="true"\n                    onChange={e => {\n                        const isChecked = e.target.checked\n                        setSelected(isChecked ? [...data] : [])\n                    }}\n                /> \n            ),\n            render: (id, row, index) => {\n                return (\n                    <CustomCheckbox\n                        id={id}\n                        checked={selected.some(each => each.id === id)}\n                        onChange={e => {\n                            const isChecked = e.target.checked\n                            setSelected(current => {\n                                return isChecked \n                                    ? [...current, row]\n                                    : current.filter(each => each.id !== id) \n                            })\n                        }}\n                    />\n                )\n            }\n        },\n        {\n            dataIndex: "fname",\n            label: "First Name",\n        },\n        {\n            dataIndex: "age",\n            label: "Age", \n            sortable: true,\n        },\n        {\n            dataIndex: "gender",\n            label: "Gender",  \n            filters: [\n                { label: "Male", like: "male" },\n                { label: "Female", like: "female" }\n            ],\n            filterMultiple: false\n        },\n    ], [selected, pageRows])\n\n    const handleChange = React.useCallback(() => setSelected([]), [])\n    const handleClose = () => setShow(false)\n\n    return (\n        <>  \n            <button\n                disabled={!selected.length}\n                className="n-btn mb-3"\n                children="view"\n                onClick={() => setShow(!show)}\n            />\n            <Table \n                className="n-table n-no-shadow" \n                columns={columns} \n                data={data} \n                pagination={{\n                    pageSize: pageRows\n                }} \n                onChange={handleChange}\n            />\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Title onHide={handleClose}>Row Data</Modal.Title>                \n                <Modal.Body> \n                    {selected.map(row => ( \n                        <div key={row.id} className="n-engrave-low mb-3">\n                            <div className="p-3">\n                                <h5>\n                                    {`${row.fname} ${row.lname} profile`}\n                                </h5>\n                                <p><b>ID</b>: {row.id}</p>\n                                <p><b>First Name</b>: {row.fname}</p>\n                                <p><b>Last Name</b>: {row.lname}</p>\n                                <p><b>Age</b>: {row.age}</p>\n                                <p><b>Gender</b>: {row.gender}</p>\n                            </div>\n                        </div>\n                    ))}\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        className="n-btn" \n                        onClick={handleClose}>\n                        Close\n                    </button> \n                </Modal.Footer>\n            </Modal>\n        </>\n    )\n}\n#render(<TableWrapper />)',scope:Object(s.a)({},g,{},t,{Modal:c.b})})},X={name:"like",type:"string",default:"-",description:o.a.createElement(o.a.Fragment,null,"It is the filteration pattern. The pattern is similar to ",o.a.createElement("b",null,"MYSQL")," ",o.a.createElement("b",null,"LIKE"),".",o.a.createElement("br",null),o.a.createElement("b",null,"%")," - The percent sign represents zero, one, or multiple characters.",o.a.createElement("br",null),o.a.createElement("b",null,'"a%"'),' - Finds any values that start with "a".',o.a.createElement("br",null),o.a.createElement("b",null,'"%a"'),' - Finds any values that ends with "a".',o.a.createElement("br",null),o.a.createElement("b",null,'"%or%"'),' - Finds any values that have "or" in any position.',o.a.createElement("br",null),o.a.createElement("b",null,'"a%o"'),' - Finds any values that start with "a" and ends with "o".',o.a.createElement("br",null),o.a.createElement("b",null,'"aloha"')," - Without ",o.a.createElement("b",null,"%")," will be recognize as exact.",o.a.createElement("br",null),'Although the "%" is only effective in ',o.a.createElement("b",null,"Table")," when"," ",o.a.createElement("b",null,"asynchronous")," is ",o.a.createElement("b",null,"false"),", but still any pattern entry will be passed on ",o.a.createElement("b",null,"onChange")," event property filters. which will be useful in"," ",o.a.createElement("b",null,"asynchronous")," that will be requested in server.")},Q=[{name:"dataIndex",type:"string",default:"-",description:"It is use to determine which column is filtering."},{name:"value",type:"like[]",default:"-",description:"It contains all filter pattern of the column dataIndex.",data:[X]}],Z=[{name:"row,",type:"any",default:"-",description:o.a.createElement(o.a.Fragment,null,"It is the row of the data iteration.")},{name:"index,",type:"number",default:"-",description:o.a.createElement(o.a.Fragment,null,"It is the index of the data iteration.")},{name:"states",type:"object",default:"-",description:o.a.createElement(o.a.Fragment,null,"It is status of the table that contains."),data:[{name:"collapsible",type:"boolean | object",default:"false",description:o.a.createElement(o.a.Fragment,null,"It is the state of the collapsible row. it will provide ",o.a.createElement("b",null,"false")," ","when the row is not collapsible."),data:[{name:"collapsed,",type:"boolean",default:"-",description:"It is the state of your row if it is already collapsed or not"},{name:"collapseHandler,",type:"function",default:"-",description:o.a.createElement(o.a.Fragment,null,"It is use to handle the row collapse state which supposed to be assign in ",o.a.createElement("b",null,"Element")," property ",o.a.createElement("b",null,"onClick"),".")}]},{name:"sort",type:"object",default:"-",description:"It is the state of sort.",data:[{name:"orderBy",type:"string | null",default:"null",description:o.a.createElement(o.a.Fragment,null,"It is the column ",o.a.createElement("b",null,"dataIndex")," which is ordering the sort.")},{name:"order",type:"'asc' | 'desc' | null",default:"null",description:"It is the order of the sort."}]},{name:"page",type:"number",default:"-",description:"It is the pagination current page."},{name:"filters",type:"object[]",default:"-",description:"It is the state of filters.",data:Q}]}],_=[{name:"dataIndex",type:"string",default:"-",description:"it is the index of the object from the data that will be displayed its value in the column. and also it is the key to get the column settings."},{name:"label",type:"string | elementType",default:"-",description:"The title of the column."},{name:"render",type:"function",default:"-",description:"To mutate the column cell which is originally string into a element or anything.",data:[{name:"function (",type:"",default:"",description:""},{name:"cellData,",type:"any",default:"-",description:o.a.createElement(o.a.Fragment,null,"It is the value which your ",o.a.createElement("b",null,"dataIndex")," providing in each iteration.")}].concat(Z,[{name:") {\n\t\t\t\t\treturn element | any\n\t\t\t\t}",type:"",default:"",description:""}])},{name:"cellAttr",type:"function",default:"-",description:"you can add your own attributes on each table cell especially colSpan.",data:[{name:"function (",type:"",default:"",description:""}].concat(Z,[{name:") {\n\t\t\t\t\treturn object\n\t\t\t\t}",type:"",default:"",description:""}])},{name:"mountCellWhen",type:"function",default:"-",description:"it is use to determine if the column cell will be mounted or not, especially when one of the cell is occupying colSpan. when returned true it will be mounted otherwise it is not.",data:[{name:"function (",type:"",default:"",description:""}].concat(Z,[{name:") {\n\t\t\t\t\treturn boolean\n\t\t\t\t}",type:"",default:"",description:""}])},{name:"sortable",type:"boolean | function",default:"-",description:"To determine if the column is sortable. plus, you can assign a function to create your own algorithm although it is not working in asynchronous."},{name:"sortOrderDefault",type:"'asc' | 'desc'",default:"-",description:"The default sort order of the column when mounted."},{name:"sortDirection",type:"['asc' | 'desc']",default:"-",description:o.a.createElement(o.a.Fragment,null,"The direction of the sort order or the sort order will only allow. normally the direction is ",o.a.createElement("b",null,"['asc', 'desc']"),", you can reverse the direction by doing ",o.a.createElement("b",null,"['desc', 'asc']"),", or you can allow only ascending by doing ",o.a.createElement("b",null,"['asc']")," or descending by doing ",o.a.createElement("b",null,"['desc']"),".")},{name:"filters",type:"object[]",default:"-",description:"The filters options list.",data:[{name:"label",type:"string",default:"-",description:"The label of the option."},X]},{name:"filterSearch",type:"object",default:"-",description:"The filtering by search.",data:[{name:"label",type:"string",default:"-",description:"The placeholder of the search filter."},X]},{name:"filterMultiple",type:"boolean",default:"true",description:o.a.createElement(o.a.Fragment,null,"When ",o.a.createElement("b",null,"true"),", the options will be a ",o.a.createElement("b",null,"checkbox"),". When"," ",o.a.createElement("b",null,"false"),", the option will be ",o.a.createElement("b",null,"radio button"))}],ee=[{name:"columns",type:"object[]",default:"-",description:"The settings of the table columns.",data:[{name:"columns",type:"object[]",default:"-",description:"To make a nested column group.",data:[{name:"columns",type:"object[]",default:"-",description:"To make a nested column group.",data:_}].concat(_)}].concat(_)},{name:"data",type:"object[]",default:"-",description:"The data of the table which is to be display."},{name:"className",type:"string",default:"-",description:"The className of your table."},{name:"pagination",type:"object",default:"-",description:"The setting of your pagination.",data:[{name:"pageSize",type:"number",default:"0",description:"The row size of each page. When 0 or no entry, all the data will be rendered and the pagination will not be visible"},{name:"totalRows",type:"number",default:"-",description:o.a.createElement(o.a.Fragment,null,"The total row of the data. it is useful when ",o.a.createElement("b",null,"Table")," is"," ",o.a.createElement("b",null,"asynchronous"))},{name:"currentPage",type:"number",default:"1",description:"The current page of pagination"}]},{name:"collapsible",type:"object",default:"-",description:"The setting of your expandable row.",data:[{name:"render",type:"function",default:"-",description:"It is the function on what is the content of the collapse.",data:[{name:"function (",type:"",default:"",description:""},{name:"row",type:"object",default:"-",description:"It is the row of each data iteration"},{name:") { return element }",type:"",default:"",description:""}]},{name:"collapseWhen",type:"function",default:"-",description:"It is use to determine which row is allowed to be collapsible.",data:[{name:"function (",type:"",default:"",description:""},{name:"row",type:"object",default:"-",description:"It is the row of each data iteration."},{name:") { return boolean }",type:"",default:"",description:""}]},{name:"collapseWhenClickRow",type:"boolean",default:"false",description:"When true, the entire row will be the trigger to collapse the whole thing."},{name:"accordion",type:"boolean",default:"false",description:"When true, the collapse will only expanded one at a time. if there are row which is collapsed then it will close automatically when another is open"},{name:"transition",type:"object",default:"-",description:"The transition of collapsed.",data:[{name:"duration",type:"number",default:"300",description:"It is the duration which the collapsed will transition."},{name:"timingFunction",type:"string",default:"'ease-in-out'",description:"It is the easing function."}]}]},{name:"asynchronous",type:"boolean",default:"false",description:"To determine if the table data will be requested when action is pagination, sort, and filters. Plus, The loader will be activated while waiting on the request."},{name:"onChange",type:"React.useCallback",default:"-",description:"It will be triggered when there is a action changes in the table like pagination, sort, and filters.",data:[{name:"React.useCallback(function (",type:"",default:"",description:""},{name:"event",type:"object",default:"-",description:"It is the statuses of the Table.",data:[{name:"sort",type:"object",default:"-",description:"It is the state of sort.",data:[{name:"orderBy",type:"string | null",default:"null",description:o.a.createElement(o.a.Fragment,null,"It is the column ",o.a.createElement("b",null,"dataIndex")," which is ordering the sort.")},{name:"order",type:"'asc' | 'desc' | null",default:"null",description:"It is the order of the sort."}]},{name:"pagination",type:"object",default:"-",description:"It is the state of pagination.",data:[{name:"currentPage",type:"number",default:"1",description:"It is the pagination current page."},{name:"pageSize",type:"number",default:"0",description:"The row size of each page. 0 means no pagination which will render all the data."}]},{name:"filters",type:"object[]",default:"-",description:"It is the state of filters.",data:Q}]},{name:") { return void }, [])",type:"",default:"",description:""}]}],ne=[{name:"as",type:"object",default:"-",description:"It is use to customize certain components without changing the main algorithm.",data:[{name:"Row",type:"elementType",default:"<tr>",description:"The customize table row.",data:[{name:"row",type:"object",default:"-",description:"The row of each data iteration."},{name:"onClick",type:"function",default:"-",description:o.a.createElement(o.a.Fragment,null,"It is the collapse handler when ",o.a.createElement("b",null,"collapsedWhenClickRow")," is"," ",o.a.createElement("b",null,"true"),".")},{name:"data-collapsible",type:"boolean",default:"false",description:"It is use to access the row which is collapsible and not."},{name:"aria-expanded",type:"boolean",default:"false",description:"It is the ARIA attribute when row is collapsed or not."},{name:"children",type:"element[]",default:"-",description:"It is the cells."}]},{name:"Cell",type:"elementType",default:"<td>",description:"The customize table cell.",data:[{name:"row",type:"object",default:"-",description:"The row of each data iteration."},{name:"dataIndex",type:"string",default:"-",description:"It is the dataIndex of the column."},{name:"data-sorted",type:"boolean",default:"-",description:"It is use to access the cell which are sorted."},{name:"children",type:"element | string",default:"-",description:"It is the content of the cell."}]},{name:"Column",type:"elementType",default:"ColumnWithSortAndFilter",description:"The customize table column header.",data:[{name:"dataIndex",type:"string",default:"-",description:"It is the dataIndex of the column."},{name:"label",type:"string | element",default:"-",description:"It is label or title of the column."},{name:"data-reatable",type:"string",default:"-",description:"It is the heirarchy of the column especially in column groups."},{name:"rowSpan",type:"number",default:"-",description:"It is the row span of the column in column group."},{name:"colSpan",type:"number",default:"-",description:"It is the col span of the column in column group."}]},{name:"Empty",type:"elementType",default:"EmptyData",description:"The customize display when table is empty.",data:[{name:"colSpan",type:"number",default:"-",description:"It is the number of columns."}]}]},{name:"className",type:"string",default:"-",description:"The className of your table."}],ae=[{name:"as",type:"object",default:"-",description:"It is use to customize certain components without changing the main algorithm.",data:[{name:"Container",type:"elementType",default:"UlComponent",description:"It is the navigation container of the pagination.",data:[{name:"children",type:"element[]",default:"-",description:"It is lists."}]},{name:"List",type:"elementType",default:"LiComponent",description:"It is the navigation of the pagination.",data:[{name:"children",type:"string | number",default:"-",description:"It is pagination numbers."},{name:"active",type:"boolean",default:"-",description:"you will recieved true when number is the current page."},{name:"disabled",type:"boolean",default:"-",description:"you will recieved true when the next or prev is near the current page."},{name:"onClick",type:"function",default:"-",description:"It is the button handler."}]}]},{name:"className",type:"string",default:"rt-pagination",description:"The className of your pagination."},{name:"nextLabel",type:"string | element",default:"'next'",description:"The label of the next button."},{name:"prevLabel",type:"string | element",default:"'prev'",description:"The label of the prev button."}],te=[{name:"const {",type:"",default:"",description:""},{name:"allowPagination,",type:"boolean",default:"-",description:"It use to determine if pagination will be display."},{name:"totalPages,",type:"boolean",default:"-",description:"It is the total pages of the pagination."},{name:"page,",type:"number",default:"-",description:"It is the number of the current page."},{name:"setPage,",type:"function",default:"-",description:"It is use to assign the current page in the table state."},{name:"} = usePagination()",type:"",default:"",description:""}],le=[{name:"const {",type:"",default:"",description:""},{name:"sortable,",type:"boolean",default:"-",description:"It is use to determine if column is sortable."},{name:"sortOrder,",type:"'asc' | 'desc' | null",default:"-",description:"It is the state order currently the column is in."},{name:"handleSort,",type:"function",default:"-",description:"It is the sort handler that suppose to be assign in the certain element property onClick"},{name:"} = useSort(",type:"",default:"",description:""},{name:"dataIndex",type:"string",default:"-",description:"To get the column setting."},{name:")",type:"",default:"",description:""}],oe=[{name:"const {",type:"",default:"",description:""},{name:"filterable,",type:"boolean",default:"-",description:"It is use to determine if column is filterable."},{name:"filters,",type:"object[]",default:"-",description:o.a.createElement(o.a.Fragment,null,"It is the content you put in ",o.a.createElement("b",null,"Table")," property ",o.a.createElement("b",null,"columns"))},{name:"filterSearch,",type:"object",default:"-",description:o.a.createElement(o.a.Fragment,null,"It is the content you put in ",o.a.createElement("b",null,"Table")," property ",o.a.createElement("b",null,"columns"))},{name:"filterMultiple,",type:"boolean",default:"-",description:o.a.createElement(o.a.Fragment,null,"It is the content you put in ",o.a.createElement("b",null,"Table")," property ",o.a.createElement("b",null,"columns"))},{name:"filterState,",type:"object[ ]",default:"-",description:o.a.createElement(o.a.Fragment,null,"It is the current state of the filters which had been applied."),data:[{name:"[{",type:"",default:"",description:""}].concat(Q,[{name:"}]",type:"",default:"",description:""}])},{name:"setFilter,",type:"function",default:"-",description:"It is use to assign filters in the table state."},{name:"} = useFilter(",type:"",default:"",description:""},{name:"dataIndex",type:"string",default:"-",description:"To get the column setting."},{name:")",type:"",default:"",description:""}],re=[{name:"const",type:"",default:"",description:""},{name:"column",type:"object",default:"-",description:"It is the setting of the column.",data:_},{name:"= useColumn(",type:"",default:"",description:""},{name:"dataIndex",type:"string",default:"-",description:"To determine which column setting you are getting."},{name:")",type:"",default:"",description:""}],ie=function(){return o.a.createElement(i.l,{title:"Table",context:"It is the table wrapper."},o.a.createElement(i.q.ForAPI,{data:ee}))},se=function(){return o.a.createElement(i.l,{title:"TableContent",context:"It is the table itself."},o.a.createElement(i.q.ForAPI,{data:ne}))},ce=function(){return o.a.createElement(i.l,{title:"Pagination",context:"It is the pagination."},o.a.createElement(i.q.ForAPI,{data:ae}))},de=function(){return o.a.createElement(i.l,{title:"Loader",context:"It is the loader when the table is asynchronous."},o.a.createElement(i.q.ForAPI,{data:[{name:"children",type:"element",default:'<div className="rt-loader"/>',description:"Your customize element loader."}]}))},me=function(){return o.a.createElement(i.l,{title:"usePagination",context:"It is use to create your own component pagination."},o.a.createElement(i.q.ForAPI,{data:te}))},ue=function(){return o.a.createElement(i.l,{title:"useSort",context:"It is use to create your own component sort. it is useful in Table property as Column."},o.a.createElement(i.q.ForAPI,{data:le}))},pe=function(){return o.a.createElement(i.l,{title:"useFilter",context:"It is use to create your own component filteration."},o.a.createElement(i.q.ForAPI,{data:oe}))},be=function(){return o.a.createElement(i.l,{title:"useColumn",context:"It is use to get the column settings in Table property columns."},o.a.createElement(i.q.ForAPI,{data:re}))},fe=(a(17),function(){return o.a.createElement(r.Chaperone,{triggerId:"Reatable",onDone:function(){return console.log("done")},onSkip:function(e){return console.log("skip")}},o.a.createElement(S,null),o.a.createElement(N,null),o.a.createElement(F,null),o.a.createElement(P,null),o.a.createElement(R,null),o.a.createElement(z,null),o.a.createElement(A,null),o.a.createElement(M,null),o.a.createElement(L,null),o.a.createElement(j,null),o.a.createElement(D,null),o.a.createElement(B,null),o.a.createElement(O,null),o.a.createElement(G,null),o.a.createElement(W,null),o.a.createElement(H,null),o.a.createElement($,null),o.a.createElement(J,null),o.a.createElement(K,null),o.a.createElement(q,null),o.a.createElement(Y,null),o.a.createElement(U,null),o.a.createElement(V,null),o.a.createElement(i.a,{title:"API"},o.a.createElement(ie,null),o.a.createElement(se,null),o.a.createElement(ce,null),o.a.createElement(de,null),o.a.createElement(i.a,{as:"h3",title:"Hooks"},o.a.createElement(me,null),o.a.createElement(ue,null),o.a.createElement(pe,null),o.a.createElement(be,null))))}),ge=function(){return o.a.createElement(i.n.ScrollNav,{list:[{label:"Installation"},{label:"Importing"},{label:"Getting Started",sub:[{label:"Mutating Table Cell"},{label:"Column Group"},{label:"Table With Pagination"},{label:"Sortable Table"},{label:"Collapsible Table"},{label:"Collapsible Table Using Button"},{label:"Table Filtration"},{label:"Asynchronous Table"}]},{label:"Customizable Table Interfaces",sub:[{label:"Customize Loader"},{label:"Customizable Pagination Component"},{label:"Create Your Own Pagination"},{label:"Changable Page Size"},{label:"Create Filter By First Letters"},{label:"Create Filter By Search"},{label:"Customize TableContent Row & Cell"},{label:"Customize TableContent Empty Data"},{label:"Customize TableContent Column Header"},{label:"Passing A Row Data On Modal"},{label:"Table Selection"}]},{label:"API",sub:[{label:"Table"},{label:"TableContent"},{label:"Pagination"},{label:"Loader"},{label:"Hooks",sub:[{label:"usePagination"},{label:"useSort"},{label:"useFilter"},{label:"useColumn"}]}]}]})};n.default=function(){var e="Reatable (not publish yet)",n="is a react dynamic table which displays rows of data. It is so\n\tlight with catchy setting and cognitive design structure. reatable is not limited with \n\tit's design and it's features since most of it's aspects are cuztomizable so table's creativity \n\tis endless within its bootstrap.";return o.a.createElement(o.a.Fragment,null,o.a.createElement(i.e,null,o.a.createElement(i.e.Meta,{title:"".concat(e," - React Libraries | Mytabworks"),description:n.slice(0,100),image:"/images/icons/icon-512x512.png"})),o.a.createElement(i.i,{title:e,context:n,main:o.a.createElement(fe,null),side:o.a.createElement(ge,null)}))}}}]);
//# sourceMappingURL=22.810ff2a7.chunk.js.map