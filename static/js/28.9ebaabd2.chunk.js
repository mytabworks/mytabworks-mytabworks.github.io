(this["webpackJsonpbitter-code"]=this["webpackJsonpbitter-code"]||[]).push([[28],{771:function(e,t,n){"use strict";n.r(t);var a=n(0),i=n.n(a),l=n(13),r=n(2),o=n(39),s=function(){return i.a.createElement(l.m,{readonly:!0,title:"Installation",code:"npm i chaperone",language:"js",theme:{plain:{color:"rgb(215,215,215)",backgroundColor:"rgb(86,86,86)"},styles:[]}})},d=function(){return i.a.createElement(l.m,{readonly:!0,title:"Imports",code:'import { Chaperone, ChaperoneStep, Trigger } from "chaperone";'})},p=function(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(l.m,{title:"Getting Started",context:"it is the basic usage of chaperone.",scope:Object(r.a)({},o),code:'import React from "react";\nimport { Chaperone, ChaperoneStep, Trigger } from "chaperone";\n\n#render(\n    <div className="container">  \n        <Chaperone>\n            <Trigger label="Need Help?" />\n            <form className="mt-3">\n                <div className="n-form-field">\n                    <label htmlFor="gs-email">Email address</label>\n                    <ChaperoneStep \n                        index={0} \n                        message="To Login. Firstly, you must type your e-mail here." \n                        placement="top-right">\n                        <input \n                            type="email" \n                            className="n-form-control" \n                            id="gs-email" \n                            aria-describedby="emailHelp" \n                            style={{backgroundColor: "transparent"}} />\n                    </ChaperoneStep>\n                </div>\n                <div className="n-form-field">\n                    <label htmlFor="gs-pass">Password</label>\n                    <ChaperoneStep \n                        index={1} \n                        message="Secondly, you must put your password here." \n                        placement="top-right">\n                        <input \n                            type="password" \n                            className="n-form-control" \n                            id="gs-pass" \n                            style={{backgroundColor: "transparent"}} />\n                    </ChaperoneStep> \n                </div> \n                <div className="n-form-field"> \n                    <label className="n-form-check">\n                        <ChaperoneStep \n                            index={2} \n                            message={<>Thirdly, if you want to remember the app your inputs just click <b>remember me</b>.</>} \n                            placement="left">\n                            <input className="n-form-control" type="checkbox" /> \n                        </ChaperoneStep> \n                        remember me\n                    </label> \n                </div>\n                <ChaperoneStep \n                    isDone \n                    index={3} \n                    message={<>Lastly, you must press <b>Submit</b>.</>}>\n                    <button type="button" className="n-btn">Submit</button>\n                </ChaperoneStep> \n            </form>\n        </Chaperone>\n    </div>\n)'}),i.a.createElement(l.k,{context:i.a.createElement(i.a.Fragment,null,"Don't forget to assign ",i.a.createElement("b",null,"isDone")," at the last step or else it will throw exception."),style:{marginTop:"-20px",marginBottom:"20px"}}))},c=function(){return i.a.createElement(l.m,{title:"ChaperoneStep Singleton",context:i.a.createElement(i.a.Fragment,null,"it is use to make multiple and different id steps in single"," ",i.a.createElement("b",null,"ChaperoneStep"),"."),scope:Object(r.a)({},o),code:'import React from "react";\nimport { Chaperone, ChaperoneStep, Trigger } from "chaperone";\nconst chaperoneData = [\n    {\n        index: 0,\n        message: <b>Hello there!!</b>,\n        find: "img"\n    },\n    {\n        index: 1,\n        message: "I\'am Fernando.",\n        placement: "left",\n        find: "#p-name"\n    },\n    {\n        index: 2,\n        message: <>aka <b>Mytabworks</b></>,\n        placement: "bottom-right",\n        find: (children) => children.querySelector("#p-aka")\n    },\n    {\n        index: 3,\n        message: "It can even find outside the children scope.",\n        placement: "bottom",\n        isDone: true,\n        find: () => document.querySelector("#chaperonestep-singleton > div")\n    }\n]\n#render(\n    <div className="container mb-4">  \n        <Chaperone>\n            <Trigger label="click here to know me." allowTransition />\n            <ChaperoneStep\n                navigation={chaperoneData.length}\n                placement="top-right"\n                propertyMutation={({ index, currentId }, defaultProps) => {\n                    return {\n                        ...defaultProps, \n                        ...chaperoneData.find(props => props.index === index)\n                    }\n                }}>\n                <div className="d-flex flex-center-y mt-4">\n                    <img className="b-round mr-4" src="/images/icons/icon-128x128.png" alt="beard-man"/>\n                    <span id="p-name" className="mr-1">Fernando</span>\n                    <span id="p-aka">(Mytabworks)</span>\n                </div>\n            </ChaperoneStep>\n        </Chaperone>\n    </div>\n)'})},m=function(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(l.m,{title:"Multiple ID and Chaining",context:i.a.createElement(i.a.Fragment,null,"you can create multiple guide in single ",i.a.createElement("b",null,"Chaperone")," and you can chain another ID after done or skip."),scope:Object(r.a)({},o),code:'import React from "react";\nimport { Chaperone, ChaperoneStep, Trigger } from "chaperone";\n\n#render(\n    <div className="container">  \n        <Chaperone onDone={({previousId, trigger}) => {\n            if(previousId === "guide-email") {\n                trigger("guide-password")\n            }\n        }}>\n            <Trigger id="guide-email" label="Email Help?" allowTransition /><br/>\n            <Trigger id="guide-password" label="Password Help?" allowTransition /><br/>\n            <form className="mt-3">\n                <div className="n-form-field">\n                    <ChaperoneStep \n                        navigation={2}\n                        id="guide-email" \n                        index={0} \n                        message="It is the Email address label." \n                        placement="top-right"\n                        allowSkip={false}>\n                        <label htmlFor="mi-email">Email address</label>\n                    </ChaperoneStep>\n                    <ChaperoneStep \n                        isDone\n                        navigation={2}\n                        id="guide-email" \n                        index={1} \n                        message="you must type your valid e-mail here." \n                        placement="right-top"\n                        onDone={({target, children, dialog}) => { \n                            const test = /^\\w+@\\w+\\.[a-z]{2,4}$/.test(children.value)\n                            children.style.borderColor = test ? null : \'red\'\n                            return test\n                        }}>\n                        <input \n                            type="email" \n                            className="n-form-control" \n                            id="mi-email" \n                            aria-describedby="emailHelp" \n                            style={{backgroundColor: "transparent"}} />\n                    </ChaperoneStep>\n                </div>\n                <div className="n-form-field">\n                    <ChaperoneStep \n                        id="guide-password" \n                        index={0} \n                        message="It is the password label." \n                        placement="top-right"\n                        allowSkip={false}>\n                        <label htmlFor="mi-pass">Password</label>\n                    </ChaperoneStep>\n                    <ChaperoneStep \n                        isDone\n                        id="guide-password" \n                        index={1} \n                        message="you must put your password here." \n                        placement="top-right">\n                        <input \n                            type="password" \n                            className="n-form-control" \n                            id="mi-pass" \n                            style={{backgroundColor: "transparent"}} />\n                    </ChaperoneStep> \n                </div>  \n                <div className="n-form-field"> \n                    <label className="n-form-check">\n                        <input className="n-form-control" type="checkbox" /> \n                        remember me\n                    </label> \n                </div>\n                <button type="button" className="n-btn">Submit</button>\n            </form>\n        </Chaperone>\n    </div>\n)'}),i.a.createElement(l.k,{variant:"danger",context:i.a.createElement(i.a.Fragment,null,"you must be extra careful when using ",i.a.createElement("b",null,"onDone")," and ",i.a.createElement("b",null,"onSkip")," ","in ",i.a.createElement("b",null,"Chaperone")," component. especially if the component is having some sort of state. or else it will be called infinitely and will cause error in your app. as much as posible use hook"," ",i.a.createElement("b",null,"useCallback")," without array dependency to prevent some sort of error any further."),style:{marginTop:"-20px",marginBottom:"20px"}}))},u=function(){return i.a.createElement(l.m,{title:"Chaperone With Gestures",context:i.a.createElement(i.a.Fragment,null,"you can create and append gestures."),scope:Object(r.a)({},o),code:'import React from "react";\nimport { Chaperone, ChaperoneStep, Trigger } from "chaperone";\n\n#render(\n    <div className="container">  \n        <Chaperone>\n            <Trigger label="Need Help?" allowTransition /><br/> \n            <form>\n                <div className="row">\n                    <div className="n-form-field column-md-6">\n                        <label htmlFor="inputEmail4">Email</label>\n                        <ChaperoneStep\n                            allowNext={false}\n                            allowBack={false} \n                            propertyMutation={({ currentId, index }, defaultProps) => {\n                                const props = [\n                                    {\n                                        index: 0, \n                                        message: "click the email input box.",\n                                        placement: "top-right",\n                                        allowNextOnClick: true,\n                                        gesture: (\n                                            <div className="custom-click-gesture">\n                                                <i className="mytabworks hand-pointer"/>\n                                            </div>\n                                        )\n                                    },\n                                    {\n                                        index: 1, \n                                        message: "input a valid e-mail address.",\n                                        placement: "right",\n                                        allowNextOnType: true,\n                                        onNext: ({target, children, dialog}) => { \n                                            const test = /^\\w+@\\w+\\.[a-z]{2,4}$/.test(children.value)\n                                            children.style.borderColor = test ? null : \'red\'\n                                            return test\n                                        },\n                                        gesture: (\n                                            <div className="custom-typing-gesture">\n                                                <i className="mytabworks icon-keyboard"/>\n                                            </div>\n                                        )\n                                    },\n                                ]\n                                return { \n                                    ...defaultProps,\n                                    ...props.find((each) => each.index === index)\n                                }\n                            }}>\n                            <input type="email" className="n-form-control" id="inputEmail4" placeholder="Email"/>\n                        </ChaperoneStep>\n                    </div>\n                    <div className="n-form-field column-md-6">\n                        <label htmlFor="inputPassword4">Password</label>\n                        <ChaperoneStep \n                            allowNext={false}\n                            allowBack={false} \n                            propertyMutation={({ currentId, index }, defaultProps) => {\n                                const props = [\n                                    {\n                                        index: 2, \n                                        message: "click the password input box.",\n                                        placement: "top-right", \n                                        allowNextOnClick: true,\n                                        gesture: (\n                                            <div className="custom-click-gesture">\n                                                <i className="mytabworks hand-pointer"/>\n                                            </div>\n                                        )\n                                    },\n                                    {\n                                        index: 3, \n                                        message: "input your password.",\n                                        placement: "right",\n                                        allowNextOnType: true,\n                                        onNext: ({target, children, dialog}) => {  \n                                            const test = target.value.length > 7\n                                            children.style.borderColor = test ? null : \'red\'\n                                            return test\n                                        },\n                                        gesture: (\n                                            <div className="custom-typing-gesture">\n                                                <i className="mytabworks icon-keyboard"/>\n                                            </div>\n                                        )\n                                    },\n                                ]\n                                return { \n                                    ...defaultProps,\n                                    ...props.find((each) => each.index === index)\n                                }\n                            }}>\n                            <input type="password" className="n-form-control" id="inputPassword4" placeholder="Password" />\n                        </ChaperoneStep>\n                    </div>\n                </div>\n                <div className="n-form-field">\n                    <label htmlFor="inputAddress">Address</label>\n                    <input type="text" className="n-form-control" id="inputAddress" placeholder="1234 Main St" />\n                </div>\n                <div className="n-form-field">\n                    <label htmlFor="inputAddress2">Address 2</label>\n                    <input type="text" className="n-form-control" id="inputAddress2" placeholder="Apartment, studio, or floor" />\n                </div>\n                <div className="row">\n                    <div className="n-form-field column-md-6">\n                        <label htmlFor="inputCity">City</label>\n                        <input type="text" className="n-form-control" id="inputCity" />\n                    </div>\n                    <div className="n-form-field column-md-4">\n                        <label htmlFor="inputState">State</label>\n                        <select id="inputState" className="n-form-control">\n                        <option>Choose...</option>\n                        <option>...</option>\n                        </select>\n                    </div>\n                    <div className="n-form-field column-md-2">\n                        <label htmlFor="inputZip">Zip</label>\n                        <input type="text" className="n-form-control" id="inputZip" />\n                    </div>\n                </div>\n                <div className="n-form-field"> \n                    <label className="n-form-check">\n                        <input className="n-form-control" type="checkbox" /> \n                        Check me out\n                    </label> \n                </div>\n                <ChaperoneStep \n                    isDoneOnClick\n                    index={4}\n                    message="submit your input."\n                    gesture={(\n                        <div className="custom-click-gesture">\n                            <i className="mytabworks hand-pointer"/>\n                        </div>\n                    )}>\n                    <button type="button" className="n-btn">Sign in</button>\n                </ChaperoneStep>\n            </form>\n        </Chaperone>\n    </div>\n)'})},h=[{name:"autoTrigger",type:"boolean",default:"false",description:"When true, it will be triggered immidiately without clicking the trigger"},{name:"id",type:"string",default:"-",description:i.a.createElement(i.a.Fragment,null,"It is the ",i.a.createElement("b",null,"ID")," of the ",i.a.createElement("b",null,"autoTrigger"))},{name:"onSkip",type:"function",default:"-",description:i.a.createElement(i.a.Fragment,null,"It will be executed if the children ",i.a.createElement("b",null,"ChaperoneStep")," is skipped. you must be extra careful when using ",i.a.createElement("b",null,"onSkip"),". especially if the component is having some sort of state. or else it will be called infinitely and will cause error in your app. as much as posible use hook"," ",i.a.createElement("b",null,"useCallback")," without array dependency to prevent some sort of error any further."),data:[{name:"function ({",type:"",default:"",description:""},{name:"previousId,",type:"string",default:"-",description:"the previous id that is skipped."},{name:"indexEnded,",type:"number",default:"-",description:"the index which the chaperone skipped."},{name:"trigger,",type:"function",default:"-",description:"it is use to trigger another id after skip.",data:[{name:"function (",type:"",default:"",description:""},{name:"id,",type:"string",default:"-",description:"the id you want to trigger."},{name:"index",type:"number",default:"0",description:"the index it will start."},{name:"}) { return void }",type:"",default:"",description:""}]},{name:"}) { return void }",type:"",default:"",description:""}]},{name:"onDone",type:"function",default:"-",description:i.a.createElement(i.a.Fragment,null,"It will be executed when the children ",i.a.createElement("b",null,"ChaperoneStep")," is done. you must be extra careful when using ",i.a.createElement("b",null,"onDone"),". especially if the component is having some sort of state. or else it will be called infinitely and will cause error in your app. as much as posible use hook ",i.a.createElement("b",null,"useCallback")," without array dependency to prevent some sort of error any further."),data:[{name:"function ({",type:"",default:"",description:""},{name:"previousId,",type:"string",default:"-",description:"the previous id that is done."},{name:"indexEnded,",type:"number",default:"-",description:"the index which the chaperone done."},{name:"trigger,",type:"function",default:"-",description:"it is use to trigger another id after done.",data:[{name:"function (",type:"",default:"",description:""},{name:"id,",type:"string",default:"-",description:"the id you want to trigger."},{name:"index",type:"number",default:"0",description:"the index it will start."},{name:"}) { return void }",type:"",default:"",description:""}]},{name:"}) { return void }",type:"",default:"",description:""}]},{name:"waitSearchIndex",type:"number",default:"50",description:"It is the waiting time when searching indexes"},{name:"children",type:"element",default:"-",description:"A children element to render."}],f=[{name:"function ({",type:"",default:"",description:""},{name:"target,",type:"element",default:"-",description:"It is the element that triggered this function."},{name:"children,",type:"element",default:"-",description:"It is the children of ChaperoneStep."},{name:"dialog",type:"element",default:"-",description:"It is the element of the dialog of ChaperoneStep."},{name:"}) { return boolean }",type:"",default:"",description:""}],g=[{name:"function ({",type:"",default:"",description:""},{name:"target,",type:"element",default:"-",description:"It is the children of ChaperoneStep."},{name:"dialog",type:"element",default:"-",description:"It is the element of the dialog of ChaperoneStep."},{name:"currentId",type:"string",default:"-",description:"It is the id of ChaperoneStep."},{name:"index",type:"number",default:"-",description:"It is the index of the ChaperoneStep."},{name:"}) { return boolean }",type:"",default:"",description:""}],b=[{name:"id",type:"string",default:"-",description:"It is use to identify which set of step will be trigger since you can use multiple set of steps to trigger inside Chaperone."},{name:"index",type:"number",default:"-",description:"It is use to determine on what index should this component will be pop."},{name:"message",type:"string | element",default:"-",description:"It is the message of the popover."},{name:"placement",type:"'top'  \n\t| 'bottom'  \n\t| 'left'  \n\t| 'right'  \n\t| 'top-left'  \n\t| 'top-right'  \n\t| 'bottom-left'  \n\t| 'bottom-right'  \n\t| 'left-top'  \n\t| 'left-bottom'  \n\t| 'right-top'  \n\t| 'right-bottom'",default:"bottom-right",description:"It is the placement of the popover."},{name:"duration",type:"miliseconds|number",default:"200",description:"It the duration of the transitions."},{name:"navigation",type:"number",default:"0",description:"It is use to show the navigation and how many bullets will be render. most commonly the number of your set steps. when 0, it will be hidden"},{name:"children",type:"element",default:"-",description:"It will be highligthened target of the step."},{name:"autoScrollDelay",type:"miliseconds | number",default:"150",description:"It is the delay when chasing the next or previous step viewport after triggered."},{name:"find",type:"string | function",default:"-",description:"It use to select element within or outside the children.",data:[{name:"function (",type:"",default:"",description:""},{name:"firstElementChild",type:"element",default:"-",description:"It is the children of ChaperoneStep."},{name:") { return element }",type:"",default:"",description:""}]},{name:"allowSkip",type:"boolean",default:"true",description:"When false, the skip button will be hidden."},{name:"allowBack",type:"boolean",default:"true",description:"When false, the back step button will be hidden."},{name:"allowNext",type:"boolean",default:"true",description:"When false, the next step button will be hidden."},{name:"allowNextOnClick",type:"boolean",default:"false",description:"When true, the next step is allowed to be triggered by hitting the highlightened element."},{name:"allowNextOnType",type:"boolean",default:"false",description:"When true, the next step is allowed to be triggered by typing the highlightened form input element."},{name:"isDone",type:"boolean",default:"false",description:"When true, the done button will be shown, and it is use to tell chaperone that it is the last step. it is required to put it one your last steps on every set or it will bring some error."},{name:"isDoneOnClick",type:"boolean",default:"false",description:"When true, done is allowed to be triggered by clicking the highlightened element."},{name:"backToIndex",type:"number",default:"-",description:"It is use to jump back a certain index when clicking the back button."},{name:"nextToIndex",type:"number",default:"-",description:"It is use to jump on a certain index when triggering all the next event."},{name:"onNext",type:"function",default:"-",description:i.a.createElement(i.a.Fragment,null,"It will be executed when you triggered all the ",i.a.createElement("b",null,"next")," events. when you ",i.a.createElement("b",null,"return")," ",i.a.createElement("b",null,"false")," it will be prevented to go next."),data:f},{name:"onBack",type:"function",default:"-",description:i.a.createElement(i.a.Fragment,null,"It will be executed when you clicking the ",i.a.createElement("b",null,"back")," ",i.a.createElement("b",null,"button"),". when you ",i.a.createElement("b",null,"return")," ",i.a.createElement("b",null,"false")," it will prevented you to go back."),data:f},{name:"onSkip",type:"function",default:"-",description:i.a.createElement(i.a.Fragment,null,"It will be executed when you clicking the ",i.a.createElement("b",null,"skip")," ",i.a.createElement("b",null,"button"),". when you ",i.a.createElement("b",null,"return")," ",i.a.createElement("b",null,"false")," it will prevented you to skip."),data:f},{name:"onDone",type:"function",default:"-",description:i.a.createElement(i.a.Fragment,null,"It will be executed when you triggered all the ",i.a.createElement("b",null,"done")," events. when you ",i.a.createElement("b",null,"return")," ",i.a.createElement("b",null,"false")," it will prevented you to done."),data:f},{name:"onLoad",type:"function",default:"-",description:i.a.createElement(i.a.Fragment,null,"It will be executed when the entering step."),data:g},{name:"onUnLoad",type:"function",default:"-",description:"It will be executed when leaving step. it is use to cleanup your onLoad messes.",data:g},{name:"gesture",type:"element | function",default:"-",description:"It will allow you to render a gestures.",data:[{name:"function (",type:"",default:"",description:""},{name:"childrenRef",type:"createRef",default:"-",description:"it is the reference of the children."},{name:") { return element }",type:"",default:"",description:""}]},{name:"background",type:"object",default:"{}",description:"It allows you to customize the styles of the backdrop, highlight, and gesture.",data:[{name:"backdropStyle",type:"object",default:"{}",description:"you can style the backdrop."},{name:"highlightStyle",type:"object",default:"{}",description:"you can style the highlight."},{name:"gestureStyle",type:"object",default:"{}",description:"you can style the gesture container."}]},{name:"propertyMutation",type:"function",default:"-",description:"It allows you to make a multiple steps by providing you the currentId and index, and using the defaultProps to get the pre-assigned props.",data:[{name:"function ({",type:"",default:"",description:""},{name:"index,",type:"number",default:"-1",description:"it is the current index called by chaperone."},{name:"currentId",type:"string",default:"-",description:"it is the current ID called by chaperone especially when multiple."},{name:"},",type:"",default:"",description:""},{name:"defaultProps",type:"object",default:"-",description:"It is the ChaperoneStep props both assigned and the dafault."},{name:") { return object }",type:"",default:"",description:""}]},{name:"neumorphism",type:"boolean",default:"false",description:"When true, it change the style of the popover."},{name:"hideEvidence",type:"boolean",default:"true",description:"When false, it will not re-render when find matches on every events and will not hide the wrapper <div/> to the children.",sample:""}],y=[{name:"as",type:"elementType",default:"<a>",description:"You can use a custom element type for this component."},{name:"label",type:"string|element",default:"-",description:"It is the label of the trigger."},{name:"id",type:"string",default:"-",description:"It is use to determine which set will be open."},{name:"index",type:"number",default:"0",description:"It is use to determine which index of the set will be open."},{name:"allowTransition",type:"boolean",default:"false",description:"When true, it allows you to transition effect the highlight."}],w=function(){return i.a.createElement(l.l,{title:"Chaperone",context:"It is the chaperone."},i.a.createElement(l.q.ForAPI,{data:h}))},x=function(){return i.a.createElement(l.l,{title:"ChaperoneStep",context:"It is the chaperone step."},i.a.createElement(l.q.ForAPI,{data:b}))},v=function(){return i.a.createElement(l.l,{title:"Trigger",context:"It is the trigger to the chaperone."},i.a.createElement(l.q.ForAPI,{data:y}))},C=function(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(s,null),i.a.createElement(d,null),i.a.createElement(p,null),i.a.createElement(c,null),i.a.createElement(m,null),i.a.createElement(u,null),i.a.createElement(l.a,{title:"API"},i.a.createElement(w,null),i.a.createElement(x,null),i.a.createElement(v,null)))},E=function(){return i.a.createElement(l.n.ScrollNav,{list:[{label:"Installation"},{label:"Imports"},{label:"Getting Started",sub:[{label:"ChaperoneStep Singleton"},{label:"Chaperone Multiple ID"},{label:"Chaperone With Gestures"}]},{label:"API",sub:[{label:"Chaperone"},{label:"ChaperoneStep"},{label:"Trigger"}]}]})};t.default=function(){var e="Chaperone (not publish yet)",t="is a react library which helps and guide the user interacts with UI step by step to have a better user experience in your react components. \n\tChaperone gives you alot of option with such ability to make your user experience alot better. it allow such gesture to tell the user what to do next even without reading the dialog.\n\tit is even flexible in any component whether it is forwardRef or not.";return i.a.createElement(i.a.Fragment,null,i.a.createElement(l.e,null,i.a.createElement(l.e.Meta,{title:"".concat(e," - React Libraries | Mytabworks"),description:t.slice(0,100),image:"/images/icons/icon-512x512.png"})),i.a.createElement(l.i,{title:e,context:t,main:i.a.createElement(C,null),side:i.a.createElement(E,null)}))}}}]);
//# sourceMappingURL=28.9ebaabd2.chunk.js.map