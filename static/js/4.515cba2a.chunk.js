(this["webpackJsonpbitter-code"]=this["webpackJsonpbitter-code"]||[]).push([[4],{567:function(e,t,n){var a=n(753),r=a.keys().map(a);e.exports=r.reduce((function(e,t){return Object.keys(t).reduce((function(e,n){return e[n]=t[n],e}),e)}),{})},569:function(e,t,n){"use strict";n.r(t),n.d(t,"IntroNotice",(function(){return i}));var a=n(0),r=n.n(a),l=n(23),i=function(e){var t=e.message,n=void 0===t?1:t;return r.a.createElement("div",{style:{textAlign:"center"}},r.a.createElement(l.a,{persistent:!0,placement:"left-top",offset:[45],message:2===n?r.a.createElement(r.a.Fragment,null,"Yow, if you haven't check the help in ",r.a.createElement("b",null,"Getting Started")," yet. You will lost in this one."):r.a.createElement(r.a.Fragment,null,"Hi, if you haven't check the guide in ",r.a.createElement("b",null,"Advance Design Pattern")," ","yet. You will lost in this one."),style:{zIndex:1e6}},r.a.createElement("img",{src:"/images/icons/icon-72x72.png",alt:"beard guy",width:"60px",height:"60px",style:{display:"inline-block"}})))}},572:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=n(4),i=n(7),s=n(2),o=n(6),u=n(16),c=n(12),m={alpha:{regexp:/^[A-Za-z]+$/,exe:function(e){var t=e.received;return t.length&&!this.regexp.test(t)}},numeric:{regexp:/^\d+$/,exe:function(e){var t=e.received;return t.length&&!this.regexp.test(t)}},email:{regexp:/^[\w.]{2,40}@[\w]{2,20}\.[a-z]{2,3}(?:\.[a-z]{2})?$/,exe:function(e){var t=e.received;return t.length&&!this.regexp.test(t)}},max:{exe:function(e){var t=e.received,n=e.parameter,a=parseInt(n);return!Array.isArray(t)&&/^\d+$/.test(t)?t&&parseInt(t)>a:t.length&&t.length>a}},min:{exe:function(e){var t=e.received,n=e.parameter,a=parseInt(n);return!Array.isArray(t)&&/^\d+$/.test(t)?t&&parseInt(t)<a:t.length&&t.length<a}},required:{exe:function(e){return!e.received.length}},mimes:{exe:function(e){var t=e.received,n=e.parameter;return!Array.from(t).every((function(e){var t=e.name.split(".");return n.includes(t[t.length-1].toLowerCase())}))}},alpha_space:{regexp:/^[A-Za-z\s]+$/,exe:function(e){var t=e.received;return t.length&&!this.regexp.test(t)}},alpha_slug:{regexp:/^[a-zA-Z\d_]+$/,exe:function(e){var t=e.received;return t.length&&!this.regexp.test(t)}},alpha_dash:{regexp:/^[a-zA-Z\d-]+$/,exe:function(e){var t=e.received;return t.length&&!this.regexp.test(t)}},alpha_num:{regexp:/^[a-zA-Z\d]+$/,exe:function(e){var t=e.received;return t.length&&!this.regexp.test(t)}},url:{regexp:/^(?:https?:\/\/)?([a-z]{3}\.)?([a-z]{3,20}\.)?[\w]{3,20}\.[a-z]{2,3}(?:\/.*)?$/,exe:function(e){var t=e.received;return t.length&&!this.regexp.test(t)}},max_size:{exe:function(e){var t=e.received,n=e.parameter,a=parseInt(n);return t.length&&Array.from(t).some((function(e){return e.size/1e3>a}))}},min_size:{exe:function(e){var t=e.received,n=e.parameter,a=parseInt(n);return t.length&&Array.from(t).some((function(e){return e.size/1e3<a}))}},required_if:{exe:function(e){var t=e.received,n=e.parameter,a=e.parameter_value,r=e.data[n];return Array.isArray(r)?!t.length&&r.some((function(e){return new RegExp("^".concat(a.trim(),"$")).test(e)})):!t.length&&new RegExp("^".concat(a.trim(),"$")).test(r)}},same:{exe:function(e){var t=e.received,n=e.parameter,a=e.data;return t.length&&a[n]!==t}}},d={alpha:"The :attribute may only contain letters.",numeric:"The :attribute may only contain numbers.",email:"The :attribute must be a valid email.",max:{numeric:"The :attribute may not be greater than :max.",file:"The :attribute may not be greater than :max files.",string:"The :attribute may not be greater than :max characters.",array:"The :attribute may not be greater than :max items."},min:{numeric:"The :attribute must be atleast :min.",file:"The :attribute must be atleast :min files.",string:"The :attribute must be atleast :min characters.",array:"The :attribute must be atleast :min items."},required:"The :attribute field is required.",mimes:"The :attribute only allow :mimes.",alpha_space:"The :attribute must contain letters with spaces.",alpha_slug:"The :attribute may only contain letters, numbers, and underscores.",alpha_dash:"The :attribute may only contain letters, numbers, and dashes.",alpha_num:"The :attribute may only contain letters and numbers.",url:"The :attribute must be a valid url.",max_size:"The :attribute may not be greater :max_size kilobytes.",min_size:"The :attribute must be atleast :min_size kilobytes.",required_if:"The :attribute field is required when :required_if is :value.",same:"The :attribute and :same must match."},f=function(e){return!!e&&"[object Object]"!==e&&"[object Object]"===e.toString()},p=function(e){return"function"===typeof e},h=function(){function e(){Object(u.a)(this,e),this.messages=[]}return Object(c.a)(e,[{key:"make",value:function(e,t){return this.data=e,this.rules=t,this}},{key:"fails",value:function(){var t=this,n=!1;return this.messages=Object.keys(this.rules).map((function(a){var r=t.rules[a],l=r.rules,i=r.label,s=e.validate(t.data[a],l,i||a,t.data);return s.isInvalid&&!n&&(n=!0),[a,s.message]})).filter((function(e){return!!Object(l.a)(e,2)[1]})),n}},{key:"errors",value:function(){return new Map(this.messages)}}],[{key:"rulesExtend",value:function(e){if(!f(e))throw new Error("Invalid rule extention");Object.keys(e).forEach((function(t){var n=e[t],a=n.message,r=Object(o.a)(n,["message"]);if(!p(r.exe))throw new Error("Invalid rule extention method `exe` is missing in rule `".concat(t,"`"));Object.assign(d,Object(i.a)({},t,a)),Object.assign(m,Object(i.a)({},t,r))}))}},{key:"rulesUpdateMessage",value:function(e,t){if(!m[e])throw new Error('"'.concat(e,'" is not part of Validator rules'));d[e]=f(t)&&["min","max"].includes(e)?Object(s.a)({},d[e],{},t):t}},{key:"validate",value:function(e,t,n,a){var r,i,s,o=t.split("|").some((function(t){var o=t.split(/:|=/),u=Object(l.a)(o,3),c=u[0],d=u[1],f=u[2];if(r=c,i=d,s=f,!m[c])throw new TypeError("Validator does not recognize rule `".concat(c,"` in `").concat(n,"`"));return m[c].exe({received:e,data:a,parameter:d&&d.split("@")[0],parameter_value:f&&f.split("@")[0]})}));if(o||m[r].allowMessageEvenValid){var u,c=d[r]||m[r].message||"The :attribute is ".concat(r);if("[object Object]"===c.toString()&&(c=!Array.isArray(e)&&/^\d+$/.test(e)?c.numeric:"string"===typeof e?c.string:Array.isArray(e)?c.array:c.file),u=c.replace(":attribute",n),i){if(i.includes("@")){var f=i.split("@"),p=Object(l.a)(f,2)[1];i=p}u=u.replace(":".concat(r),(i||"").replace(/,/g,", "))}if(s){if(s.includes("@")){var h=s.split("@"),g=Object(l.a)(h,2)[1];s=g}u=u.replace(":value",s)}return{isInvalid:o,message:u,failedIn:o?r:null}}return{isInvalid:o,failedIn:null}}}]),e}(),g=function(){function e(t,n,a){Object(u.a)(this,e),this.formstatuses={},this.formstatuses=n,this.target=t,this.reset=a}return Object(c.a)(e,[{key:"locateFailed",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:40,n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],a=document.documentElement,r=a.scrollTop,l=Object.keys(this.formstatuses).reduce((function(t,n){if(!e.formstatuses[n].isInvalid)return t;var r=e.target.querySelector('[name="'.concat(n,'"], [data-alias="').concat(n,'"]'));return Math.min(a.scrollTop+(r&&r.getBoundingClientRect().top||0),t)}),r);return l===r?r:n?a.scrollTop=l-t:l-t}},{key:"isReady",value:function(){var e=this.formstatuses;return Object.keys(e).every((function(t){return!e[t].isInvalid}))}},{key:"forEach",value:function(e){var t=this.formstatuses;Object.keys(t).forEach((function(n){return e(t[n].value,t[n].aliasOf||n)}))}},{key:"json",value:function(){var e={};return this.forEach((function(t,n){var a=n.endsWith("[]");(n=n.replace("[]",""))in e?Array.isArray(e[n])?e[n].push(t):e[n]=[e[n],t]:e[n]=a&&!Array.isArray(t)?[t]:t})),e}},{key:"paramArray",value:function(){var e=[];return this.forEach((function(t,n){return e.push({name:n,value:t})})),e}},{key:"param",value:function(){return this.paramArray().reduce((function(e,t){return e+(Array.isArray(t.value)?t.value.reduce((function(e,n){return e+"&".concat(t.name,"=").concat(n)}),""):"&".concat(t.name,"=").concat(t.value))}),"").substr(1)}},{key:"formData",value:function(){return new FormData(this.target)}}]),e}(),b=Object(a.createContext)(null),y=function(){return Object(a.useContext)(b)},v=function(e,t,n){var a=t.name,r=t.value,l=t.form,o=t.files,u=t.selectedOptions,c=t.type;if(["checkbox","radio"].includes(c)&&(r=Array.from(l.querySelectorAll('[name="'.concat(a,'"]'))).filter((function(e){return e.checked})).map((function(e){return e.value})),"radio"===c&&(r=r[0])),n&&(a=n),o&&(r=o),u&&t.multiple&&(r=Array.from(u)),!e[a])return e;var m=Object(s.a)({},e[a],{isValidated:!0,value:r}),d=m.label,f=m.rules;return f&&Object.assign(m,h.validate(r,f,d||t.name,Object.keys(e).reduce((function(t,n){return t[n]=e[n].value,t}),{}))),Object(s.a)({},e,Object(i.a)({},a,m))},E=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object(s.a)({value:"",isInvalid:!1,isValidated:!1,message:null,aliasOf:null},e)},w=function(e){return Object.keys(e).reduce((function(t,n){return t[n]=Object(s.a)({},e[n]),t}),{})},x=function(e){return Object.keys(e).reduce((function(t,n){return t[n]=Object(s.a)({},e[n],{isInvalid:!1,isValidated:!1,message:null,value:""}),t}),{})},k=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object(a.useState)(Object.keys(e).reduce((function(t,n){return t[n]=Object(s.a)({value:""},e[n],{isInvalid:!1,isValidated:!1,message:null,aliasOf:null}),t}),{})),n=Object(l.a)(t,2),r=n[0],o=n[1],u=function(e){return"string"===typeof e?E(r[e]):w(r)},c=function(e,t){var n=e.target;o((function(e){return v(e,n,t)}))},m=function(e){var t=e.name,n=e.label,r=e.rules,l=e.value,u=void 0===l?"":l,c=e.alias,m=void 0===c?null:c;Object(a.useEffect)((function(){return o((function(e){return Object(s.a)({},e,Object(i.a)({},m||t,{label:n,rules:r,isInvalid:!1,isValidated:!1,message:null,value:u,aliasOf:m&&t}))})),function(){o((function(e){return delete e[m||t],Object(s.a)({},e)}))}}),[t,n,r,u,m])},d=function(e){return function(t){var n="submit"===t.type;n&&t.preventDefault();var a=t.target,l=Object.keys(r).reduce((function(e,t){return a?v(e,{name:t,value:e[t].value}):e}),w(r));o(l);var i=new g(a,w(l),(function(){o(x(l)),n&&a.reset()}));i.type=t.type,i.originalEvent=t,"function"===typeof e&&e(i)}};return{formState:u,formUpdate:c,formSubmit:d,formRegistry:m}},F=function(e){var t=e.value,n=e.children;return r.a.createElement(b.Provider,{value:t},n)};F.defaultProps={};var T=F,j=function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:700,a=arguments.length>2?arguments[2]:void 0,r=function(r){var l=r.type,i=r.keyCode,s=r.target,o=r.which,u="blur"===l||"TEXTAREA"!==s.nodeName&&(13===i||13===o),c="keyup"===l&&8!==i,m={type:l,target:s,keyCode:i};if("function"===typeof a&&"blur"!==l&&a(r),u)return t&&(clearTimeout(t),t=void 0),e(m);c||(t&&clearTimeout(t),t=setTimeout((function(){e(m),t=void 0}),n))};return{onBlur:r,onKeyUp:r,onKeyPress:r}};n.d(t,"FormSupplier",(function(){return T})),n.d(t,"useForm",(function(){return k})),n.d(t,"useFormSupplier",(function(){return y})),n.d(t,"DoneTypingEvent",(function(){return j})),n.d(t,"Validator",(function(){return h}))},640:function(e,t,n){var a=n(751),r=a.keys().map(a);e.exports=r.reduce((function(e,t){return Object.keys(t).reduce((function(e,n){return e[n]=t[n],e}),e)}),{})},641:function(e,t,n){var a=n(756),r=a.keys().map(a);e.exports=r.reduce((function(e,t){return Object.keys(t).reduce((function(e,n){return e[n]=t[n],e}),e)}),{})},750:function(e,t,n){},751:function(e,t,n){var a={"./AdvanceDesignPattern.js":752,"./AliasedRegistry.js":759,"./AliasedRuleParameters.js":760,"./ControllableFields.js":761,"./CustomizeMessages.js":762,"./CustomizeRules.js":763,"./FormUpdateWithDoneTypingEvent.js":764,"./GettingStarted.js":765,"./IntroNotice.js":569,"./SubmittingForm.js":766,"./UpdatingRulesMessages.js":767,"./index.js":640};function r(e){var t=l(e);return n(t)}function l(e){if(!n.o(a,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return a[e]}r.keys=function(){return Object.keys(a)},r.resolve=l,e.exports=r,r.id=751},752:function(e,t,n){"use strict";n.r(t),n.d(t,"AdvanceDesignPattern",(function(){return u}));var a=n(2),r=n(0),l=n.n(r),i=n(13),s=n(3),o=n(567),u=[{message:l.a.createElement(l.a.Fragment,null,"For advance design pattern. We included from the ",l.a.createElement("b",null,"formydable")," ",l.a.createElement("b",null,"import"),", the ",l.a.createElement("b",null,"useFormSupplier")," and ",l.a.createElement("b",null,"FormSupplier"),"..."),find:function(e){return Object(s.findByText)(e,"span:useFormSupplier")[0]}},{message:l.a.createElement(l.a.Fragment,null,"Then we create a container component that handles the form submission..."),find:function(e){return Object(s.findByText)(e,"span:FormWrapper")[0]}},{message:l.a.createElement(l.a.Fragment,null,"This component must contain a property of ",l.a.createElement("b",null,"children")," to render the form fields inside form and ",l.a.createElement("b",null,"onSubmit")," to passed it on"," ",l.a.createElement("b",null,"formSubmit")," to handle the submission..."),find:function(e){return Object(s.findByText)(e,"span:children")[0]}},{message:l.a.createElement(l.a.Fragment,null,"As you observe the ",l.a.createElement("b",null,"useForm"),". We didn't register a schema. But We return the last and 4th function. the ",l.a.createElement("b",null,"formRegistry"),"..."),find:function(e){return Object(s.findByText)(e,"span:useForm")[2]}},{message:l.a.createElement(l.a.Fragment,null,"Because ",l.a.createElement("b",null,"formRegistry")," will handle all the registry this time. but how? there are no form fields inside..."),find:function(e){return Object(s.findByText)(e,"span:formRegistry")[0]}},{message:l.a.createElement(l.a.Fragment,null,"Here is how... We will going to use the ",l.a.createElement("b",null,"FormSupplier")," to supply the 3 form fields important functions. Firstly, the ",l.a.createElement("b",null,"formState")," to get fields state. Secondly, The ",l.a.createElement("b",null,"formUpdate")," to handle changes. And lastly, The ",l.a.createElement("b",null,"formRegistry")," to register the fields into the schema..."),find:function(e){return Object(s.findByText)(e,"span:FormSupplier")[2]}},{message:l.a.createElement(l.a.Fragment,null,"And we will set those functions in value property of ",l.a.createElement("b",null,"FormSupplier"),". so that later on, the children fields can get those functions using the ",l.a.createElement("b",null,"useFormSupplier"),"..."),find:function(e){return Object(s.findByText)(e,"span:value")[0]}},{message:l.a.createElement(l.a.Fragment,null,"And don't forget to set ",l.a.createElement("b",null,"onSubmit")," handler on the ",l.a.createElement("b",null,"form"),". And that's it for our container component..."),find:function(e){return Object(s.findByText)(e,"span:formSubmitHandler")[1]}},{message:l.a.createElement(l.a.Fragment,null,"And now, We will create a form field component that is related to our container component..."),find:function(e){return Object(s.findByText)(e,"span:InputWithRules ")[0]}},{message:l.a.createElement(l.a.Fragment,null,"This component is just a typical input field with a property of"," ",l.a.createElement("b",null,"type"),", ",l.a.createElement("b",null,"id"),", ",l.a.createElement("b",null,"name"),", ",l.a.createElement("b",null,"value"),", and"," ",l.a.createElement("b",null,"placeholder"),". But since this component is reusable we will add"," ",l.a.createElement("b",null,"label")," to set a label for both form registry and physical, And especially don't forget the main attraction of this library, the"," ",l.a.createElement("b",null,"rules"),"..."),find:function(e){return Object(s.findByText)(e,"span:rules")[0]}},{message:l.a.createElement(l.a.Fragment,null,"Now we will get the functions supplied by ",l.a.createElement("b",null,"FormSupplier"),". by using"," ",l.a.createElement("b",null,"useFormSupplier")),find:function(e){return Object(s.findByText)(e,"span:useFormSupplier")[1]}},{message:l.a.createElement(l.a.Fragment,null,"Since we already know the ",l.a.createElement("b",null,"formState")," and ",l.a.createElement("b",null,"formUpdate")," from the earlier demos. what I want to emphasize is the ",l.a.createElement("b",null,"formRegistry"),", because it is new to us..."),find:function(e){return Object(s.findByText)(e,"span:formRegistry")[2]}},{message:l.a.createElement(l.a.Fragment,null,"Using ",l.a.createElement("b",null,"formRegistry")," you must passed an object that containing"," ",l.a.createElement("b",null,"name"),", ",l.a.createElement("b",null,"label"),", ",l.a.createElement("b",null,"value"),", and ",l.a.createElement("b",null,"rules"),". ",l.a.createElement("b",null,"name")," which is the same with the input's attribute name. it is use to identify it's state when using"," ",l.a.createElement("b",null,"formUpdate"),". ",l.a.createElement("b",null,"label")," which will be use for labeling error messages. ",l.a.createElement("b",null,"value")," which is use in controllable field to put default value in schema. And lastly the ",l.a.createElement("b",null,"rules"),"... you know what rules is for..."),find:function(e){return Object(s.findByText)(e,"span:rules")[1]}},{message:l.a.createElement(l.a.Fragment,null,"Then we will single fetch the field state by passing the ",l.a.createElement("b",null,"name")," as identifier on ",l.a.createElement("b",null,"formState"),". so it will know which is which..."),find:function(e){return Object(s.findByText)(e,"span:formState")[3]}},{message:l.a.createElement(l.a.Fragment,null,"In ",l.a.createElement(i.a,{to:"/neumorphism",label:"Neumorphism"})," class ",l.a.createElement("b",null,"n-form-field"),". You can set another class"," ",l.a.createElement("b",null,"n-form-invalid")," to show the red border that signifies invalid. And class ",l.a.createElement("b",null,"n-form-valid")," which shows green border that is signifies valid..."),find:function(e){return Object(s.findByText)(e,"span:validity")[0]}},{message:l.a.createElement(l.a.Fragment,null,"In the statement we use field state property ",l.a.createElement("b",null,"isInvalid")," to determine if it is invalid. Then, We will set a string ",l.a.createElement("b",null,"n-form-invalid"),"..."),find:function(e){return Object(s.findByText)(e,"span:isInvalid")[0]}},{message:l.a.createElement(l.a.Fragment,null,"Or else using field state property ",l.a.createElement("b",null,"isValidated")," to determine if the form field is already touched by the user or validated. Then, We will set a string ",l.a.createElement("b",null,"n-form-valid"),". Otherwise it will set a empty string..."),find:function(e){return Object(s.findByText)(e,"span:isValidated")[0]}},{message:l.a.createElement(l.a.Fragment,null,"Then we set the component properties in form field perspective places..."),find:function(e){return Object(s.findByText)(e,"span:n-form-field")[0]}},{message:l.a.createElement(l.a.Fragment,null,"And before I finish in our form field component(",l.a.createElement("b",null,"InputWithRules"),"), I want you to know why I ignore the ",l.a.createElement("b",null,'type "file"')," from the circulation of controllable fields. it is because ",l.a.createElement("b",null,'type "file"')," ","default value is not assignable..."),find:function(e){return Object(s.findByText)(e,'span:"file"')[0]}},{message:l.a.createElement(l.a.Fragment,null,"Finally, We will going to use our newly created components."," ",l.a.createElement("b",null,"FormWrapper")," and ",l.a.createElement("b",null,"InputWithRules"),"..."),find:function(e){return Object(s.findByText)(e,"span:FormWrapper")[1]}},Object(a.a)({message:l.a.createElement(l.a.Fragment,null,"Then, We will going to assign our submit handler in container(",l.a.createElement("b",null,"FormWrapper"),") ",l.a.createElement("b",null,"onSubmit"),"..."),find:function(e){return Object(s.findByText)(e,"span:onSubmit")[3]}},Object(o.HookShotChaperone)({target:function(e){return Object(s.findByText)(e,"span:onSubmit")[3]},from:function(e){return Object(s.findByText)(e,"span:MockSubmit")[1]},to:function(e){return Object(s.findByText)(e,"span:MockSubmit")[0]}})),{message:l.a.createElement(l.a.Fragment,null,"And then, We put our form field component(",l.a.createElement("b",null,"InputWithRules"),") inside container(",l.a.createElement("b",null,"FormWrapper"),")..."),find:function(e){return Object(s.findByText)(e,"span:InputWithRules")[1]}},{message:l.a.createElement(l.a.Fragment,null,"Well done!! Let's try out the result!"),find:"input",isDoneOnClick:!0,gesture:l.a.createElement(o.ClickGesture,null),background:{backdropStyle:{opacity:1},highlightStyle:{backgroundColor:"rgba(255,255,255, 1)"}}}]},753:function(e,t,n){var a={"./ClickGesture.js":754,"./HookShotChaperone.js":755,"./index.js":567};function r(e){var t=l(e);return n(t)}function l(e){if(!n.o(a,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return a[e]}r.keys=function(){return Object.keys(a)},r.resolve=l,e.exports=r,r.id=753},754:function(e,t,n){"use strict";n.r(t),n.d(t,"ClickGesture",(function(){return l}));var a=n(0),r=n.n(a),l=function(){return r.a.createElement("div",{className:"custom-click-gesture"},r.a.createElement("i",{className:"mytabworks hand-pointer"}))}},755:function(e,t,n){"use strict";n.r(t),n.d(t,"HookShotChaperone",(function(){return i}));var a=n(0),r=n.n(a),l=n(641),i=function(e){var t=e.target,n=e.from,a=e.to,i=e.key,s=void 0===i?0:i;return{gesture:function(e){return r.a.createElement(l.Arrow,{key:s,target:e,find:t,from:n,to:a})},background:{backdropStyle:{opacity:.3},highlightStyle:{backgroundColor:"rgba(255,255,255, 0.2)"},gestureStyle:{zIndex:"999998"}}}}},756:function(e,t,n){var a={"./Arrow.js":757,"./index.js":641};function r(e){var t=l(e);return n(t)}function l(e){if(!n.o(a,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return a[e]}r.keys=function(){return Object.keys(a)},r.resolve=l,e.exports=r,r.id=756},757:function(e,t,n){"use strict";n.r(t),n.d(t,"Arrow",(function(){return o}));var a=n(0),r=n.n(a),l=n(3),i=n(758),s=n.n(i),o=function(e){var t=e.target,n=e.find,i=e.from,o=e.to,u=r.a.createRef(),c=r.a.createRef();return Object(a.useEffect)((function(){var e=u.current,a=t.current,r=c.current;if(e&&a&&r){var s=n&&("function"===typeof n?n(a):a.querySelector(n))||a,m=i&&i(a),d=o&&o(a),f=s.getBoundingClientRect(),p=m.getBoundingClientRect(),h=d.getBoundingClientRect(),g=p.top>h.top,b={y:p.top-(p.height>20?-10:p.height/2)-f.top,x:p.left+(p.width>200?0:p.width/2)-f.left-f.width/2},y={y:h.top-h.height/2-f.top,x:h.left+h.width/2-f.left-f.width/2},v=Math.abs(Object(l.pythagorasTheorem)(b,y))+(g?h.height:0);Object(l.css)(e,{top:"".concat(b.y,"px"),left:"".concat(b.x,"px"),transition:"transform 1s ease-out",transform:"rotate(180deg)"}),Object(l.css)(r,{width:"".concat(v,"px")});var E=setTimeout((function(){Object(l.css)(e,{transition:"transform 200ms ease-in, width 300ms cubic-bezier(0.82, 0.07, 0.61, 1.93) 100ms",transform:"rotate(".concat(Object(l.angle)(b,y),"deg)"),width:"".concat(v,"px")})}),1e3);return function(){return clearTimeout(E)}}}),[t,i,o,u,n,c]),r.a.createElement("div",{ref:u,className:s.a.arrowGesture},r.a.createElement("i",{className:"mytabworks icon-ship ".concat(s.a.ship)}),r.a.createElement("div",{ref:c,className:s.a.arrowPath}),r.a.createElement("i",{className:"mytabworks icon-anchor ".concat(s.a.anchor)}))}},758:function(e,t,n){e.exports={arrowGesture:"Gestures_arrowGesture__31Kuy",arrowPath:"Gestures_arrowPath__3MMc5",anchor:"Gestures_anchor__1q-58",ship:"Gestures_ship__8pQ_-"}},759:function(e,t,n){"use strict";n.r(t),n.d(t,"AliasedRegistry",(function(){return u}));var a=n(2),r=n(0),l=n.n(r),i=n(3),s=n(569),o=n(567),u=[{message:l.a.createElement(s.IntroNotice,null),find:"a[data-chaperone-trigger]"},{message:l.a.createElement(l.a.Fragment,null,"It is inevitable that some form fields are multiple with the same name on it. The problem is we wanted to add those new or other fields into form state registry. for that reason ",l.a.createElement("b",null,"formydable")," use"," ",l.a.createElement("b",null,"alias registry")," and make a counter measure about those stuffs."),find:function(e){return Object(i.findByText)(e,"span:InputMultiple")[0]}},{message:l.a.createElement(l.a.Fragment,null,"To implement multiple input text field. You have to make a component that handle the adding and removing of field..."),find:function(e){return Object(i.findByText)(e,"span:fields")[0]}},{message:l.a.createElement(l.a.Fragment,null,"Firstly, We have to register our component ",l.a.createElement("b",null,"props")," to make a default first text field in our collection of fields..."),find:function(e){return Object(i.findByText)(e,"span:props")[1]}},{message:l.a.createElement(l.a.Fragment,null,"All the fields that are going to be add, are sharing with the same properties except the ",l.a.createElement("b",null,"alias"),"..."),find:function(e){return Object(i.findByText)(e,"span:alias")[0]}},{message:l.a.createElement(l.a.Fragment,null,"Since all our fields sharing the same name or properties. The alias will be the key to keep the distinction of each field in the schema...."),find:function(e){return Object(i.findByText)(e,"span:unique")[0]}},{message:l.a.createElement(l.a.Fragment,null,"To render all collection of field that all have been registered in the"," ",l.a.createElement("b",null,"fields"),". We have to use ",l.a.createElement("b",null,"map"),"..."),find:function(e){return Object(i.findByText)(e,"span:map")[0]}},{message:l.a.createElement(l.a.Fragment,null,"Now, We will go to our button label. If index is equal to ",l.a.createElement("b",null,"0"),". It will be a adding button..."),find:function(e){return Object(i.findByText)(e,"span:btnLabel")[0]}},{message:l.a.createElement(l.a.Fragment,null,"When we are adding a field data from collection. We just spread the"," ",l.a.createElement("b",null,"props")," and assign a alias to make it unique as identifier..."),find:function(e){return Object(i.findByText)(e,"span:props")[4]}},{message:l.a.createElement(l.a.Fragment,null,"When we are removing field data from collection. We will use"," ",l.a.createElement("b",null,"alias")," to identify which field will be remove..."),find:function(e){return Object(i.findByText)(e,"span:field")[4]}},{message:l.a.createElement(l.a.Fragment,null,"Now, lets take a look on our map render..."),find:function(e){return Object(i.findByText)(e,"span:return")[2]}},{message:l.a.createElement(l.a.Fragment,null,"Since we are inside ",l.a.createElement("b",null,"map")," we have to put ",l.a.createElement("b",null,"key")," property on each wrapper. We are going to use ",l.a.createElement("b",null,"alias")," since it is our identifier..."),find:function(e){return Object(i.findByText)(e,"span:key")[0]}},Object(a.a)({message:l.a.createElement(l.a.Fragment,null,"Now, we are going to our field component(InputWithAliasRules) which handle the registration and changes of each field to the schema. We will get into that shortly..."),find:function(e){return Object(i.findByText)(e,"span:InputWithAliasRules")[0]}},Object(o.HookShotChaperone)({target:function(e){return Object(i.findByText)(e,"span:InputWithAliasRules")[0]},from:function(e){return Object(i.findByText)(e,"span:InputWithAliasRules")[1]},to:function(e){return Object(i.findByText)(e,"span:InputWithAliasRules")[0]}})),{message:l.a.createElement(l.a.Fragment,null,"Then, We will spread-assign all property of each field..."),find:function(e){return Object(i.findByText)(e,"span:field")[6]}},{message:l.a.createElement(l.a.Fragment,null,"Now, When we go to our field component(InputWithAliasRules). We have the access to all properties..."),find:function(e){return Object(i.findByText)(e,"span:type")[0]}},{message:l.a.createElement(l.a.Fragment,null,"Then, We get the ",l.a.createElement("b",null,"FormSupplier")," value by using"," ",l.a.createElement("b",null,"useFormSupplier"),"..."),find:function(e){return Object(i.findByText)(e,"span:useFormSupplier")[1]}},{message:l.a.createElement(l.a.Fragment,null,"Now, to register with alias. All we just have to do is to put"," ",l.a.createElement("b",null,"alias")," in the registry..."),find:function(e){return Object(i.findByText)(e,"span:formRegistry")[1]}},{message:l.a.createElement(l.a.Fragment,null,"Now, I will show you how we update our schema with alias registry..."),find:function(e){return Object(i.findByText)(e,"span:formUpdate")[1]}},Object(a.a)({message:l.a.createElement(l.a.Fragment,null,"Before, we just directly put ",l.a.createElement("b",null,"formUpdate")," on every onChange. because ",l.a.createElement("b",null,"formUpdate")," depends solely on the input attribute"," ",l.a.createElement("b",null,"name")," to know which field state to update. But now, we have to access the second parameter, to directly tell ",l.a.createElement("b",null,"formUpdate")," ","which field state will be updated, and will not depend on the input attribute ",l.a.createElement("b",null,"name"),". since we register the alias which will be the key to access it's state..."),find:function(e){return Object(i.findByText)(e,"span:handleFieldChange")[0]}},Object(o.HookShotChaperone)({target:function(e){return Object(i.findByText)(e,"span:handleFieldChange")[0]},from:function(e){return Object(i.findByText)(e,"span:handleFieldChange")[1]},to:function(e){return Object(i.findByText)(e,"span:handleFieldChange")[0]}})),{message:l.a.createElement(l.a.Fragment,null,"Finally, We will use our component inside our container (",l.a.createElement("b",null,"FormWrapper"),"). The one we created in ",l.a.createElement("b",null,"Advance Design Pattern")," ","section..."),find:function(e){return Object(i.findByText)(e,"span:InputMultiple")[1]}},{message:l.a.createElement(l.a.Fragment,null,"And That's all! Let's try out the result!"),find:"input",isDoneOnClick:!0,gesture:l.a.createElement(o.ClickGesture,null),background:{backdropStyle:{opacity:1},highlightStyle:{backgroundColor:"rgba(255,255,255, 1)"}}}]},760:function(e,t,n){"use strict";n.r(t),n.d(t,"AliasedRuleParameters",(function(){return o}));var a=n(0),r=n.n(a),l=n(3),i=n(569),s=n(567),o=[{message:r.a.createElement(i.IntroNotice,null),find:"a[data-chaperone-trigger]"},{message:r.a.createElement(r.a.Fragment,null,"As you can see, We use only ",r.a.createElement("b",null,"FormWrapper")," and ",r.a.createElement("b",null,"InputWithRules")," ","from ",r.a.createElement("b",null,"Advance Design Pattern")," section..."),find:function(e){return Object(l.findByText)(e,"span:FormWrapper")[0]}},{message:r.a.createElement(r.a.Fragment,null,"In this example we use the ",r.a.createElement("b",null,"required_if")," rule as an example because it has 2 parameters. The normal usage of rule with parameter is like the rule below. The first parameter is the ",r.a.createElement("b",null,"gender")," which is the"," ",r.a.createElement("b",null,"name")," of target form field, And the second parameter is the ",r.a.createElement("b",null,"1")," ","which is the requirement value of the target. if ever the requirement has met and the field ",r.a.createElement("b",null,"gender")," has a value of ",r.a.createElement("b",null,"1"),", Then it will be required..."),find:function(e){return Object(l.findByText)(e,"span:required_if")[0]}},{message:r.a.createElement(r.a.Fragment,null,"but remember when using ",r.a.createElement("b",null,"required_if")," and ",r.a.createElement("b",null,"same")," rules. the target field must be also registered to the schema even without rules related in it, to be able to check it's value..."),find:function(e){return Object(l.findByText)(e,"span:formRegistry")[0]}},{message:r.a.createElement(r.a.Fragment,null,"But if we do that. The parameter we put on rule will be put on the feedback..."),find:function(e){return e.querySelector("button")},allowNext:!1,allowNextOnClick:!0,gesture:r.a.createElement(s.ClickGesture,null),background:{backdropStyle:{opacity:1},highlightStyle:{backgroundColor:"rgba(255,255,255, 1)"}}},{message:r.a.createElement(r.a.Fragment,null,"As you read the message. the parameter we put on ",r.a.createElement("b",null,"required_if")," is been put on the feedback which is vague for the users..."),find:function(e){return e.querySelector(".n-invalid-feedback")}},{message:r.a.createElement(r.a.Fragment,null,"That is why we need an alias which in the user's view will understand. As you can see the rule below that we use symbol ",r.a.createElement("b",null,"@")," to make an alias, so that the ",r.a.createElement("b",null,"gender")," will be replace to ",r.a.createElement("b",null,"Gender")," ","and ",r.a.createElement("b",null,"1")," will be replace into ",r.a.createElement("b",null,"Male")," so that the user will understand the feedback..."),find:function(e){return Object(l.findByText)(e,"span:rules")[5]}},{message:r.a.createElement(r.a.Fragment,null,"As a result the user will now understand!"),isDone:!0,find:function(e){return e.querySelectorAll(".n-invalid-feedback")[1]}}]},761:function(e,t,n){"use strict";n.r(t),n.d(t,"ControllableFields",(function(){return u}));var a=n(2),r=n(0),l=n.n(r),i=n(3),s=n(567),o=n(569),u=[{message:l.a.createElement(o.IntroNotice,{message:2}),find:"a[data-chaperone-trigger]"},{message:l.a.createElement(l.a.Fragment,null,"To implement controllable form fields, you must put the field state property"," ",l.a.createElement("b",null,"value")," in the form field attribute ",l.a.createElement("b",null,"value"),"..."),find:function(e){return Object(i.findByText)(e,"span:email")[4]}},{message:l.a.createElement(l.a.Fragment,null,"But firstly, I wanna stressed on how you can set a default value in the circulation of the controllable fields..."),find:function(e){return Object(i.findByText)(e,"span:usernameDefault")[0]}},Object(a.a)({message:l.a.createElement(l.a.Fragment,null,"You can set a ",l.a.createElement("b",null,"value")," in the schema to set a default value. but remember once you ",l.a.createElement("b",null,"submit")," a form and ",l.a.createElement("b",null,"reset")," it. it will neglect the schema after, because that is how ",l.a.createElement("b",null,"react")," ",l.a.createElement("b",null,"useState")," ","works. but if you want to update constantly the schema or the default value like when you update some data, you can ",l.a.createElement("b",null,"unmount")," the component(which you put the"," ",l.a.createElement("b",null,"useForm"),") after submit then ",l.a.createElement("b",null,"mount")," it again when you are about to update data..."),find:function(e){return Object(i.findByText)(e,"span:value")[0]}},Object(s.HookShotChaperone)({target:function(e){return Object(i.findByText)(e,"span:value")[0]},from:function(e){return Object(i.findByText)(e,"span:usernameDefault")[1]},to:function(e){return Object(i.findByText)(e,"span:usernameDefault")[0]}})),{message:l.a.createElement(l.a.Fragment,null,l.a.createElement("div",{style:{textAlign:"center",padding:"20px 5px"}},l.a.createElement("img",{src:"/images/icons/icon-72x72.png",alt:"beard guy",width:"60px",height:"60px",style:{display:"inline-block",margin:"0 auto"}})),l.a.createElement("div",null,"That was quick! Let's try out the result!")),find:"input",isDoneOnClick:!0,gesture:l.a.createElement(s.ClickGesture,null),background:{backdropStyle:{opacity:1},highlightStyle:{backgroundColor:"rgba(255,255,255, 1)"}}}]},762:function(e,t,n){"use strict";n.r(t),n.d(t,"CustomizeMessages",(function(){return o}));var a=n(0),r=n.n(a),l=n(3),i=n(569),s=n(567),o=[{message:r.a.createElement(i.IntroNotice,{message:2}),find:"a[data-chaperone-trigger]"},{message:r.a.createElement(r.a.Fragment,null,"Firstly, I wanna show you how to use ",r.a.createElement("b",null,"formSate")," in single fetchingly..."),find:function(e){return Object(l.findByText)(e,"span:formState")[1]}},{message:r.a.createElement(r.a.Fragment,null,"And Secondly, before we go back to the topic. I wanna show you how to use field state property ",r.a.createElement("b",null,"isValidated"),". it will be fixed"," ",r.a.createElement("b",null,"true")," if ever the user touched the form field, and it will be"," ",r.a.createElement("b",null,"false")," again once the form is ",r.a.createElement("b",null,"reseted"),"..."),find:function(e){return Object(l.findByText)(e,"span:isValidated")[0]}},{message:r.a.createElement(r.a.Fragment,null,"Let'z back to the topic. as you can observe on first and second demo. Each rules has it's own ",r.a.createElement("b",null,"message model pattern")," which is provided when the specific rule has failed and it will be found in field state"," ","property ",r.a.createElement("b",null,"message"),"..."),find:function(e){return Object(l.findByText)(e,"span:required")[0]}},{message:r.a.createElement(r.a.Fragment,null,"If ever you want to make your own messages on some specific rules, you can always use field state property ",r.a.createElement("b",null,"failedIn")," that will bring you which rule has been failing. so you can make a simple statement to work around it. like below..."),onNext:function(){localStorage.getItem("f-cmes")||localStorage.setItem("f-cmes",1)},find:function(e){return Object(l.findByText)(e,"span:failedIn")[0]}},{message:r.a.createElement(r.a.Fragment,null,"That was quick! Let's try out the result!"),find:".code-result textarea",isDoneOnClick:!0,gesture:r.a.createElement(s.ClickGesture,null),background:{backdropStyle:{opacity:1},highlightStyle:{backgroundColor:"rgba(255,255,255, 1)"}}}]},763:function(e,t,n){"use strict";n.r(t),n.d(t,"CustomizeRules",(function(){return u}));var a=n(0),r=n.n(a),l=n(3),i=n(23),s=n(569),o=n(567),u={"customize-rules-basic":[{message:r.a.createElement(s.IntroNotice,null),find:"a[data-chaperone-trigger]"},{message:r.a.createElement(r.a.Fragment,null,"Firstly, We have to import ",r.a.createElement("b",null,"Validator")," from ",r.a.createElement("b",null,"formydable"),"..."),find:function(e){return Object(l.findByText)(e,"span:Validator")[0]}},{message:r.a.createElement(r.a.Fragment,null,"After we import our ",r.a.createElement("b",null,"Validator"),", We will make our first normal"," ",r.a.createElement("b",null,"rule"),". We will name it ",r.a.createElement("b",null,"strong_password"),"..."),find:function(e){return Object(l.findByText)(e,"span:strong_password")[0]}},{message:r.a.createElement(r.a.Fragment,null,"And, Our rule must contain object that has a method of ",r.a.createElement("b",null,"exe"),"..."),find:function(e){return Object(l.findByText)(e,"span:exe")[0]}},{message:r.a.createElement(r.a.Fragment,null,"And a property of ",r.a.createElement("b",null,"message"),"..."),find:function(e){return Object(l.findByText)(e,"span:message")[0]}},{message:r.a.createElement(r.a.Fragment,null,"The method of ",r.a.createElement("b",null,"exe")," have a object parameter that contain 4 properties: received, data, parameter, and parameter_value. but it depends on the rule you are making. But for now we focus on"," ",r.a.createElement("b",null,"received"),"..."),find:function(e){return Object(l.findByText)(e,"span:exe")[0]}},{message:r.a.createElement(r.a.Fragment,null,r.a.createElement("b",null,"received")," is the ",r.a.createElement("b",null,"value")," of the field which we recieved..."),find:function(e){return Object(l.findByText)(e,"span:received")[0]}},{message:r.a.createElement(r.a.Fragment,null,"Then we make some pattern of expression to test if the ",r.a.createElement("b",null,"received")," ","has matched the pattern..."),find:function(e){return Object(l.findByText)(e,"span:test")[0]}},{message:r.a.createElement(r.a.Fragment,null,"Then, We ",r.a.createElement("b",null,"return")," the result of the ",r.a.createElement("b",null,"testing"),". The"," ",r.a.createElement("b",null,"mechanics")," of ",r.a.createElement("b",null,"exe")," is that, If the ",r.a.createElement("b",null,"testing")," was"," ",r.a.createElement("b",null,"invalid"),", Then we must ",r.a.createElement("b",null,"return")," ",r.a.createElement("b",null,"true"),". But if the"," ",r.a.createElement("b",null,"testing")," was ",r.a.createElement("b",null,"valid"),", Then we ",r.a.createElement("b",null,"return")," ",r.a.createElement("b",null,"false"),"..."),find:function(e){return Object(l.findByText)(e,"span:return")[0]}},{message:r.a.createElement(r.a.Fragment,null,"As you can observe on the ",r.a.createElement("b",null,"condition"),". We put"," ",r.a.createElement("b",null,"received.length")," which indicates that, this only have a chance to return ",r.a.createElement("b",null,"true"),", If the ",r.a.createElement("b",null,"recieved")," starting to have any value at all. So that we cannot interfer in the work of the rule"," ",r.a.createElement("b",null,"required"),"..."),find:function(e){return Object(l.findByText)(e,"span:length")[0]}},{message:r.a.createElement(r.a.Fragment,null,"We put !(not) sign on the ",r.a.createElement("b",null,"test"),". Because of our pattern. if the"," ",r.a.createElement("b",null,"received")," matched the ",r.a.createElement("b",null,"regular expression")," then it will bring us ",r.a.createElement("b",null,"true"),". Except our mechanics in ",r.a.createElement("b",null,"exe")," was that, we only return ",r.a.createElement("b",null,"true")," if the ",r.a.createElement("b",null,"recieved")," is ",r.a.createElement("b",null,"invalid"),". But it is still depends on your testing as long you follow the mechanics we are all good..."),find:function(e){return Object(l.findByText)(e,"span:test")[2]}},{message:r.a.createElement(r.a.Fragment,null,"Then, We will go on our property ",r.a.createElement("b",null,"message"),". property"," ",r.a.createElement("b",null,"message")," is a feedback message template for the user. also property ",r.a.createElement("b",null,"message")," has"," ",r.a.createElement("b",null,"3"," ",r.a.createElement(i.a,{variant:"dark",offset:[0,10],message:r.a.createElement(r.a.Fragment,null,r.a.createElement("b",null,"interpolation")," is the insertion of something of a different nature into something else."),style:{zIndex:1e6}},r.a.createElement("span",{style:{color:"#007bff"}},"interpolations"))),". but for the time being, we only focus on the ",r.a.createElement("b",null,":attribute"),". The"," ",r.a.createElement("b",null,":attribute")," will be the place where the ",r.a.createElement("b",null,"label"),"(we registered on the schema) will be put on..."),find:function(e){return Object(l.findByText)(e,"span:message")[0]}},{message:r.a.createElement(r.a.Fragment,null,"Then, If we are all set we will put our rule(",r.a.createElement("b",null,"strong_password"),") in the ",r.a.createElement("b",null,"Validator")," method ",r.a.createElement("b",null,"rulesExtend"),"..."),find:function(e){return Object(l.findByText)(e,"span:rulesExtend")[0]}},{message:r.a.createElement(r.a.Fragment,null,"Now, Lets use our newly created rule..."),find:function(e){return Object(l.findByText)(e,"span:strong_password")[2]}},{message:r.a.createElement(r.a.Fragment,null,"Then, Lets try it out..."),find:'[name="pass-strong"]',gesture:r.a.createElement(o.ClickGesture,null),background:{backdropStyle:{opacity:1},highlightStyle:{backgroundColor:"rgba(255,255,255, 1)"}},allowNext:!1,allowNextOnClick:!0,navigation:!1},{message:r.a.createElement(r.a.Fragment,null,"Let's type and see if it is working..."),find:'[name="pass-strong"]',allowNext:!1,allowNextOnType:!0,navigation:!1},{message:r.a.createElement(r.a.Fragment,null,"At least we should make valide the rule ",r.a.createElement("b",null,"strong_password"),"..."),find:'[name="pass-strong"]',onNext:function(e){var t=e.target.value;return/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).+$/g.test(t)},placement:"left",allowNext:!1,allowNextOnType:!0,navigation:!1},{message:r.a.createElement(r.a.Fragment,null,"Well done! You can try the intermidiate of customizing rule..."),find:function(e){return Object(l.findByText)(e,"a:intermidiate")[0]},isDone:!0}]}},764:function(e,t,n){"use strict";n.r(t),n.d(t,"FormUpdateWithDoneTypingEvent",(function(){return u}));var a=n(2),r=n(0),l=n.n(r),i=n(3),s=n(569),o=n(567),u=[{message:l.a.createElement(s.IntroNotice,null),find:"a[data-chaperone-trigger]"},{message:l.a.createElement(l.a.Fragment,null,"Firstly, We have to import ",l.a.createElement("b",null,"DoneTypingEvent")," from ",l.a.createElement("b",null,"formydable"),"..."),find:function(e){return Object(i.findByText)(e,"span:DoneTypingEvent")[0]}},{message:l.a.createElement(l.a.Fragment,null,"The concept is still the same with ",l.a.createElement("b",null,"InputWithRules")," in"," ",l.a.createElement("b",null,"Advance Design Pattern")," section..."),find:function(e){return Object(i.findByText)(e,"span:InputDoneTypingWithRules")[0]}},{message:l.a.createElement(l.a.Fragment,null,"Except using ",l.a.createElement("b",null,"DoneTypingEvent")," on handling change..."),find:function(e){return Object(i.findByText)(e,"span:DoneTypingEvent")[1]}},{message:l.a.createElement(l.a.Fragment,null,"This is how we use it we passed a callback function in the first parameter of ",l.a.createElement("b",null,"DoneTypingEvent"),". that will be triggered after the user stop typing..."),find:function(e){return Object(i.findByText)(e,"span:event")[0]}},{message:l.a.createElement(l.a.Fragment,null,"And, in the second parameter we passed a miliseconds which will be the time lag..."),find:function(e){return Object(i.findByText)(e,"span:300")[0]}},{message:l.a.createElement(l.a.Fragment,null,"Then, We set-up the ",l.a.createElement("b",null,"formUpdate")," inside the callback..."),find:function(e){return Object(i.findByText)(e,"span:formUpdate")[1]}},Object(a.a)({message:l.a.createElement(l.a.Fragment,null,"After that, We spread it in the form field..."),find:function(e){return Object(i.findByText)(e,"span:handleDoneTyping")[1]}},Object(o.HookShotChaperone)({target:function(e){return Object(i.findByText)(e,"span:handleDoneTyping")[1]},from:function(e){return Object(i.findByText)(e,"span:handleDoneTyping")[1]},to:function(e){return Object(i.findByText)(e,"span:handleDoneTyping")[0]}})),{message:l.a.createElement(l.a.Fragment,null,"Finally, We will use our component inside our container (",l.a.createElement("b",null,"FormWrapper"),"). The one we created in ",l.a.createElement("b",null,"Advance Design Pattern")," ","section..."),find:function(e){return Object(i.findByText)(e,"span:InputDoneTypingWithRules")[1]}},{message:l.a.createElement(l.a.Fragment,null,"And That's all! Let's try out the result!"),find:"input",isDoneOnClick:!0,gesture:l.a.createElement(o.ClickGesture,null),background:{backdropStyle:{opacity:1},highlightStyle:{backgroundColor:"rgba(255,255,255, 1)"}}}]},765:function(e,t,n){"use strict";n.r(t),n.d(t,"GettingStarted",(function(){return s}));var a=n(0),r=n.n(a),l=n(3),i=n(567),s=[{message:r.a.createElement(r.a.Fragment,null,"Firstly, we have to import ",r.a.createElement("b",null,"useForm")," from ",r.a.createElement("b",null,"formydable"),"..."),find:function(e){return Object(l.findByText)(e,"span:useForm")[0]}},{message:"Secondly, we will create a schema for the default registration of the fields rule...",find:function(e){return Object(l.findByText)(e,"span:registerSchema")[0]}},{placement:"right",message:"Then, to register the field on the schema. you must put the attribute `name` of the field as the key here. so formydable know which is which...",find:function(e){return Object(l.findByText)(e,"span:fname")[0]}},{message:r.a.createElement(r.a.Fragment,null,"And it's ",r.a.createElement("b",null,"assignment/value")," must be an ",r.a.createElement("b",null,"object")," that contains a ",r.a.createElement("b",null,"label")," which will be use in error messages..."),find:function(e){return Object(l.findByText)(e,"span:label")[0]}},{message:r.a.createElement(r.a.Fragment,null,"And especially, It must contain the main use of this library the"," ",r.a.createElement("b",null,"rules"),"..."),find:function(e){return Object(l.findByText)(e,"span:rules")[0]},onNext:function(){return localStorage.getItem("f-rules")||localStorage.setItem("f-rules","1"),!0}},{message:r.a.createElement(r.a.Fragment,null,"When the registry is all set. we can now register the schema in"," ",r.a.createElement("b",null,"useForm")," hooks..."),find:function(e){return Object(l.findByText)(e,"span:registerSchema")[1]}},{message:r.a.createElement(r.a.Fragment,null,"And then, the ",r.a.createElement("b",null,"useForm")," will return ",r.a.createElement("b",null,"formState"),","," ",r.a.createElement("b",null,"formUpdate"),", ",r.a.createElement("b",null,"formSubmit"),", and ",r.a.createElement("b",null,"formRegistry"),". but for now we only use ",r.a.createElement("b",null,"formState")," and ",r.a.createElement("b",null,"formUpdate"),"..."),find:function(e){return Object(l.findByText)(e,"span:formState")[0]}},{message:r.a.createElement(r.a.Fragment,null,"The ",r.a.createElement("b",null,"formState")," is use to fetch the updated field state in the schema. you can also fetch singularity by passing the name of the field.",r.a.createElement("br",null),r.a.createElement("b",null,'e.g. const fname = formState("fname")')),find:function(e){return Object(l.findByText)(e,"span:formState")[1]}},{message:"Then, it will return the fields state...",find:function(e){return Object(l.findByText)(e,"span:fname")[1]}},{message:r.a.createElement(r.a.Fragment,null,"Each field state contains the following properties: ",r.a.createElement("br",null),r.a.createElement("b",null,"isInvalid"),": it will be ",r.a.createElement("b",null,"true")," if the field inputs doesn't matched the rules requirement",r.a.createElement("br",null),r.a.createElement("b",null,"message"),": it will provide a message of the failed rule.",r.a.createElement("br",null),r.a.createElement("b",null,"failedIn"),": it will provide which rule the user have failed in.",r.a.createElement("br",null),r.a.createElement("b",null,"isValidated"),": it will be ",r.a.createElement("b",null,"true")," if the input field has been validated or touched by the user",r.a.createElement("br",null),r.a.createElement("b",null,"value"),": it will provide the field updated value.",r.a.createElement("br",null)),placement:"bottom-right",find:function(e){return Object(l.findByText)(e,"span:fname")[4]}},{message:"For the effectiveness of giving a proper error message. you must check first if the field is invalid",find:function(e){return Object(l.findByText)(e,"span:isInvalid")[0]}},{message:"Then, If it is truly invalid we will render the message",find:function(e){return Object(l.findByText)(e,"span:message")[0]}},{message:r.a.createElement(r.a.Fragment,null,r.a.createElement("b",null,"Well done!!")," Now, We must try the result!"),find:function(e){return e.querySelector("input")},onDone:function(){localStorage.getItem("f-gstar")||localStorage.setItem("f-gstar","1")},isDoneOnClick:!0,gesture:r.a.createElement(i.ClickGesture,null),background:{backdropStyle:{opacity:1},highlightStyle:{backgroundColor:"rgba(255,255,255, 1)"}}}]},766:function(e,t,n){"use strict";n.r(t),n.d(t,"SubmittingForm",(function(){return u}));var a=n(2),r=n(0),l=n.n(r),i=n(3),s=n(569),o=n(567),u=[{message:l.a.createElement(s.IntroNotice,{message:2}),find:"a[data-chaperone-trigger]"},{message:l.a.createElement(l.a.Fragment,null,"Beforehand, I want to emphasize on how to use arrayed field name..."),find:function(e){return Object(i.findByText)(e,"span:languages")[0]}},{message:l.a.createElement(l.a.Fragment,null,"It is use to determine that the text/checkbox field is ",l.a.createElement("b",null,"multiple")," ","in the submit. although you can use the normal one. but the disadvantage is that the ",l.a.createElement("b",null,"FormEvent")," doesn't recognized it as a ",l.a.createElement("b",null,"multiple")," ","at first. until it is more than 1 which will cause a confusion/problem in the back-end. on the other hand the arrayed name will be automatically recognized by the FormEvent as multiple..."),find:function(e){return Object(i.findByText)(e,"span:languages")[1]}},{message:l.a.createElement(l.a.Fragment,null,"If you ever step a foot on arrayed field name. You can always use this method below to make an alias variable or make a formState single fetch..."),find:function(e){return Object(i.findByText)(e,"span:languages")[2]}},{message:l.a.createElement(l.a.Fragment,null,"And now, We can use ",l.a.createElement("b",null,"formSubmit"),". It is use to handle the submition of the form fields..."),find:function(e){return Object(i.findByText)(e,"span:formSubmit")[0]}},{message:l.a.createElement(l.a.Fragment,null,"This is how we use it. We passed a ",l.a.createElement("b",null,"function")," inside"," ",l.a.createElement("b",null,"formSubmit"),"..."),find:function(e){return Object(i.findByText)(e,"span:formSubmit")[2]}},{message:l.a.createElement(l.a.Fragment,null,"The ",l.a.createElement("b",null,"function")," we passed must have an argument like below. because this argument passed to our ",l.a.createElement("b",null,"function")," is the instance of FormEvent..."),find:function(e){return Object(i.findByText)(e,"span:event")[0]}},{message:l.a.createElement(l.a.Fragment,null,"You can check the FormEvent Methods here for more info..."),find:function(){return document.querySelector('.scroll-nav a[href="#useform"]')}},{message:l.a.createElement(l.a.Fragment,null,l.a.createElement("b",null,"FormEvent")," method ",l.a.createElement("b",null,"isReady")," is use to determine whether the form fields is ready or no invalidations. Inside this section of statement were you put your sever-side request like ajax or something..."),find:function(e){return Object(i.findByText)(e,"span:isReady")[0]}},{message:l.a.createElement(l.a.Fragment,null,"There are many ways of getting the form data from ",l.a.createElement("b",null,"FormEvent"),". it depends on your content-type. Method ",l.a.createElement("b",null,"param")," is use for url encoded content-type..."),find:function(e){return Object(i.findByText)(e,"span:param")[0]}},{message:l.a.createElement(l.a.Fragment,null,"After you make a request, don't forget to use ",l.a.createElement("b",null,"FormEvent")," method"," ",l.a.createElement("b",null,"reset"),". To reset both the form and controllable fields..."),find:function(e){return Object(i.findByText)(e,"span:reset")[0]}},{message:l.a.createElement(l.a.Fragment,null,"On the other side of the statement. You can use ",l.a.createElement("b",null,"FormEvent")," method"," ",l.a.createElement("b",null,"locateFailed")," to locate the failed fields whenever it is out of the view port..."),find:function(e){return Object(i.findByText)(e,"span:locateFailed")[0]}},Object(a.a)({message:l.a.createElement(l.a.Fragment,null,"Finally, We assign it on ",l.a.createElement("b",null,"form onSubmit"),"..."),find:function(e){return Object(i.findByText)(e,"span:formSubmit")[3]}},Object(o.HookShotChaperone)({target:function(e){return Object(i.findByText)(e,"span:formSubmit")[3]},from:function(e){return Object(i.findByText)(e,"span:formSubmit")[3]},to:function(e){return Object(i.findByText)(e,"span:formSubmit")[1]}})),{message:l.a.createElement(l.a.Fragment,null,"That was eazy! Let's try out the result!"),find:"select",isDoneOnClick:!0,gesture:l.a.createElement(o.ClickGesture,null),background:{backdropStyle:{opacity:1},highlightStyle:{backgroundColor:"rgba(255,255,255, 1)"},gestureStyle:{zIndex:null}}}]},767:function(e,t,n){"use strict";n.r(t),n.d(t,"UpdatingRulesMessages",(function(){return o}));var a=n(0),r=n.n(a),l=n(3),i=n(569),s=n(567),o=[{message:r.a.createElement(i.IntroNotice,null),find:"a[data-chaperone-trigger]"},{message:r.a.createElement(r.a.Fragment,null,"Firstly, We have to import ",r.a.createElement("b",null,"Validator")," from ",r.a.createElement("b",null,"formydable"),"..."),find:function(e){return Object(l.findByText)(e,"span:Validator")[0]}},{message:r.a.createElement(r.a.Fragment,null,"Then we use ",r.a.createElement("b",null,"Validator")," method ",r.a.createElement("b",null,"rulesUpdateMessage")," to update the vailable rules messages..."),find:function(e){return Object(l.findByText)(e,"span:rulesUpdateMessage")[0]}},{message:r.a.createElement(r.a.Fragment,null,"In the first parameter of the method. We must passed the"," ",r.a.createElement("b",null,"rule name")," of which we want to update..."),find:function(e){return Object(l.findByText)(e,"span:alpha_dash")[0]}},{message:r.a.createElement(r.a.Fragment,null,"In the second parameter of the method. We must passed the"," ",r.a.createElement("b",null,"new message")," of the rule..."),find:function(e){return Object(l.findByText)(e,"span:Oh")[0]}},{message:r.a.createElement(r.a.Fragment,null,"Now, We use the rules we updated..."),find:function(e){return Object(l.findByText)(e,"span:alpha_dash")[1]}},{message:r.a.createElement(r.a.Fragment,null,"That was quick! Let's try out the result!"),find:"input",isDoneOnClick:!0,gesture:r.a.createElement(s.ClickGesture,null),background:{backdropStyle:{opacity:1},highlightStyle:{backgroundColor:"rgba(255,255,255, 1)"}}}]},774:function(e,t,n){"use strict";n.r(t);var a={};n.r(a),n.d(a,"MockSubmit",(function(){return w})),n.d(a,"FormWrapper",(function(){return x})),n.d(a,"InputWithRules",(function(){return k})),n.d(a,"InputDoneTypingWithRules",(function(){return F})),n.d(a,"Alerto",(function(){return j})),n.d(a,"MockRequest",(function(){return S}));var r=n(0),l=n.n(r),i=n(14),s=n(2),o=n(40),u=n(572),c={basic:'import React from "react";\nimport { Validator } from "formydable"; \n\nconst strong_password = {\n    exe({received}) {  \n        const test = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).+$/g.test(received);\n        return received.length && !test;\n    },\n    message: "The :attribute must have 1 small letter, 1 capital letter, 1 number, and 1 special character" \n};\n\nValidator.rulesExtend({ strong_password });\n\n#render(\n    <FormWrapper onSubmit={MockSubmit}> \n        <InputWithRules \n            type="password" \n            name="pass-strong" \n            label="Strong Password" \n            rules="required|strong_password|min:8" \n        />   \n    </FormWrapper>\n)',intermidiate:'import React from "react";\nimport { Validator } from "formydable"; \n\nconst enumerate = {\n    exe({received, parameter}) {  \n        const test = parameter.split(",").includes(received);\n        return received.length && !test;\n    },\n    message: "The :attribute must only contain :enumerate" \n};  \n\nconst required_if_checkbox = {\n    exe({received, parameter, parameter_value}) {  \n        const checkbox = document.querySelector(`[name="${parameter}"]`)\n        const test = checkbox.checked === Boolean(parameter_value) \n        return test && !received.length;\n    },\n    message: "The :attribute is required when :required_if_checkbox is :value" \n}; \n\nconst same_value = {\n    exe({received, parameter, data}) { \n        return received.length && data[parameter] !== received;\n    },\n    message: "The :attribute must be the same value with :same_value"\n};\n\nValidator.rulesExtend({ enumerate, required_if_checkbox, same_value });\n\n#render(\n    <FormWrapper onSubmit={MockSubmit}>   \n        <label className="n-form-check">\n            <input className="n-form-control" type="checkbox" name="checky" defaultChecked={true}/> \n            checky \n        </label>\n        <InputWithRules \n            name="language" \n            label="Language" \n            rules="required_if_checkbox:checky=true|enumerate:js,c#,c++,python" \n        /> \n        <InputWithRules \n            name="confirm" \n            label="Confirm" \n            rules="required_if_checkbox:checky=true|same_value:language" \n        /> \n    </FormWrapper>\n)',advance:'import React from "react";\nimport { Validator, useFormSupplier } from "formydable"; \n\nconst password_status = {\n    allowMessageEvenValid: true,\n    exe(received, parameter) {  \n        const isMessageType = parameter === "short"\n        let rate = 0\n        const qualifications = [   \n            /[A-Z]/, \n            /[a-z]/, \n            /[0-9]/, \n            /[#?!@$%^&*-]/,\n            /^.{8,}$/\n        ]\n        qualifications.forEach((regex) => {\n            if(regex.test(received)) {\n                rate++\n            }\n        })\n\n        const very_strong = rate === 5;\n        const strong = rate > 3;\n        const weak = rate >= 2;\n        const very_weak = rate === 1;\n        \n        if(very_strong) {\n            this.message = isMessageType ? "very-strong" : "The :attribute is very strong"\n        } else if(strong) {\n            this.message = isMessageType ? "strong" : "The :attribute is strong"\n        } else if(weak) {\n            this.message = isMessageType ? "weak" : "The :attribute is weak"\n        } else if(very_weak) {\n            this.message = isMessageType ? "very-weak" : "The :attribute is very weak"\n        } else {\n            this.message = isMessageType ? "super-weak" : "The :attribute is must be filled"\n        }\n \n        return !strong;\n    }\n};\n\nValidator.rulesExtend({ password_status });\n\nconst PasswordStyle = ({name, label}) => {\n    const { formState, formUpdate, formRegistry } = useFormSupplier(); \n \n    formRegistry({ name, label, rules: "password_status:short" })\n    \n    const state = formState(name);\n    \n    const handleChange = (event) => {\n        formUpdate({ target: event.target });\n    }\n\n    const validity = (\n        state.isInvalid \n        ? "is-invalid" \n        : state.isValidated \n        ? "is-valid"\n        : ""\n    )\n\n    return ( \n        <div className="n-form-field">\n            <style>\n                {`.password-prog {\n                    margin-top: 2px;\n                    width: 0%;\n                    height: 3px;\n                    background-color: crimson;\n                    transition: all 200ms ease-out;\n                }\n                .password-prog.very-strong {\n                    width: 100%;\n                    background-color: rgb(80, 224, 164);\n                }\n                .password-prog.strong {\n                    width: 75%;\n                    background-color: rgb(214, 236, 164);\n                }\n                .password-prog.weak {\n                    width: 50%;\n                    background-color: rgb(235, 176, 68);\n                }\n                .password-prog.very-weak {\n                    width: 25%;\n                    background-color: rgb(241, 142, 162);\n                }`}\n            </style>\n            <label htmlFor={name}>{label}</label>\n            <input \n                id={name}\n                type="password"\n                name={name}\n                placeholder="enter password.." \n                className={`n-form-control ${validity}`} \n                onChange={handleChange}\n            /> \n            <div className={`password-prog ${(state && state.isValidated  && state.message) || ""}`}>  \n            </div>  \n            <small>{(state && state.isValidated && state.message.replace("-", " "))}</small>\n        </div>\n    )\n}\n\n#render(\n    <FormWrapper onSubmit={MockSubmit}>     \n        <InputWithRules \n                type="password" \n                name="pass-status" \n                label="Password Status" \n                rules="password_status" \n            />\n        <PasswordStyle name="pass-styled" label="Password Status Short" />\n    </FormWrapper>\n)'},m=n(4),d=n(6),f=n(21),p=(n(750),n(10)),h=document,g=h.createElement("div");h.body.appendChild(g);var b={},y=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:6,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:36,n="",a=0;a<e;a++)n+=Math.floor(Math.random()*t).toString(t);return n},v=function(e){var t=e.props.placement;if(t){var n="notify-"+t;if(!(n in b)){b[n]=[];var a=h.createElement("div");a.id=n,g.appendChild(a)}var i=e.props,o=i.id,u=i.cancel,c=void 0!==u&&u,m=(i.delay,i.timing,i.placement,i.template),f=Object(d.a)(i,["id","cancel","delay","timing","placement","template"]);o&&b[n].find((function(e){return e.props.id===o}))?b[n]=b[n].map((function(t){return t.props.id===o?Object(r.cloneElement)(e,Object(s.a)({},t.props,{},f,{key:t.key,cancel:c,template:Object(s.a)({},t.props.template,{},m)})):t})):c||b[n][n.includes("top")?"push":"unshift"](Object(r.cloneElement)(e,{key:y(),cancel:!1})),Object.keys(b).forEach((function(e){var t=h.getElementById(e);Object(p.render)(l.a.createElement(l.a.Fragment,null,b[e].map((function(t){var n=t.props,a=n.onExit,l=n.onExiting,i=n.onExited;return Object(r.cloneElement)(t,{key:t.key,allowRef:!0,onExit:function(e){if(a&&a(e),e){var n=e.style;n.zIndex=1032,n.height=e.offsetHeight+"px";var r="300ms ".concat((t.props.timing||1e3)-400,"ms");n.transition="height ".concat(r,", margin-top ").concat(r)}},onExiting:function(e){if(l&&l(e),e){var t=e.style;t.zIndex=1031,t.marginTop=t.height="0"}},onExited:function(n){i&&i(n),b[e]=b[e].filter((function(e){return e.key!==t.key}))}})}))),t)}))}},E=function(e){var t,n=e.template,a=n.title,i=n.message,s=n.variant,o=void 0===s?"default":s,u=n.dismissible,c=void 0===u||u,p=e.children,h=e.animation,g=(e.placement,e.timing),b=e.delay,y=e.cancel,v=Object(d.a)(e,["template","children","animation","placement","timing","delay","cancel"]),E=Object(r.useState)(!0),w=Object(m.a)(E,2),x=w[0],k=w[1],F=Object(r.useState)(null),T=Object(m.a)(F,2),j=T[0],S=T[1],O=l.a.createElement("div",{className:"notify-template-wrapper",onTouchStart:function(e){t=e.touches[0].clientX},onTouchEnd:function(e){t&&t<(e.touches[0]||e.changedTouches[0]).clientX&&k(!1)}},p?p(k):l.a.createElement("div",{className:"notify-template ".concat(o)},!!a&&l.a.createElement("b",null,a),l.a.createElement("div",{className:"message"},i),c&&l.a.createElement("button",{type:"button",onClick:function(){return k(!1)}},"\xd7")));return l.a.useEffect((function(){return y&&k(!1),function(){return j&&clearTimeout(j)}}),[j,y]),l.a.createElement(f.a,Object.assign({},v,{className:h?"":"fade-notify",in:x,timing:g,suffix:h,onEntered:function(e){v.onEntered&&v.onEntered(e),b&&S(setTimeout((function(){k(!1)}),b))},onExited:function(e){v.onExited&&v.onExited(e),clearTimeout(j)}}),O)};E.defaultProps={template:{},placement:"bottom-right",timing:500,delay:5e3};var w=function(e){e.isReady()?(S("/mock/json/request",{method:"POST",headers:{"Content-Type":"application/json"},body:e.json()}).then((function(e){j(e.json(),"success")})),e.reset()):(j("Failed! all field rules must fulfilled","danger"),e.locateFailed())},x=function(e){var t=e.children,n=e.onSubmit,a=Object(u.useForm)(),r=a.formState,i=a.formUpdate,s=a.formRegistry,o=(0,a.formSubmit)(n);return l.a.createElement(u.FormSupplier,{value:{formState:r,formUpdate:i,formRegistry:s}},l.a.createElement("form",{onSubmit:o},t,l.a.createElement("button",{type:"submit",className:"n-btn"},"Submit")))},k=function(e){var t=e.type,n=void 0===t?"text":t,a=e.name,r=e.label,i=e.rules,s=e.value,o=void 0===s?"":s,c=e.placeholder,m=void 0===c?"enter here...":c,d=e.id,f=Object(u.useFormSupplier)(),p=f.formState,h=f.formUpdate;(0,f.formRegistry)({name:a,label:r,rules:i,value:o});var g=p(a),b=g.isInvalid?"n-form-invalid":g.isValidated?"n-form-valid":"";return l.a.createElement("div",{className:"n-form-field ".concat(b)},l.a.createElement("label",{htmlFor:d||a},r,i.includes("required")&&l.a.createElement("span",{className:"label-required"},"*")),l.a.createElement("input",{className:"n-form-control",id:d||a,type:n,name:a,value:"file"!==n?g.value:void 0,placeholder:m,onChange:h}),l.a.createElement("div",{className:"n-invalid-feedback"},g.message),l.a.createElement("div",{className:"n-valid-feedback"},l.a.createElement("span",{role:"img","aria-label":"checked"},"\u2714\ufe0f")," Looks good!"))},F=function(e){var t=e.type,n=void 0===t?"text":t,a=e.name,r=e.label,i=e.rules,s=e.placeholder,o=void 0===s?"enter here...":s,c=Object(u.useFormSupplier)(),m=c.formState,d=c.formUpdate,f=c.formRegistry;i&&f({name:a,label:r,rules:i});var p=m(a),h=Object(u.DoneTypingEvent)((function(e){d({target:e.target})}),300),g=p&&(p.isInvalid?"n-form-invalid":p.isValidated&&"n-form-valid")||"";return l.a.createElement("div",{className:"n-form-field"},l.a.createElement("label",{htmlFor:a},r,i.includes("required")&&l.a.createElement("span",{className:"label-required"},"*")),l.a.createElement("input",Object.assign({id:a,type:n,name:a,placeholder:o,className:"n-form-control ".concat(g)},h)),l.a.createElement("div",{className:"n-invalid-feedback"},p&&p.message),l.a.createElement("div",{className:"n-valid-feedback"},"Looks good!"))},T=function(e){return Object.keys(e).reduce((function(t,n){return t+"  ".concat(n,":").concat("string"===typeof e[n]?e[n]:Array.isArray(e[n])?"[".concat(e[n],"]"):(a=e[n],Object.keys(a).reduce((function(e,t){return e+"     ".concat(t,": File {\n\t  name:").concat(a[t].name,",\n\t  lastModified:").concat(a[t].lastModified,",\n\t  size:").concat(a[t].size,",\n\t  type:").concat(a[t].type,"\n    }\n")})," {\n")+"  }"),"\n");var a}),"{\n")+"}"},j=function(e,t){v(l.a.createElement(E,{template:{message:e,variant:t}}))},S=function(e,t){var n=t.method,a=t.body,r=t.headers;return new Promise((function(t){v(l.a.createElement(E,{id:e,placement:"top-right",delay:1e4},(function(t){return l.a.createElement("div",{className:"n-float-low px-4 py-3 br-5"},l.a.createElement("div",{className:"d-flex flex-center-y"},l.a.createElement("h5",null,"Request Success!"),l.a.createElement("button",{className:"n-btn n-btn-xs ml-auto",type:"button",onClick:function(){return t(!1)}},"\xd7")),l.a.createElement("pre",null,l.a.createElement("code",null,"url: ",e,",","\n","method: ",n,",","\n","headers:",T(r),",","\n","body:"," ","string"===typeof a?a:T(a))))}))),setTimeout((function(){t({json:function(){return"Success! the form is submited"}})}),1e3)}))},O=n(640),I=function(e,t){var n=e.index,a=(e.currentId,O.GettingStarted[n]);return 4===n&&(a.nextToIndex=localStorage.getItem("f-rules")?5:100),100===n&&(a={index:100,placement:"left",message:"You can always check the rules in here.",find:function(){return document.querySelector('.scroll-nav a[href="#rules"]')},nextToIndex:5,backToIndex:4,navigation:null}),Object(s.a)({index:n},t,{navigation:O.GettingStarted.length},a)},N=function(e,t){var n=e.index,a=O.ControllableFields[n];return Object(s.a)({index:n},t,{},a,{navigation:O.ControllableFields.length})},B=function(e,t){var n=e.index,a=O.CustomizeMessages[n];return 4===n&&(a.nextToIndex=localStorage.getItem("f-cmes")?5:100),100===n&&(a={index:100,placement:"left",message:"You can always check the updating rules messages in here.",find:function(){return document.querySelector('.scroll-nav a[href="#updating-rules-messages"]')},nextToIndex:5,backToIndex:4,navigation:null}),Object(s.a)({index:n},t,{navigation:O.CustomizeMessages.length},a)},C=function(e,t){var n=e.index,a=O.SubmittingForm[n];return Object(s.a)({index:n},t,{},a,{navigation:O.SubmittingForm.length})},R=function(e,t){var n=e.index,a=O.AdvanceDesignPattern[n];return Object(s.a)({index:n},t,{},a,{navigation:O.AdvanceDesignPattern.length})},A=function(e,t){var n=e.index,a=O.AliasedRegistry[n];return Object(s.a)({index:n},t,{},a,{navigation:O.AliasedRegistry.length})},W=function(e,t){var n=e.index,a=O.FormUpdateWithDoneTypingEvent[n];return Object(s.a)({index:n},t,{},a,{navigation:O.FormUpdateWithDoneTypingEvent.length})},_=function(e,t){var n=e.index,a=e.currentId,r=O.CustomizeRules[a]||[],l=r[n];return Object(s.a)({index:n},t,{navigation:r.length},l,{id:a in O.CustomizeRules?a:t.id})},q=function(e,t){var n=e.index,a=O.AliasedRuleParameters[n];return Object(s.a)({index:n},t,{},a,{navigation:O.AliasedRuleParameters.length})},M=function(e,t){var n=e.index,a=O.UpdatingRulesMessages[n];return Object(s.a)({index:n},t,{},a,{navigation:O.UpdatingRulesMessages.length})},U=n(3),D={hideEvidence:!1,neumorphism:!1,placement:"top-right",background:{backdropStyle:{opacity:.3},highlightStyle:{backgroundColor:"rgba(255,255,255, 0.2)"}},onLoad:function(e){var t=e.dialog.children[0].textContent;U.SpeechSynthesis.speak({text:t})},onUnLoad:function(){return U.SpeechSynthesis.cancel()}},z=Object(s.a)({},D,{onLoad:function(e){var t=e.dialog,n=0===e.index?"Yow, if you haven't check the help in Getting Started yet. You will loss in this one. click here to go check it out.":t.children[0].textContent;U.SpeechSynthesis.speak({text:n})}}),V=Object(s.a)({},D,{onLoad:function(e){var t=e.dialog,n=0===e.index?"Hi, if you haven't check the guide in\n\t\tAdvance Design Pattern yet. You will loss in this one.\n\t\tclick here to go\n\t\tcheck it out.":t.children[0].textContent;U.SpeechSynthesis.speak({text:n})}}),P=function(){return l.a.createElement(i.m,{readonly:!0,title:"Installation",code:"npm i formydable",language:"js",theme:{plain:{color:"rgb(215,215,215)",backgroundColor:"rgb(86,86,86)"},styles:[]}})},L=function(){return l.a.createElement(i.m,{readonly:!0,title:"Imports",code:'import { useForm, useFormSupplier, FormSupplier, Validator, DoneTypingEvent } from "formydable"'})},G=function(e){var t=e.id,n=void 0===t?"getting-started":t;return l.a.createElement(o.Chaperone,null,l.a.createElement(o.ChaperoneStep,Object.assign({},D,{id:n,propertyMutation:I}),l.a.createElement(i.m,{triggerId:n,title:"Getting Started",context:"This is a react form validator that is delightfully made by mytabowrks\r which is blazingly fast and can be easily use and implement in any field\r components with ease.",code:'import React from "react";\nimport { useForm } from "formydable";\n\nconst FormBasic = () => {\n    const registerSchema = {\n        fname: { label: "First Name", rules: "required|alpha|min:3" },\n        lname: { label: "Last Name", rules: "required|alpha|min:3|max:20" }, \n    };\n\n    const { formState, formUpdate } = useForm(registerSchema);\n\n    const { fname, lname } = formState(); \n    \n    return ( \n        <form> \n            <div className="n-form-field">\n                <label>First Name</label>\n                <input \n                    className="n-form-control"\n                    name="fname" \n                    placeholder="first name..."\n                    onChange={formUpdate}\n                />\n                {fname.isInvalid && <div className="error-feedback">{fname.message}</div>}\n            </div>\n            <div className="n-form-field">\n                <label>Last Name</label>\n                <input \n                    className="n-form-control"\n                    name="lname"\n                    placeholder="last name..."\n                    onChange={formUpdate}\n                /> \n                {lname.isInvalid && <div className="error-feedback">{lname.message}</div>} \n            </div>\n        </form> \n    );\n}\n\n#render(<FormBasic />)',scope:u})),l.a.createElement(i.k,{variant:"info",title:"Tip",context:l.a.createElement(l.a.Fragment,null,"Rules validation order is from left to right. it will validate firstly the one on the left side which is the most priority. commonly"," ",l.a.createElement("b",null,"required")," rule."),style:{marginTop:"-20px",marginBottom:"20px"}}))},$=function(e){var t=e.id,n=void 0===t?"controllable-fields":t;return l.a.createElement(o.Chaperone,null,l.a.createElement(o.ChaperoneStep,Object.assign({},z,{id:n,propertyMutation:N}),l.a.createElement(i.m,{triggerId:n,triggerIndex:localStorage.getItem("f-gstar")?1:0,title:"Controllable Fields",context:"you can make controllable fields without a sweat. just add a single line and you are done.",code:'import React from "react";\nimport { useForm } from "formydable";\n\nconst FormControllable = () => {\n    const usernameDefault = "mytabworks"\n    const registerSchema = {\n        username: { label: "Username", rules: "required|alpha_slug|min:5", value: usernameDefault },\n        email: { label: "E-mail", rules: "required|email" }, \n    };\n\n    const { formState, formUpdate } = useForm(registerSchema);\n\n    const { username, email } = formState(); \n    \n    return ( \n        <form> \n            <div className="n-form-field">\n                <label>Username</label>\n                <input \n                    className="n-form-control"\n                    name="username"\n                    value={username.value}\n                    placeholder="username..."\n                    onChange={formUpdate}\n                />\n                {username.isInvalid && <div className="error-feedback">{username.message}</div>}\n            </div>\n            <div className="n-form-field">\n                <label>E-mail</label>\n                <input \n                    className="n-form-control"\n                    name="email"\n                    value={email.value}\n                    placeholder="e-mail..."\n                    onChange={formUpdate}\n                /> \n                {email.isInvalid && <div className="error-feedback">{email.message}</div>} \n            </div>\n        </form> \n    );\n}\n\n#render(<FormControllable />)',scope:u})))},H=function(e){var t=e.id,n=void 0===t?"customize-messages":t;return l.a.createElement(o.Chaperone,null,l.a.createElement(o.ChaperoneStep,Object.assign({},z,{id:n,propertyMutation:B}),l.a.createElement(i.m,{triggerId:n,triggerIndex:localStorage.getItem("f-gstar")?1:0,title:"Customize Messages",context:'you can make your own static rule messages by using "failedIn" without affecting the rules messages model.',code:'import React from "react";\nimport { useForm } from "formydable";\n\nconst CustomMesssages = () => {\n    const registerSchema = {\n        reaction: { label: "Reactions", rules: "required|alpha_space|min:10|max:20" }\n    };\n\n    const { formState, formUpdate } = useForm(registerSchema);\n\n    const reaction = formState("reaction"); \n    \n    return ( \n        <form>   \n            <div className={`n-form-field${reaction.isInvalid \n                ? " n-form-invalid" \n                : reaction.isValidated \n                    ? " n-form-valid" \n                    : ""}`\n                }>\n                <label>what is on your mind?</label>\n                <textarea \n                    className="n-form-control"\n                    name="reaction"\n                    value={reaction.value}\n                    placeholder="try type anything..."\n                    onChange={formUpdate}\n                />\n                {reaction.isInvalid && <div className="n-invalid-feedback">{\n                    reaction.failedIn === "min" \n                    ? "That is too short" \n                    : reaction.failedIn === "max" \n                    ? "That is too long"\n                    : reaction.message }\n                </div>} \n                <div className="n-valid-feedback"><span role="img">\u2714\ufe0f</span> Looks Good!</div>\n            </div>\n        </form> \n    );\n}\n\n#render(<CustomMesssages />)',scope:u})),l.a.createElement(i.k,{variant:"info",context:l.a.createElement(l.a.Fragment,null,"Remember setting a ",l.a.createElement("b",null,"schema")," only works once and will never change again after, because that is how ",l.a.createElement("b",null,"react")," ",l.a.createElement("b",null,"useState")," works. but if you want to update constantly the schema or the default value like when you are updating information, you can ",l.a.createElement("b",null,"unmount")," the component(which you put the"," ",l.a.createElement("b",null,"useForm"),") after submit then ",l.a.createElement("b",null,"mount")," it again when you are about to update information..."),style:{marginTop:"-20px",marginBottom:"20px"}}))},Y=function(e){var t=e.id,n=void 0===t?"submitting-form":t;return l.a.createElement(o.Chaperone,null,l.a.createElement(o.ChaperoneStep,Object.assign({},z,{id:n,propertyMutation:C}),l.a.createElement(i.m,{triggerId:n,triggerIndex:localStorage.getItem("f-gstar")?1:0,title:"Submitting Form",context:"form only exist to submit that is why it is not complete without submitting it on server side.",code:'import React from "react";\nimport { useForm } from "formydable"; \n\nconst FormWithSubmit = () => {\n    const registerSchema = { \n        gender: { label: "Gender", rules: "required" },\n        biography: { label: "Biography", rules: "required|alpha_space|min:20|max:100" },\n        "languages[]": { label: "Language You Like", rules: "required|min:2|max:3" }\n    };\n    \n    const { formState, formUpdate, formSubmit } = useForm(registerSchema);\n\n    const { gender, biography, "languages[]": languages } = formState(); \n\n    const formSubmitHandler = formSubmit((event) => {\n        if (event.isReady()) {\n            MockRequest("/mock/url-encoded/request", {\n                method: "POST",\n                headers: {\n                    "Content-Type": "application/x-www-form-urlencoded"\n                },\n                body: event.param()\n            }) \n            .then((response) => { \n                Alert(response.json(), "success")\n            })\n\n            event.reset()\n            \n        } else {\n            Alert("Failed! all field rules must fulfilled", "danger")\n            event.locateFailed()\n        }\n    }); \n\n    const messageDisplay = (fieldstate) => fieldstate.isInvalid && <div className="error-feedback">{fieldstate.message}</div>\n    \n    return ( \n        <form onSubmit={formSubmitHandler}>  \n            <div className="n-form-field">\n                <label>Gender</label>\n                <select className="n-form-control" name="gender" onChange={formUpdate}>\n                    <option value="">Choose gender</option>\n                    <option value="1">Male</option>\n                    <option value="2">Female</option>\n                </select>  \n                {messageDisplay(gender)}\n            </div> \n            <div className="n-form-field">\n                <label>Biography</label>\n                <textarea className="n-form-control" name="biography" onChange={formUpdate} />\n                {messageDisplay(biography)} \n            </div>\n            <div className="n-form-field">\n                <label className="n-form-check">\n                    <input className="n-form-control" type="checkbox" name="languages[]" value="js" onClick={formUpdate} />\n                    js\n                </label>\n                <label className="n-form-check">\n                    <input className="n-form-control" type="checkbox" name="languages[]" value="c#" onClick={formUpdate} />\n                    c#\n                </label>\n                <label className="n-form-check">\n                    <input className="n-form-control" type="checkbox" name="languages[]" value="c++" onClick={formUpdate} />\n                    c++\n                </label>\n                <label className="n-form-check">\n                    <input className="n-form-control" type="checkbox" name="languages[]" value="python" onClick={formUpdate} />\n                    python\n                </label>\n            </div>\n            {messageDisplay(languages)}\n            <button type="submit" className="n-btn">Submit</button>\n        </form> \n    );\n}\n\n#render(<FormWithSubmit/>)',scope:Object(s.a)({},u,{MockRequest:S,Alert:j})})),l.a.createElement(i.k,{variant:"info",context:l.a.createElement(l.a.Fragment,null,"Remember setting a ",l.a.createElement("b",null,"schema")," only works once and will never change again after, because that is how ",l.a.createElement("b",null,"react")," ",l.a.createElement("b",null,"useState")," works. but if you want to update constantly the schema or the default value like when you are updating information, you can ",l.a.createElement("b",null,"unmount")," the component(which you put the"," ",l.a.createElement("b",null,"useForm"),") after submit then ",l.a.createElement("b",null,"mount")," it again when you are about to update information..."),style:{marginTop:"-20px"}}),l.a.createElement(i.k,{variant:"warning",context:l.a.createElement(l.a.Fragment,null,"The fields which are not registered from the schema are excluded from"," ",l.a.createElement("b",null,"FormEvent")," method ",l.a.createElement("b",null,"json"),", ",l.a.createElement("b",null,"param")," and"," ",l.a.createElement("b",null,"paramArray"),".")}),l.a.createElement(i.k,{variant:"info",context:l.a.createElement(l.a.Fragment,null,"If you want to involve the unregistered field. You can always use"," ",l.a.createElement("b",null,"FormEvent")," method ",l.a.createElement("b",null,"formData")," that will return FormData instance."),style:{marginBottom:"20px"}}))},Z=function(e){var t=e.id,n=void 0===t?"advance-design-pattern":t;return l.a.createElement(o.Chaperone,null,l.a.createElement(o.ChaperoneStep,Object.assign({},D,{id:n,propertyMutation:R}),l.a.createElement(i.m,{triggerId:n,title:"Advance Design Pattern",context:"We use FormSupplier to provide formState, formUpdate and formRegistry to children components, and we use useFormSupplier to get FormSupplier provided to children components",code:'import React from "react";\nimport { useForm, useFormSupplier, FormSupplier } from "formydable"; \n\nconst FormWrapper = ({children, onSubmit}) => {\n    const { formState, formUpdate, formSubmit, formRegistry } = useForm();\n    \n    const formSubmitHandler = formSubmit(onSubmit);  \n    \n    return ( \n        <FormSupplier value={{ formState, formUpdate, formRegistry }}>\n            <form onSubmit={formSubmitHandler}> \n                {children}\n                <button type="submit" className="n-btn">Submit</button>\n            </form>\n        </FormSupplier> \n    );\n}\n\nconst InputWithRules = ({type = "text", name, label, rules, value = "", placeholder = "enter here...", id}) => { \n\n    const { formState, formUpdate, formRegistry } = useFormSupplier(); \n \n    formRegistry({ name, label, rules, value }) \n    \n    const fieldstate = formState(name); \n    \n    const validity = (\n            fieldstate.isInvalid \n            ? "n-form-invalid" \n            : fieldstate.isValidated \n            ? "n-form-valid"\n            : ""\n        )\n\n    return ( \n        <div className={`n-form-field ${validity}`}>\n            <label htmlFor={id || name}>\n                {label}\n                {rules.includes("required") && (\n                    <span className="label-required">*</span>\n                )}\n            </label>\n            <input \n                className="n-form-control"\n                id={id || name}\n                type={type}\n                name={name}\n                value={type !== "file" ? fieldstate.value : undefined}\n                placeholder={placeholder}\n                onChange={formUpdate} \n            /> \n            <div className="n-invalid-feedback">\n                {fieldstate.isInvalid && fieldstate.message}\n            </div> \n            <div className="n-valid-feedback">\n                <span role="img">\u2714\ufe0f</span> Looks good!\n            </div>  \n        </div>\n    );\n}\n\nconst MockSubmit = (event) => {\n    if (event.isReady()) {  \n        MockRequest("/mock/json/request", {\n            method: "POST",\n            headers: {\n                "Content-Type": "application/json"\n            },\n            body: event.json()\n        }) \n        .then((response) => {\n            Alert(response.json(), "success")\n        }) \n\n        event.reset() \n\n    } else {\n        Alert("Failed! all field rules must fulfilled", "danger")\n        event.locateFailed()\n    }\n}\n\n#render(\n    <FormWrapper onSubmit={MockSubmit}>\n        <InputWithRules name="fname" label="First Name" rules="required|alpha|min:3" />\n        <InputWithRules name="lname" label="Last Name" rules="required" />\n        <InputWithRules name="email" label="E-mail" rules="required|email" />\n        <InputWithRules type="file" name="resume" label="Resume" rules="mimes:pdf,png|min_size:100|max_size:1000" />\n    </FormWrapper>\n)',scope:Object(s.a)({},u,{MockRequest:S,Alert:j})})))},K=function(e){var t=e.id,n=void 0===t?"aliased-registry":t;return l.a.createElement(o.Chaperone,null,l.a.createElement(o.ChaperoneStep,Object.assign({},V,{id:n,propertyMutation:A}),l.a.createElement(i.m,{triggerId:n,title:"Aliased Registry",context:"It is inevitable that some form fields are multiple with the same name on it, the problem is we wanted to add those new or other fields into form state registry. for that reason formydable use alias registry and make a counter measure about those stuffs.",code:'import React from "react";\nimport { useFormSupplier } from "formydable"; \n\nconst InputMultiple = (props) => {\n\n    const [fields, setFields] = React.useState([\n        {...props, alias: `unique-id-${Math.random()}`}\n    ]); \n\n    return (\n        <div className="n-form-field">\n            <label htmlFor={props.name}>{props.label}</label>\n            {fields.map((field, index) => {  \n                const btnLabel = index === 0 ? "add" : "remove"\n                const handleClick = () => {  \n                    setFields((state) => {\n                        return index === 0 \n                        ? [\n                            ...state,\n                            {\n                                ...props,\n                                alias: `unique-id-${Math.random()}`,\n                            }\n                        ] \n                        : state.filter((value) => value.alias !== field.alias)\n                    }) \n                } \n\n                return ( \n                    <InputWithAliasRules key={field.alias} btnLabel={btnLabel} onClick={handleClick} {...field} /> \n                )   \n            })} \n        </div>\n    )\n}\n\nconst InputWithAliasRules = ({  type = "text", name, alias, label, rules, placeholder = "enter here...", btnLabel, onClick}) => { \n    \n    const { formState, formUpdate, formRegistry } = useFormSupplier(); \n \n    formRegistry({ name, label, rules, alias })\n    \n    const fieldstate = formState(alias);\n    \n    const handleFieldChange = (event) => { \n        formUpdate({ target: event.target }, alias);\n    }; \n    \n    const validity = (\n        fieldstate.isInvalid \n        ? "n-form-invalid" \n        : fieldstate.isValidated \n        ? "n-form-valid"\n        : ""\n    )\n\n    return (   \n        <div className={`n-form-field ${validity}`}>\n            <div className="n-input-group"> \n                <input \n                    className="n-form-control"\n                    id={name}\n                    type={type}\n                    name={name}\n                    data-alias={alias}\n                    placeholder={placeholder}\n                    onChange={handleFieldChange} \n                /> \n                <div className="n-input-group-append">\n                    <button\n                        className="n-btn" \n                        type="button"\n                        onClick={onClick}>\n                        {btnLabel}\n                    </button>\n                </div>  \n            </div>\n            <div className="n-invalid-feedback">\n                {fieldstate.isInvalid && fieldstate.message}\n            </div> \n            <div className="n-valid-feedback">\n                <span role="img">\u2714\ufe0f</span> Looks good!\n            </div>\n        </div>   \n    );\n}\n\n#render(\n    <FormWrapper onSubmit={MockSubmit}>\n        <InputMultiple name="favorites" label="Favorites" rules="required|alpha|min:2" />\n    </FormWrapper>\n);',scope:Object(s.a)({},u,{FormWrapper:x,MockSubmit:w})})))},X=function(e){var t=e.id,n=void 0===t?"with-donetypingevent":t;return l.a.createElement(o.Chaperone,null,l.a.createElement(o.ChaperoneStep,Object.assign({},V,{id:n,propertyMutation:W}),l.a.createElement(i.m,{triggerId:n,title:"FormUpdate With DoneTypingEvent",context:"It is use to fire the event after user is done typing, that will save a lot of unessesary execution of state changes while typing.",code:'import React from "react";\nimport { useFormSupplier, DoneTypingEvent } from "formydable"; \n\nconst InputDoneTypingWithRules = ({  type = "text", name, label, rules, placeholder = "enter here...", id}) => { \n\n    const { formState, formUpdate, formRegistry } = useFormSupplier(); \n \n    formRegistry({ name, label, rules }) \n    \n    const fieldstate = formState(name);\n    \n    const handleDoneTyping = DoneTypingEvent((event) => {\n        formUpdate({ target: event.target });\n    }, 300); \n    \n    const validity = (\n        fieldstate.isInvalid \n        ? "n-form-invalid" \n        : fieldstate.isValidated \n        ? "n-form-valid"\n        : ""\n    )\n\n    return ( \n        <div className={`n-form-field ${validity}`}>\n            <label htmlFor={id || name}>\n                {label}\n                {rules.includes(\'required\') && (\n                    <span className=\'label-required\'>*</span>\n                )}\n            </label>\n            <input \n                className="n-form-control"\n                id={id || name}\n                type={type}\n                name={name}\n                placeholder={placeholder}  \n                {...handleDoneTyping}\n            /> \n            <div className="n-invalid-feedback">\n                {fieldstate.isInvalid && fieldstate.message}\n            </div> \n            <div className="n-valid-feedback">\n                Looks good!\n            </div>  \n        </div>\n    );\n}\n\n#render(\n    <FormWrapper onSubmit={MockSubmit}>   \n        <InputDoneTypingWithRules name="done-typing" label="With DoneTypingEvent" rules="required|alpha|min:20|max:25" />\n        <InputWithRules name="normal-change-event" label="Without DoneTypingEvent" rules="required|alpha|min:20|max:25" /> \n    </FormWrapper>\n)',scope:Object(s.a)({},u,{FormWrapper:x,MockSubmit:w,InputWithRules:k})})))},J=function(e){var t=e.id,n=void 0===t?"customize-rules":t;return l.a.createElement(o.Chaperone,null,l.a.createElement(o.ChaperoneStep,Object.assign({},V,{id:n,propertyMutation:_}),l.a.createElement(i.m,{triggerId:n,title:"Customize Rules",context:"you can make your own rules.",code:c,scope:Object(s.a)({},u,{},a)})),l.a.createElement(i.k,{variant:"info",title:"Tip",context:l.a.createElement(l.a.Fragment,null,"Registering customize rules is once and for all."),style:{marginTop:"-20px",marginBottom:"20px"}}))},Q=function(e){var t=e.id,n=void 0===t?"aliased-rule-param":t;return l.a.createElement(o.Chaperone,null,l.a.createElement(o.ChaperoneStep,Object.assign({},V,{id:n,propertyMutation:q}),l.a.createElement(i.m,{triggerId:n,title:"Aliased Rule Parameters",context:"developer`s perspective is different with user`s. that is why you can always use aliases (@) to make user`s apprehend the messages",code:'import React from "react";\nimport { useFormSupplier } from "formydable";\n\nconst RadioGender = () => {\n    const { formState, formUpdate, formRegistry } = useFormSupplier() \n    \n    const fieldstate = formState("gender")\n\n    formRegistry({ name: "gender", label: "Gender", rules: "required", value: "1" })\n\n    return (\n        <div className="n-form-field">\n            <label>Gender</label>\n            <div>\n                <label className="n-form-check-inline">\n                    <input className="n-form-control" type="radio" name="gender" value="1" checked={fieldstate.value === "1"} onChange={formUpdate}/>\n                    male\n                </label>\n                <label className="n-form-check-inline">\n                    <input className="n-form-control" type="radio" name="gender" value="2" checked={fieldstate.value === "2"}  onChange={formUpdate}/>\n                    female\n                </label>\n            </div>\n            {fieldstate.isInvalid && <div className="error-feedback">{fieldstate.message}</div>}\n        </div>\n    );\n} \n\n#render(\n    <FormWrapper onSubmit={MockSubmit}>   \n        <RadioGender />\n        <InputWithRules name="normal-rules" label="Normal rules" rules="required_if:gender=1" />\n        <InputWithRules name="aliased-rules" label="With Alias rules" rules="required_if:gender@Gender=1@male" />\n    </FormWrapper>\n)',scope:Object(s.a)({},u,{},a)})))},ee=function(e){var t=e.id,n=void 0===t?"updating-rules-messages":t;return l.a.createElement(o.Chaperone,null,l.a.createElement(o.ChaperoneStep,Object.assign({},V,{id:n,propertyMutation:M}),l.a.createElement(i.m,{triggerId:n,title:"Updating Rules Messages",context:"if you don`t like the default rules messages you can always do this to change it permanently.",code:'import React from "react";\nimport { Validator } from "formydable";\n\nValidator.rulesUpdateMessage("alpha_dash", "Oh no!! :attribute must be with dashes")\nValidator.rulesUpdateMessage("same", "Oh Ow!! :attribute must be perfectly same with :same")\n\n#render(\n    <FormWrapper onSubmit={MockSubmit}>    \n        <InputWithRules id="dash-id" name="dash-cases" label="Alpha Dashes" rules="required|alpha_dash" />\n        <InputWithRules name="confirm" label="Confirm Match" rules="required|same:dash-id@Alpha Dashes" />\n    </FormWrapper>\n)',scope:Object(s.a)({},u,{},a)})))},te=function(){return l.a.createElement(l.a.Fragment,null)},ne=function(){return l.a.createElement(i.l,{title:"Rules"},l.a.createElement("div",{className:"n-flat of-y-auto br-1r"},l.a.createElement("table",{className:"table-api n-table-bordered n-text-color"},l.a.createElement("thead",null,l.a.createElement("tr",null,l.a.createElement("th",null,"Name"),l.a.createElement("th",{className:"width-200"},"How to use"),l.a.createElement("th",null,"Description"),l.a.createElement("th",{className:"width-200"},"Message"))),l.a.createElement("tbody",null,l.a.createElement("tr",null,l.a.createElement("td",null," required "),l.a.createElement("td",null," required "),l.a.createElement("td",null," it will require the form field to be filled"),l.a.createElement("td",null," The :attribute field is required ")),l.a.createElement("tr",null,l.a.createElement("td",null," email "),l.a.createElement("td",null," email "),l.a.createElement("td",null," it will validate if the field contain a valid e-mail"),l.a.createElement("td",null," The :attribute field must be valid email")),l.a.createElement("tr",null,l.a.createElement("td",null," min "),l.a.createElement("td",null," min:","<number>"," "),l.a.createElement("td",null,"it will validate the minumum character, number, checkbox is checked, select(multiple) is selected, file(multiple) is selected.",l.a.createElement("span",{className:"h-word"},"e.g. min:10")," "),l.a.createElement("td",null,"The :attribute field must be atleast :min (character, items, files)"," ")),l.a.createElement("tr",null,l.a.createElement("td",null," max "),l.a.createElement("td",null," max:","<number>"," "),l.a.createElement("td",null,"it will validate the maximum character, number, checkbox is checked, select(multiple) is selected, file(multiple) is selected.",l.a.createElement("span",{className:"h-word"},"e.g. max:20")),l.a.createElement("td",null,"The :attribute field may not be greater than :max (character, items, files)")),l.a.createElement("tr",null,l.a.createElement("td",null," mimes "),l.a.createElement("td",null," mimes:","<files mimes>"," "),l.a.createElement("td",null,"it will validate the specific mimes of the files which are allowed.",l.a.createElement("span",{className:"h-word"},"e.g. mimes:jpg,pdf,rar")),l.a.createElement("td",null," The :attribute only allows :mimes")),l.a.createElement("tr",null,l.a.createElement("td",null," alpha "),l.a.createElement("td",null," alpha "),l.a.createElement("td",null," ","it will validate if the field value is only contain letter"," "),l.a.createElement("td",null," The :attribute may only contain letters")),l.a.createElement("tr",null,l.a.createElement("td",null," alpha_space"),l.a.createElement("td",null," alpha_space "),l.a.createElement("td",null," ","it will validate if the field only contain letters with spaces"),l.a.createElement("td",null," The :attribute must contain alphabet with spaces ")),l.a.createElement("tr",null,l.a.createElement("td",null," alpha_num "),l.a.createElement("td",null," alpha_num "),l.a.createElement("td",null," it will validate if the field contain letters with numbers"),l.a.createElement("td",null,"The :attribute may only contain letters and numbers.")),l.a.createElement("tr",null,l.a.createElement("td",null," alpha_slug "),l.a.createElement("td",null," alpha_slug "),l.a.createElement("td",null,"it will validate if the field contain letters, numbers, and underscore"),l.a.createElement("td",null,"The :attribute may only contain letters, numbers, and underscore.")),l.a.createElement("tr",null,l.a.createElement("td",null," alpha_dash "),l.a.createElement("td",null," alpha_dash "),l.a.createElement("td",null,"it will validate if the field contain letters with numbers and dashes"),l.a.createElement("td",null," ","The :attribute may only contain letters, numbers, and dashes.")),l.a.createElement("tr",null,l.a.createElement("td",null," url "),l.a.createElement("td",null," url "),l.a.createElement("td",null," it will validate if the field contain valid url"),l.a.createElement("td",null," The :attribute must be a valid url. ")),l.a.createElement("tr",null,l.a.createElement("td",null," max_size "),l.a.createElement("td",null," max_size:","<number>"," "),l.a.createElement("td",null,"it will validate if the field contain a maximum file size and the size must calculate in kilobytes.",l.a.createElement("span",{className:"h-word"},"e.g. max_size:5000")),l.a.createElement("td",null," The :attribute may not be greater :max_size kilobytes.")),l.a.createElement("tr",null,l.a.createElement("td",null," min_size "),l.a.createElement("td",null," min_size:","<number>"," "),l.a.createElement("td",null,"it will validate if the field contain a minimum file size and the size must calculate in kilobytes.",l.a.createElement("span",{className:"h-word"},"e.g. min_size:1000")),l.a.createElement("td",null,"The :attribute must be atleast :min_size kilobytes.")),l.a.createElement("tr",null,l.a.createElement("td",null," required_if"),l.a.createElement("td",null,"required_if:","<field_id>","=","<expected_value>"),l.a.createElement("td",null,"it will require the field, if the target field matches the expected value. you can use exact value or regular expression like",l.a.createElement("span",{className:"h-word"},"required_if:bio=.+"),"."," ",l.a.createElement("span",{className:"h-word"},".+")," means has any value.",l.a.createElement("span",{className:"h-word"},"e.g. required_if:country=AU")," since most of the time field ids are not the same as the labels and same with the values label. that is why you can use Aliasing(@)",l.a.createElement("span",{className:"h-word"},"e.g. required_if:country@Country=AU@Australia")),l.a.createElement("td",null,"The :attribute field is required when :required_if is :value.")),l.a.createElement("tr",null,l.a.createElement("td",null," same "),l.a.createElement("td",null," same:","<field_id>"," "),l.a.createElement("td",null,"it will validate the field until the target field contain the same value.",l.a.createElement("span",{className:"h-word"},"e.g. same:pass")," since most of the time field ids are not the same as the labels. you can use Aliasing(@)",l.a.createElement("span",{className:"h-word"},"e.g. same:pass@Password")),l.a.createElement("td",null," The :attribute and :same must match. "))))))},ae=[{name:"DoneTypingEvent(",type:"",default:"",description:""},{name:"callback,",type:"function",default:"-",description:"it is the callback function when the user stop typing.",data:[{name:"function (",type:"",default:"",description:""},{name:"event",type:"object",default:"-",description:"it consist event properties.",data:[{name:"type",type:"string",default:"-",description:"type of the event triggered."},{name:"target",type:"element",default:"-",description:"the element which the event happens."}]},{name:") { return void }",type:"",default:"",description:""}]},{name:"delay",type:"number",default:"700",description:"it is the miliseconds aloted for users typing, if its exceeded on aloted time then it will know that the user stops typing."},{name:")",type:"",default:"",description:""}],re={name:"message",type:"string",default:"-",description:"it is the message template will be displayed when your rules is invalid.",data:[{name:"`:attribute`",type:"interpulation",default:"-",description:"if it is part of your message, it will be replace by the label you assigned in label schema."},{name:l.a.createElement("pre",null,"`:[ruleName]`"),type:"interpulation",default:"-",description:"if it is part of your message, it will be replace by the parameter you put on the rules like `min:5` then `:min` will be replaced by `5`."},{name:"`:value`",type:"interpulation",default:"-",description:"if it is part of your message, it will be replace by the value of your parameter like required_if:favorite=apple, then `:value` will be replaced by `apple`."}]},le=[{name:"Validator.rulesExtend({",type:"",default:"",description:""},{name:"[ruleName]",type:"object",default:"-",description:"your rule name.",data:[{name:"exe",type:"function",default:"-",description:"it is where the validation happens, you must return true if the input is invalid.",data:[{name:"function ({",type:"",default:"",description:""},{name:"received,",type:"string | array",default:"-",description:"it is the form input`s value."},{name:"data,",type:"object",default:"-",description:"it is the collected values of all the form fields which is registered in the schema."},{name:"parameter,",type:"string",default:"-",description:"it is the parameter of your rule. example `min:5`, the parameter then will be the `5`"},{name:"parameter_value",type:"string",default:"-",description:"when your rule had a parameter and the parameter had a value, then it will be it. example `required_if:job=programmer`, the value then will be the `programmer`"},{name:"}) { return boolean }",type:"",default:"",description:""}]},re,{name:"allowMessageEvenValid",type:"boolean",default:"false",description:"it is use to allow message to be process and displayed even the received value is valid."}]},{name:"})",type:"",default:"",description:""}],ie=[{name:"Validator.rulesUpdateMessage({",type:"",default:"",description:""},{name:"ruleName,",type:"string",default:"-",description:"the name of the rule you want to update the message"},re,{name:"})",type:"",default:"",description:""}],se=[{name:"formState,",type:"function",default:"-",description:"it is use to fetch the field state.",data:[{name:"const fieldState = formState(",type:"",default:"",description:""},{name:"fetchState",type:"string | array",default:"-",description:"it is the name of the field which is registered on the schema. furthermore you can passed an array to fetch multiple field states."},{name:")",type:"",default:"",description:""}]},{name:"formUpdate,",type:"function",default:"-",description:"it is use to update the field state. and it is commonly used directly in onChange event or if more complex you can use it inside the EventHandler.",data:[{name:"formUpdate(",type:"",default:"",description:""},{name:"event,",type:"Event | object",default:"-",description:"it is the event of the EventListener or alternative imitation of it.",data:[{name:"target",type:"element | object",default:"-",description:"if you want to imitate the form element. the object must contain property type, value, and name."}]},{name:"directKey?",type:"string",default:"-",description:"it is use as a direct access key, to directly tell formUpdate which field state will be updated, and will not depend on the form field attribute name when the event is triggered."},{name:")",type:"",default:"",description:""}]},{name:"formRegistry,",type:"function",default:"-",description:"it is use to remotely register the field rules into the schema.",data:[{name:"formRegistry({",type:"",default:"",description:""},{name:"name,",type:"string",default:"-",description:"it is the name of the form field."},{name:"label,",type:"string",default:"[name]",description:"it is the label of the form field you want to display in the invalid messages."},{name:"rules,",type:"string",default:"-",description:"it is the rules you want to set for form field."},{name:"value?,",type:"string",default:"-",description:"it is the default value you want to set on the form field."},{name:"aliased?",type:"string",default:"-",description:"it is used as an alternative name or identifier of the form field which have a similar name."},{name:"})",type:"",default:"",description:""}]}],oe=[{name:"const {",type:"",default:"",description:""}].concat(se,[{name:"formSubmit",type:"function",default:"-",description:"it is use to handle the submission of form field.",data:[{name:"const submitHandler = formSubmit(",type:"",default:"",description:""},{name:"callback",type:"function",default:"-",description:"it is the callback function which will be executed each time the form is submited.",data:[{name:"function (",type:"",default:"",description:""},{name:"event",type:"FormEvent",default:"-",description:"it is consist of methods which is use to submit.",data:[{name:"event.target",type:"element",default:"-",description:"It will get the form element."},{name:"event.locateFailed()",type:"method",default:"-",description:"It will locate the form field that fails the requirements if the field is out of the view point. you can adjust the position by passing a int parameter .locateFailed(70) the default is 40 depends on your navbar height if it is fixed and if you just want to get the scrollTop just do .locateFailed(70, false)",data:[{name:"event.locateFailed(",type:"",default:"",description:""},{name:"prefix,",type:"number",default:"40",description:"it is the additional top position when the navbar is fixed."},{name:"autoscroll",type:"boolean",default:"true",description:l.a.createElement(l.a.Fragment,null,"if you just want to get the scrollTop just assign ",l.a.createElement("b",null,"false"),".")},{name:"): number",type:"",default:"",description:""}]},{name:"event.reset()",type:"method",default:"-",description:"It will reset all the form fields and the schema."},{name:"event.isReady()",type:"method",default:"-",description:"It will check if the form is ready and all the value is valid."},{name:"event.json()",type:"method",default:"-",description:l.a.createElement(l.a.Fragment,null,"It will return the form data in json. that is use for ",l.a.createElement("b",null,"Content-Type: application/json"),".")},{name:"event.paramArray()",type:"method",default:"-",description:"It will return the form data in array."},{name:"event.param()",type:"method",default:"-",description:l.a.createElement(l.a.Fragment,null,"It will return the form data in url encode string that is use for ",l.a.createElement("b",null,"Content-Type: application/x-www-form-urlencoded"),".")},{name:"event.formData()",type:"method",default:"-",description:"it will return instance of FormData."},{name:"event.forEach",type:"method",default:"-",description:"it will loop each of the form data."}]},{name:") { return void }",type:"",default:"",description:""}]},{name:")",type:"",default:"",description:""}]},{name:"} = useForm(",type:"",default:"",description:""},{name:"schema?",type:"object",default:"-",description:"it is the pre-registration of the fields.",data:[{name:"{",type:"",default:"",description:""},{name:"[fields name]:",type:"object",default:"-",description:"it is the object-key of your field state.",data:[{name:"label,",type:"string",default:"[fields name]",description:"it is the label of the form field you want to display in the invalid messages."},{name:"rules,",type:"string",default:"-",description:"it is the rules you want to set for form field."},{name:"value?,",type:"string",default:"-",description:"it is the default value you want to set on the form field."},{name:"aliased?",type:"string",default:"-",description:"it is used as an alternative name or identifier of the form field which have a similar name."}]},{name:"}",type:"",default:"",description:""}]},{name:")",type:"",default:"",description:""}]),ue=[{name:"value",type:"object",default:"-",description:"it must contain the useForm funtions: formState, formUpdate, and formRegistry which will be supply to all of its descendant using useFormSupplier.",data:se}],ce=[{name:"const {",type:"",default:"",description:""}].concat(se,[{name:"} = useFormSupplier()",type:"",default:"",description:""}]),me=function(){return l.a.createElement(i.l,{title:"DoneTypingEvent",context:"it is use to fire the event after user done typing, that will save a lot of unessesary execution while typing."},l.a.createElement(i.q.ForAPI,{data:ae}))},de=function(){return l.a.createElement(i.l,{title:"Validator.rulesExtend",context:"it is use to make your own rules."},l.a.createElement(i.q.ForAPI,{data:le}))},fe=function(){return l.a.createElement(i.l,{title:"Validator.rulesUpdateMessage",context:"it is use to change the message of the existing rules."},l.a.createElement(i.q.ForAPI,{data:ie}))},pe=function(){return l.a.createElement(i.l,{title:"useForm",context:"it is use to register schema and to get formState, formUpdate, formSubmit, formRegistry."},l.a.createElement(i.q.ForAPI,{data:oe}))},he=function(){return l.a.createElement(i.l,{title:"FormSupplier",context:"it is use to set the useForm functions into useFormSupplier which you can use under FormSupplier as a wrapper."},l.a.createElement(i.q.ForAPI,{data:ue}))},ge=function(){return l.a.createElement(i.l,{title:"useFormSupplier",context:"it is use to fetch FormSupplier provided."},l.a.createElement(i.q.ForAPI,{data:ce}))},be=function(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(P,null),l.a.createElement(L,null),l.a.createElement(G,null),l.a.createElement($,null),l.a.createElement(H,null),l.a.createElement(Y,null),l.a.createElement(Z,null),l.a.createElement(K,null),l.a.createElement(X,null),l.a.createElement(Q,null),l.a.createElement(J,null),l.a.createElement(ee,null),l.a.createElement(i.a,{title:"API"},l.a.createElement(ne,null),l.a.createElement(pe,null),l.a.createElement(he,null),l.a.createElement(ge,null),l.a.createElement(me,null),l.a.createElement(i.a,{title:"Validator"},l.a.createElement(de,null),l.a.createElement(fe,null))),l.a.createElement(te,null))},ye=function(){return l.a.createElement(i.n.ScrollNav,{list:[{label:"Installation"},{label:"Imports"},{label:"Getting Started",sub:[{label:"Controllable Fields"},{label:"Customize Messages"},{label:"Submitting Form"},{label:"Advance Design Pattern"},{label:"Aliased Registry"},{label:"FormUpdate With DoneTypingEvent"},{label:"Aliased Rule Parameters"},{label:"Customize Rules"},{label:"Updating Rules Messages"}]},{label:"API",sub:[{label:"Rules"},{label:"useForm"},{label:"FormSupplier"},{label:"useFormSupplier"},{label:"DoneTypingEvent"},{label:"Validator",sub:[{label:"Validator.rulesExtend"},{label:"Validator.rulesUpdateMessage"}]}]}]})};t.default=function(){var e="is a form validator library that is delightfully made in react. It is so\n\tlight with unique setting and cognitive design. the rules are\n\teloquent which will make the schema so powerful yet easy to understand,\n\tand implement on any kind of components. unlike any other form validator library,\n\tformydable is complex that allows you to bend\n\tand shape it on almost what ever you want. furthermore, formydable is capable on working both controllable and uncontrollable form fields and to know more just read the documentation below.";return l.a.createElement(l.a.Fragment,null,l.a.createElement(i.e,null,l.a.createElement(i.e.Meta,{title:"".concat("Formydable"," - React Libraries | Mytabworks"),description:e.slice(0,100),image:"/images/icons/icon-512x512.png"})),l.a.createElement(i.i,{title:"Formydable",context:e,main:l.a.createElement(be,null),side:l.a.createElement(ye,null)}))}}}]);
//# sourceMappingURL=4.515cba2a.chunk.js.map