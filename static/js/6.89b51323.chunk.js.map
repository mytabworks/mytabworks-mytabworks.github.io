{"version":3,"sources":["App/Main/Pages/Javascript/Topics/Draggerjs/StringCodes.js","App/Main/Pages/Javascript/Topics/Draggerjs/Sections/index.js","App/Main/Pages/Javascript/Topics/Draggerjs/Sections sync /.js$","App/Main/Pages/Javascript/Topics/Draggerjs/Sections/Autoscroll.js","App/Main/Pages/Javascript/Topics/Draggerjs/Sections/Cloning.js","App/Main/Pages/Javascript/Topics/Draggerjs/Sections/Common.js","App/Main/Pages/Javascript/Topics/Draggerjs/Sections/Droppable.js","App/Main/Pages/Javascript/Topics/Draggerjs/Sections/GettingStarted.js","App/Main/Pages/Javascript/Topics/Draggerjs/Sections/RawDrag.js","App/Main/Pages/Javascript/Topics/Draggerjs/Sections/Switching.js","App/Main/Pages/Javascript/Topics/Draggerjs/Tables.js","App/Main/Pages/Javascript/Topics/Draggerjs/index.js"],"names":["Importing","GettingStarted","html","css","js","Autoscroll","RawDrag","Droppable","Cloning","Switching","req","require","whenDirectoryOnlyIndexAllowToExport","modules","keys","filter","dirname","test","map","module","exports","reduce","result","current","Object","r","key","webpackContext","id","webpackContextResolve","__webpack_require__","o","e","Error","code","resolve","useEffect","dragger","Dragger","draggable","autoscroll","on","target","isDraggableElement","preventDefault","classList","add","contains","remove","destroy","readonly","title","context","className","data-example","clone","cloningAlgorithm","elementToInsert","droppable","closest","currentDroppable","droppableRect","getBoundingClientRect","isBefore","clientX","left","width","next","nextElementSibling","appendChild","insertBefore","cloneNode","parentElement","setTimeout","variant","style","marginTop","Installation","language","theme","plain","color","backgroundColor","styles","cleanUp","isComplete","document","querySelector","nodeName","clientWidth","clearTimeout","distance","moveX","startX","endX","onClick","href","switchingAlgorithm","isFirstChild","firstElementChild","isLastChild","lastElementChild","divident","height","clientY","top","axis","Array","from","container","children","forEach","each","i","dataset","index","data-index","DraggerRows","name","type","default","description","data","EventTypes","MethodRows","EventsRows","ForAPI","nameLabel","Methods","typeLabel","EventProp","DraggerjsMain","DraggerjsSidePanel","ScrollNav","list","label","sub","Draggerjs","Meta","image","main","side"],"mappings":"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","file":"static/js/6.89b51323.chunk.js","sourcesContent":["export const Importing = `import Dragger from \"draggerjs\"`\r\nexport const GettingStarted = {\r\nhtml: `<div className=\"drag-container\" id=\"drag-getting-started\">  \r\n    <div className=\"drag-around n-border-color\">\r\n        <div className=\"draggable-box center n-flat\">\r\n            <h1>Drag Me</h1>\r\n        </div> \r\n    </div>\r\n</div>`,\r\ncss: `.drag-container {  \r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    height: 250px;  \r\n    position: relative;\r\n}\r\n.drag-container > .drag-around {\r\n    flex: 1 1;\r\n    width: 100%; \r\n    border: 2px dashed #fff;\r\n    border-radius: 15px;\r\n    padding: 15px;\r\n    transition: box-shadow 300ms ease-in;\r\n}\r\n.drag-container .draggable-box {\r\n    display: inline-flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-width: 50px;\r\n    min-height: 50px;\r\n    padding: 0 10px; \r\n    border-radius: 10px;\r\n    transition: box-shadow 300ms ease-in;\r\n    cursor: grab;\r\n}\r\n.drag-container .draggable-box > h1 { \r\n    margin-bottom: 5px;\r\n}\r\n.drag-container .grabbed {\r\n    cursor: grabbing;\r\n    margin: 0;\r\n}\r\n.draggable-box.center {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n}`,\r\njs: `const dragger = new Dragger('#drag-getting-started', {\r\n    draggable: '.draggable-box'\r\n})\r\ndragger.on('dragstart', (e) => { \r\n    const target = e.target\r\n    if(e.isDraggableElement) {\r\n        // prevent mobile from scrolling\r\n        // when dragging draggable element\r\n        e.preventDefault()\r\n        target.classList.add('grabbed')\r\n        if(target.classList.contains('center')) {\r\n            target.classList.remove('center')\r\n        }\r\n    }\r\n})\r\ndragger.on('dragend', (e) => {\r\n    if(e.isDraggableElement) {  \r\n        e.target.classList.remove('grabbed') \r\n    }\r\n})`\r\n}\r\nexport const Autoscroll = {\r\nhtml: `<div className=\"drag-container drag-long-ground\" id=\"drag-autoscroll\">  \r\n    <div className=\"drag-around n-border-color\">\r\n        <div className=\"draggable-box center n-flat\">\r\n            <h1>Drag Me</h1>\r\n        </div> \r\n    </div>\r\n</div>`,\r\ncss: `.drag-container {  \r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    height: 250px;  \r\n    position: relative;\r\n}\r\n.drag-long-ground {\r\n    display: block;\r\n    overflow: scroll;\r\n    -webkit-overflow-scrolling: touch;\r\n}\r\n.drag-long-ground > .drag-around {\r\n    width: 1250px;\r\n    height: 1250px;\r\n}\r\n.drag-container > .drag-around {\r\n    flex: 1 1;\r\n    width: 100%; \r\n    border: 2px dashed #fff;\r\n    border-radius: 15px;\r\n    padding: 15px;\r\n    transition: box-shadow 300ms ease-in;\r\n}\r\n.drag-container .draggable-box {\r\n    display: inline-flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-width: 50px;\r\n    min-height: 50px;\r\n    padding: 0 10px; \r\n    border-radius: 10px;\r\n    transition: box-shadow 300ms ease-in;\r\n    cursor: grab;\r\n}\r\n.drag-container .draggable-box > h1 { \r\n    margin-bottom: 5px;\r\n}\r\n.drag-container .grabbed {\r\n    cursor: grabbing;\r\n    margin: 0;\r\n}\r\n.draggable-box.center {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n}`,\r\njs: `const dragger = new Dragger('#drag-autoscroll', {\r\n    draggable: '.draggable-box',\r\n    autoscroll: true\r\n})\r\ndragger.on('dragstart', (e) => { \r\n    const target = e.target\r\n    if(e.isDraggableElement) {\r\n        // prevent mobile from scrolling\r\n        // when dragging draggable element\r\n        e.preventDefault()\r\n        target.classList.add('grabbed')\r\n        if(target.classList.contains('center')) {\r\n            target.classList.remove('center')\r\n        }\r\n    }\r\n})\r\ndragger.on('dragend', (e) => {\r\n    if(e.isDraggableElement) {  \r\n        e.target.classList.remove('grabbed') \r\n    }\r\n})`\r\n}\r\nexport const RawDrag = {\r\nhtml: `<div className=\"drag-drawer\" id=\"drag-raw-drag\">  \r\n<div className=\"drag-drawer-content n-no-shadow n-engrave\"> \r\n    <nav className=\"n-nav n-nav-flat n-nav-column\">\r\n        <a className=\"n-nav-link\" href=\"#\">link-1</a>\r\n        <a className=\"n-nav-link\" href=\"#\">link-2</a>\r\n        <a className=\"n-nav-link\" href=\"#\">link-3</a>\r\n    </nav> \r\n</div>\r\n</div>`,\r\ncss: `.drag-drawer {\r\n    display: block;\r\n    position: relative;\r\n    height: 250px;\r\n    border: 1px solid #dcdcdc;\r\n    overflow: hidden;\r\n}\r\n.drag-drawer-content {\r\n    display: block;\r\n    position: absolute;\r\n    top: 0;\r\n    left: -250px;\r\n    width: 250px;\r\n    height: 100%;\r\n    padding: 20px 25px;\r\n}\r\n.drag-drawer-content:before {\r\n    content: \"\\\\3009\";\r\n    display: block;\r\n    position: absolute;\r\n    left: 100%;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    padding: 15px 10px;\r\n    font-size: 30px;\r\n    transition: opacity 300ms ease-in-out;\r\n}\r\n.drag-drawer-content.draw-full:before {\r\n    opacity: 0;\r\n}\r\n.drag-drawer-content.draw-full:after {\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    left: 100%;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%; \r\n}\r\n.draw-transition {\r\n    transition: left 300ms ease-in-out;\r\n}\r\n.draw-full {\r\n    left: 0;\r\n}`,\r\njs: `let cleanUp\r\nlet isComplete = false \r\nconst target = document.querySelector('.drag-drawer-content')\r\nconst dragger = new Dragger('#drag-raw-drag')\r\ndragger.on('dragstart', (e) => { \r\n    if(target === e.target) {\r\n        if(e.target.nodeName !== 'A') {\r\n            e.preventDefault()\r\n        }\r\n        target.style.left = (isComplete ? 0 : -target.clientWidth) + 'px'\r\n        target.classList.remove('draw-transition')  \r\n        clearTimeout(cleanUp)\r\n    }\r\n})\r\ndragger.on('dragmove', (e) => {    \r\n    if(target === e.target) {\r\n        const width = target.clientWidth  \r\n        const distance = (isComplete ? e.moveX - e.startX : (e.moveX - e.startX) - width)\r\n        target.style.left = (0 > distance ? -width > distance ? -width : distance : 0) + 'px' \r\n    }\r\n}) \r\ndragger.on('dragend', (e) => { \r\n    if(target === e.target) {\r\n        const width = target.clientWidth \r\n        const distance = isComplete ? (e.endX - e.startX) + width :  e.endX - e.startX \r\n        if(distance > target.clientWidth/2) {\r\n            target.classList.add('draw-full')\r\n            isComplete = true\r\n        } else {  \r\n            target.classList.remove('draw-full') \r\n            isComplete = false\r\n        }\r\n        target.style.left = null\r\n        target.classList.add('draw-transition') \r\n        cleanUp = setTimeout(() => {\r\n            target.classList.remove('draw-transition')\r\n        }, 300) \r\n    }\r\n})`\r\n}\r\nexport const Droppable = {\r\nhtml: `<div className=\"drag-container\" id=\"drag-droppable\">  \r\n    <div className=\"droppable-area n-no-shadow n-border-color\">\r\n        <div className=\"draggable-box n-no-shadow n-flat\">\r\n            <h1>1</h1>\r\n        </div>\r\n        <div className=\"draggable-box n-no-shadow n-flat\">\r\n            <h1>2</h1>\r\n        </div>\r\n    </div>\r\n    <div className=\"droppable-area n-no-shadow n-border-color\"></div>\r\n</div>`,\r\ncss: `.drag-container {  \r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    height: 250px;  \r\n    position: relative;\r\n}\r\n.drag-container > .droppable-area {\r\n    flex: 1 1;\r\n    width: 100%; \r\n    border: 2px dashed #fff;\r\n    border-radius: 15px;\r\n    padding: 15px;\r\n    transition: box-shadow 300ms ease-in;\r\n}\r\n.drag-container > .droppable-area + .droppable-area {\r\n    margin-left: 15px\r\n}\r\n.drag-container .draggable-box {\r\n    display: inline-flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-width: 50px;\r\n    min-height: 50px;\r\n    padding: 0 10px; \r\n    border-radius: 10px;\r\n    transition: box-shadow 300ms ease-in;\r\n    cursor: grab;\r\n}\r\n.drag-container .draggable-box[hidden] {\r\n    display: none !important;\r\n}\r\n.drag-container .draggable-box > h1 { \r\n    margin-bottom: 5px;\r\n}\r\n.drag-container .droppable-area > .draggable-box:not(:last-child) {\r\n    margin-right: 5px;\r\n}\r\n.drag-container .grabbed {\r\n    cursor: grabbing;\r\n    margin: 0;\r\n}`,\r\njs: `const dragger = new Dragger('#drag-droppable', {\r\n    draggable: '.draggable-box',\r\n    droppable: '.droppable-area',\r\n})\r\ndragger.on('dragstart', (e) => {\r\n    const target = e.target\r\n    if(e.isDraggableElement) {\r\n        e.preventDefault() \r\n        target.classList.add('grabbed')\r\n        target.classList.add('n-float')\r\n        target.classList.remove('n-flat')\r\n    }\r\n   \r\n})\r\ndragger.on('dragend', (e) => {\r\n    const target = e.target\r\n    if(e.isDraggableElement) { \r\n        /*async it to show transition*/\r\n        setTimeout(() => {\r\n            target.classList.add('n-flat')\r\n            target.classList.remove('n-float')\r\n            target.classList.remove('grabbed')\r\n        },0)\r\n    }\r\n})\r\ndragger.on('dragenter', (e) => {\r\n    if(e.isDraggableElement && e.target.parentElement !== e.currentDroppable) { \r\n        e.currentDroppable.classList.add('n-engrave') \r\n    }\r\n})\r\ndragger.on('dragexit', (e) => {\r\n    if(e.isDraggableElement && e.target.parentElement !== e.currentDroppable) { \r\n        e.currentDroppable.classList.remove('n-engrave') \r\n    }\r\n})\r\ndragger.on('drop', (e) => {\r\n    if(e.isDraggableElement) {\r\n        if(e.target.parentElement !== e.currentDroppable)\r\n            e.currentDroppable.appendChild(e.target) \r\n        e.currentDroppable.classList.remove('n-engrave') \r\n    }\r\n})`\r\n}\r\n\r\nexport const Cloning = {\r\nhtml: `<div id=\"drag-cloning\" className=\"drag-container\">  \r\n    <div className=\"droppable-area n-no-shadow n-border-color\">\r\n        <div className=\"draggable-box n-no-shadow n-flat\" id=\"draggable-1\">\r\n            <h1>1</h1>\r\n        </div>\r\n        <div className=\"draggable-box n-no-shadow n-flat\" id=\"draggable-2\">\r\n            <h1>2</h1>\r\n        </div> \r\n    </div>\r\n    <div className=\"droppable-area n-no-shadow n-border-color\">\r\n        <div className=\"draggable-box n-no-shadow n-flat\" id=\"draggable-3\">\r\n            <h1>3</h1>\r\n        </div>\r\n        <div className=\"draggable-box n-no-shadow n-flat\" id=\"draggable-4\">\r\n            <h1>4</h1>\r\n        </div>\r\n    </div>\r\n</div>`,\r\ncss: `.drag-container {  \r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    height: 250px;  \r\n    position: relative;\r\n}\r\n.drag-container > .droppable-area {\r\n    flex: 1 1;\r\n    width: 100%; \r\n    border: 2px dashed #fff;\r\n    border-radius: 15px;\r\n    padding: 15px;\r\n    transition: box-shadow 300ms ease-in;\r\n}\r\n.drag-container > .droppable-area + .droppable-area {\r\n    margin-left: 15px\r\n}\r\n.drag-container .draggable-box {\r\n    display: inline-flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-width: 50px;\r\n    min-height: 50px;\r\n    padding: 0 10px; \r\n    border-radius: 10px;\r\n    transition: box-shadow 300ms ease-in;\r\n    cursor: grab;\r\n}\r\n.drag-container .draggable-box[hidden] {\r\n    display: none !important;\r\n}\r\n.drag-container .drag-clone > h1 {\r\n    visibility: hidden;\r\n}\r\n.drag-container .draggable-box > h1 { \r\n    margin-bottom: 5px;\r\n}\r\n.drag-container .droppable-area > .draggable-box:not(:last-child) {\r\n    margin-right: 5px;\r\n}\r\n.drag-container .grabbed {\r\n    cursor: grabbing;\r\n    margin: 0;\r\n}`,\r\njs: `        let clone\r\nconst cloningAlgorithm = (e, elementToInsert) => {\r\n    const droppable = e.droppable && e.droppable.closest('.draggable-box')\r\n    const currentDroppable = e.currentDroppable \r\n    /*prevent cloning in the same droppable-area*/\r\n    if(e.target.closest('.droppable-area') === currentDroppable) return;\r\n    if(droppable && currentDroppable \r\n        && droppable !== elementToInsert \r\n        && droppable !== currentDroppable) {\r\n        const droppableRect = droppable.getBoundingClientRect()\r\n        /*the clone positioning is base on x axis*/\r\n        const isBefore = e.clientX - droppableRect.left < droppableRect.width/2\r\n        const next = droppable.nextElementSibling\r\n        if(!next && !isBefore) {\r\n            currentDroppable.appendChild(elementToInsert)\r\n        }\r\n        currentDroppable.insertBefore(elementToInsert, isBefore ? droppable : next )\r\n    } else if(currentDroppable && e.droppable === currentDroppable){\r\n        currentDroppable.appendChild(elementToInsert)\r\n    }\r\n}\r\n\r\nconst dragger = new Dragger('#drag-cloning', {\r\n    draggable: '.draggable-box',\r\n    droppable: '.droppable-area',\r\n})\r\ndragger.on('dragstart', (e) => {\r\n    const target = e.target\r\n    if(e.isDraggableElement) {\r\n        e.preventDefault() \r\n        clone = target.cloneNode(true)\r\n        clone.classList.add('drag-clone')\r\n        target.classList.add('grabbed')\r\n        target.classList.add('n-float')\r\n        target.classList.remove('n-flat') \r\n        \r\n    }\r\n   \r\n})\r\ndragger.on('dragover', (e) => { \r\n    cloningAlgorithm(e, clone)\r\n}) \r\ndragger.on('dragenter', (e) => {\r\n    if(e.isDraggableElement && e.target.parentElement !== e.currentDroppable) { \r\n        e.currentDroppable.classList.add('n-engrave') \r\n    } \r\n})\r\ndragger.on('dragexit', (e) => {\r\n    if(e.isDraggableElement && e.target.parentElement !== e.currentDroppable) { \r\n        e.currentDroppable.classList.remove('n-engrave') \r\n    }\r\n    /*remove clone when exiting*/\r\n    e.currentDroppable.contains(clone) && clone.remove()\r\n})\r\ndragger.on('drop', (e) => {\r\n    if(e.isDraggableElement) { \r\n        cloningAlgorithm(e, e.target) \r\n        e.currentDroppable.classList.remove('n-engrave') \r\n    } \r\n})\r\ndragger.on('dragend', (e) => {\r\n    const target = e.target\r\n    if(e.isDraggableElement) { \r\n        clone && clone.remove()\r\n        /*async it to show transition*/\r\n        setTimeout(() => {\r\n            target.classList.add('n-flat')\r\n            target.classList.remove('n-float')\r\n            target.classList.remove('grabbed')\r\n        },0)\r\n    }\r\n})`\r\n}\r\n\r\nexport const Switching = {\r\nhtml: `<ul className=\"switching-area\">\r\n    <li className=\"switching-box n-no-shadow n-flat-low\" data-index=\"1\">\r\n        <h5>Apple</h5>\r\n    </li>\r\n    <li className=\"switching-box n-no-shadow n-flat-low\" data-index=\"2\">\r\n        <h5>Peach</h5>\r\n    </li> \r\n    <li className=\"switching-box n-no-shadow n-flat-low\" data-index=\"3\">\r\n        <h5>Orange</h5>\r\n    </li>\r\n    <li className=\"switching-box n-no-shadow n-flat-low\" data-index=\"4\">\r\n        <h5>Grapes</h5>\r\n    </li>\r\n    <li className=\"switching-box n-no-shadow n-flat-low\" data-index=\"5\">\r\n        <h5>Banana</h5>\r\n    </li>\r\n</ul>`,\r\ncss: `.switching-area {\r\n    display: block;\r\n    position: relative;\r\n    width: 100%;\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n.switching-area > .switching-box {\r\n    display: flex;  \r\n    align-items: center; \r\n    position: relative;\r\n    width: 100%;\r\n    min-height: 50px;\r\n    padding: 0 10px; \r\n    border-radius: 7px;\r\n    transition: box-shadow 300ms ease-in;\r\n    cursor: grab;\r\n}\r\n.switching-area > .switching-box[hidden] {\r\n    display: none !important;\r\n}\r\n.switching-area > .switching-box:not(.drag-clone):before {\r\n    content: attr(data-index);\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    transform: translate(-50%, -50%);\r\n}\r\n.switching-area > .switching-box:not(:last-child) {\r\n    margin-bottom: 7px;\r\n}\r\n.switching-area > .drag-clone > *{\r\n    visibility: hidden;\r\n}\r\n.switching-area .grabbed {\r\n    cursor: grabbing;\r\n    margin: 0;\r\n    z-index: 1;\r\n}`,\r\njs: `let clone\r\nconst switchingAlgorithm = (e, elementToInsert) => {\r\n    const droppable = e.droppable && e.droppable.closest('.switching-box')\r\n    const currentDroppable = e.currentDroppable  \r\n    if(droppable && currentDroppable \r\n        && droppable !== elementToInsert \r\n        && droppable !== currentDroppable) {\r\n\r\n        const droppableRect = droppable.getBoundingClientRect()\r\n        const isFirstChild = currentDroppable.firstElementChild === droppable\r\n        const isLastChild = currentDroppable.lastElementChild === droppable\r\n        const divident = isFirstChild ? 0 : isLastChild ? droppableRect.height : 2\r\n        /*the clone positioning is base on y axis*/\r\n        const isBefore = e.clientY - droppableRect.top < droppableRect.height/divident\r\n        const next = droppable.nextElementSibling\r\n        if(!next && !isBefore) {\r\n            currentDroppable.appendChild(elementToInsert)\r\n        }\r\n        currentDroppable.insertBefore(elementToInsert, isBefore ? droppable : next )\r\n    }\r\n}\r\n\r\nconst dragger = new Dragger('.switching-area', {\r\n    draggable: '.switching-box',\r\n    droppable: '.switching-area',\r\n    axis: 'y',\r\n})\r\n\r\ndragger.on('dragstart', (e) => {\r\n    const target = e.target\r\n    if(e.isDraggableElement) {\r\n        e.preventDefault() \r\n        clone && clone.remove()\r\n        clone = target.cloneNode(true)\r\n        clone.classList.add('drag-clone')\r\n        clone.classList.remove('n-flat-low')\r\n        target.closest('.switching-area').insertBefore(clone, e.target )\r\n        target.classList.add('grabbed')\r\n        target.classList.add('n-float-low')\r\n        target.classList.remove('n-flat-low')  \r\n    }\r\n   \r\n})\r\ndragger.on('dragover', (e) => { \r\n    switchingAlgorithm(e, clone)\r\n})  \r\ndragger.on('drop', (e) => {\r\n    const target = e.target  \r\n    if(e.isDraggableElement) {  \r\n        switchingAlgorithm(e, target) \r\n    } \r\n})\r\ndragger.on('dragend', (e) => {\r\n    const target = e.target\r\n    if(e.isDraggableElement) { \r\n        clone.remove()\r\n        Array.from(e.container.children)\r\n            .forEach((each, i) => each.dataset.index = i + 1)\r\n        setTimeout(() => {\r\n            target.classList.add('n-flat')\r\n            target.classList.remove('n-float')\r\n            target.classList.remove('grabbed')\r\n        }, 0)\r\n    }\r\n})`\r\n}","const req = require.context('./', true, /.js$/);\r\nconst whenDirectoryOnlyIndexAllowToExport = /^\\.\\/(?:\\w{1,50}\\/index|\\w{1,50})\\.js$/\r\nconst modules = req.keys().filter((dirname) => whenDirectoryOnlyIndexAllowToExport.test(dirname)).map(req);\r\n\r\nmodule.exports = modules.reduce((result, current) => {\r\n\tconst keys = Object.keys(current);\r\n\treturn keys.reduce((r, key) => {\r\n\t\tr[key] = current[key];\r\n\t\treturn r;\r\n\t}, result);\r\n}, {});\r\n","var map = {\n\t\"./Autoscroll.js\": 736,\n\t\"./Cloning.js\": 737,\n\t\"./Common.js\": 738,\n\t\"./Droppable.js\": 739,\n\t\"./GettingStarted.js\": 740,\n\t\"./RawDrag.js\": 741,\n\t\"./Switching.js\": 742,\n\t\"./index.js\": 638\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 735;","import React, { useEffect } from 'react';\r\nimport Dragger from 'draggerjs'\r\nimport { SectionWithCode } from 'Templates';\r\nimport * as code from '../StringCodes'; \r\n\r\nexport const Autoscroll = () => {\r\n    \r\n    useEffect(() => {\r\n        const dragger = new Dragger('#drag-autoscroll', {\r\n            draggable: '.draggable-box',\r\n            autoscroll: true\r\n        })\r\n        dragger.on('dragstart', (e) => { \r\n            const target = e.target\r\n            if(e.isDraggableElement) {\r\n                // prevent mobile from scrolling\r\n                // when dragging draggable element\r\n                e.preventDefault()\r\n                target.classList.add('grabbed')\r\n                if(target.classList.contains('center')) {\r\n                    target.classList.remove('center')\r\n                }\r\n            }\r\n        })\r\n        dragger.on('dragend', (e) => {\r\n            if(e.isDraggableElement) {  \r\n                e.target.classList.remove('grabbed') \r\n            }\r\n        })\r\n        return () => dragger.destroy()\r\n    }, [])\r\n\r\n    return (\r\n        <>  \r\n            <SectionWithCode\r\n                readonly\r\n                title='Autoscroll'\r\n                context={<>you can easily apply autoscroll in the draggerjs just add <b>autoscroll: true</b> in the options.</>}\r\n                code={code.Autoscroll}\r\n            >\r\n                <div className=\"drag-container drag-long-ground\" id=\"drag-autoscroll\"  data-example>  \r\n                    <div className=\"drag-around n-border-color\">\r\n                        <div className=\"draggable-box center n-flat\">\r\n                            <h1>Drag Me</h1>\r\n                        </div> \r\n                    </div>\r\n                </div>\r\n            </SectionWithCode>\r\n        </>\r\n    );\r\n}","import React, { useEffect } from 'react';\r\nimport Dragger from 'draggerjs'\r\nimport { SectionWithCode, Note } from 'Templates';\r\nimport * as code from '../StringCodes'; \r\n\r\nexport const Cloning = () => {\r\n\r\n    useEffect(() => {\r\n        let clone\r\n        const cloningAlgorithm = (e, elementToInsert) => {\r\n            const droppable = e.droppable && e.droppable.closest('.draggable-box')\r\n            const currentDroppable = e.currentDroppable \r\n            /*prevent cloning in the same droppable-area*/\r\n            if(e.target.closest('.droppable-area') === currentDroppable) return;\r\n            if(droppable && currentDroppable \r\n                && droppable !== elementToInsert \r\n                && droppable !== currentDroppable) {\r\n                const droppableRect = droppable.getBoundingClientRect()\r\n                /*the clone positioning is base on x axis*/\r\n                const isBefore = e.clientX - droppableRect.left < droppableRect.width/2\r\n                const next = droppable.nextElementSibling\r\n                if(!next && !isBefore) {\r\n                    currentDroppable.appendChild(elementToInsert)\r\n                }\r\n                currentDroppable.insertBefore(elementToInsert, isBefore ? droppable : next )\r\n            } else if(currentDroppable && e.droppable === currentDroppable){\r\n                currentDroppable.appendChild(elementToInsert)\r\n            }\r\n        }\r\n\r\n        const dragger = new Dragger('#drag-cloning', {\r\n            draggable: '.draggable-box',\r\n            droppable: '.droppable-area',\r\n        })\r\n        dragger.on('dragstart', (e) => {\r\n            const target = e.target\r\n            if(e.isDraggableElement) {\r\n                e.preventDefault() \r\n                clone = target.cloneNode(true)\r\n                clone.classList.add('drag-clone')\r\n                target.classList.add('grabbed')\r\n                target.classList.add('n-float')\r\n                target.classList.remove('n-flat') \r\n                \r\n            }\r\n           \r\n        })\r\n        dragger.on('dragover', (e) => { \r\n            cloningAlgorithm(e, clone)\r\n        }) \r\n        dragger.on('dragenter', (e) => {\r\n            if(e.isDraggableElement && e.target.parentElement !== e.currentDroppable) { \r\n                e.currentDroppable.classList.add('n-engrave') \r\n            } \r\n        })\r\n        dragger.on('dragexit', (e) => {\r\n            if(e.isDraggableElement && e.target.parentElement !== e.currentDroppable) { \r\n                e.currentDroppable.classList.remove('n-engrave') \r\n            }\r\n            /*remove clone when exiting*/\r\n            e.currentDroppable.contains(clone) && clone.remove()\r\n        })\r\n        dragger.on('drop', (e) => {\r\n            if(e.isDraggableElement) { \r\n                cloningAlgorithm(e, e.target) \r\n                e.currentDroppable.classList.remove('n-engrave') \r\n            } \r\n        })\r\n        dragger.on('dragend', (e) => {\r\n            const target = e.target\r\n            if(e.isDraggableElement) { \r\n                clone && clone.remove()\r\n                /*async it to show transition*/\r\n                setTimeout(() => {\r\n                    target.classList.add('n-flat')\r\n                    target.classList.remove('n-float')\r\n                    target.classList.remove('grabbed')\r\n                },0)\r\n            }\r\n        })\r\n        return () => dragger.destroy()\r\n    }, [])\r\n\r\n    return (\r\n        <>  \r\n            <SectionWithCode\r\n                readonly\r\n                title='Cloning'\r\n                context='you can clone as well.'\r\n                code={code.Cloning}\r\n            >\r\n                <div id=\"drag-cloning\" className=\"drag-container\" data-example>  \r\n                    <div className=\"droppable-area n-no-shadow n-border-color\">\r\n                        <div className=\"draggable-box n-no-shadow n-flat\" id=\"draggable-1\">\r\n                            <h1>1</h1>\r\n                        </div>\r\n                        <div className=\"draggable-box n-no-shadow n-flat\" id=\"draggable-2\">\r\n                            <h1>2</h1>\r\n                        </div> \r\n                    </div>\r\n                    <div className=\"droppable-area n-no-shadow n-border-color\">\r\n                        <div className=\"draggable-box n-no-shadow n-flat\" id=\"draggable-3\">\r\n                            <h1>3</h1>\r\n                        </div>\r\n                        <div className=\"draggable-box n-no-shadow n-flat\" id=\"draggable-4\">\r\n                            <h1>4</h1>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Note\r\n                    variant='warning'\r\n                    title='remember'\r\n                    context={<>When using <b>droppable</b> make sure to add <b>[hidden] {'{'} display: none !important; {'}'}</b> in your stylesheet. due to some changes in browsers which <b>hidden</b> property gets overridden.</>}\r\n                    style={{ marginTop: '20px' }}\r\n                />\r\n            </SectionWithCode>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { SectionWithCode } from 'Templates';\r\nimport * as code from '../StringCodes';\r\n\r\nexport const Installation = () => (\r\n\t<SectionWithCode\r\n\t\treadonly\r\n\t\ttitle='Installation(not publish yet)'\r\n\t\tcode={`npm i draggerjs`}\r\n\t\tlanguage='js'\r\n\t\ttheme={{\r\n\t\t\tplain: {\r\n\t\t\t\tcolor: 'rgb(215,215,215)',\r\n\t\t\t\tbackgroundColor: 'rgb(86,86,86)',\r\n\t\t\t},\r\n\t\t\tstyles: [],\r\n\t\t}}\r\n\t/>\r\n);\r\n\r\nexport const Importing = () => (\r\n\t<SectionWithCode readonly title='Imports' code={code.Importing} />\r\n);","import React, { useEffect } from 'react';\r\nimport Dragger from 'draggerjs'\r\nimport { SectionWithCode, Note } from 'Templates';\r\nimport * as code from '../StringCodes'; \r\n\r\nexport const Droppable = () => {\r\n\r\n    useEffect(() => {\r\n        const dragger = new Dragger('#drag-droppable', {\r\n            draggable: '.draggable-box',\r\n            droppable: '.droppable-area',\r\n        })\r\n        dragger.on('dragstart', (e) => {\r\n            const target = e.target\r\n            if(e.isDraggableElement) {\r\n                e.preventDefault() \r\n                target.classList.add('grabbed')\r\n                target.classList.add('n-float')\r\n                target.classList.remove('n-flat')\r\n            }\r\n           \r\n        })\r\n        dragger.on('dragend', (e) => {\r\n            const target = e.target\r\n            if(e.isDraggableElement) { \r\n                /*async it to show transition*/\r\n                setTimeout(() => {\r\n                    target.classList.add('n-flat')\r\n                    target.classList.remove('n-float')\r\n                    target.classList.remove('grabbed')\r\n                },0)\r\n            }\r\n        })\r\n        dragger.on('dragenter', (e) => {\r\n            if(e.isDraggableElement && e.target.parentElement !== e.currentDroppable) { \r\n                e.currentDroppable.classList.add('n-engrave') \r\n            }\r\n        })\r\n        dragger.on('dragexit', (e) => {\r\n            if(e.isDraggableElement && e.target.parentElement !== e.currentDroppable) { \r\n                e.currentDroppable.classList.remove('n-engrave') \r\n            }\r\n        })\r\n        dragger.on('drop', (e) => {\r\n            if(e.isDraggableElement) {\r\n                if(e.target.parentElement !== e.currentDroppable)\r\n                    e.currentDroppable.appendChild(e.target) \r\n                e.currentDroppable.classList.remove('n-engrave') \r\n            }\r\n        })\r\n        return () => dragger.destroy()\r\n    }, [])\r\n\r\n    return (\r\n        <>  \r\n            <SectionWithCode\r\n                readonly\r\n                title='Droppable'\r\n                context='you can use droppable as well.'\r\n                code={code.Droppable}\r\n            >\r\n                <div id=\"drag-droppable\" className=\"drag-container\" data-example>  \r\n                    <div className=\"droppable-area n-no-shadow n-border-color\">\r\n                        <div className=\"draggable-box n-no-shadow n-flat\">\r\n                            <h1>1</h1>\r\n                        </div>\r\n                        <div className=\"draggable-box n-no-shadow n-flat\">\r\n                            <h1>2</h1>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"droppable-area n-no-shadow n-border-color\"></div>\r\n                </div>\r\n                <Note\r\n                    variant='warning'\r\n                    title='remember'\r\n                    context={<>When using <b>droppable</b> make sure to add <b>[hidden] {'{'} display: none !important; {'}'}</b> in your stylesheet. due to some changes in browsers which <b>hidden</b> property gets overridden.</>}\r\n                    style={{ marginTop: '20px' }}\r\n                />\r\n            </SectionWithCode>\r\n        </>\r\n    );\r\n}","import React, { useEffect } from 'react';\r\nimport Dragger from 'draggerjs'\r\nimport { SectionWithCode } from 'Templates';\r\nimport * as code from '../StringCodes'; \r\n\r\nexport const GettingStarted = () => {\r\n    \r\n    useEffect(() => {\r\n        const dragger = new Dragger('#drag-getting-started', {\r\n            draggable: '.draggable-box'\r\n        })\r\n        dragger.on('dragstart', (e) => { \r\n            const target = e.target\r\n            if(e.isDraggableElement) {\r\n                // prevent mobile from scrolling\r\n                // when dragging draggable element\r\n                e.preventDefault()\r\n                target.classList.add('grabbed')\r\n                if(target.classList.contains('center')) {\r\n                    target.classList.remove('center')\r\n                }\r\n            }\r\n        })\r\n        dragger.on('dragend', (e) => {\r\n            if(e.isDraggableElement) {  \r\n                e.target.classList.remove('grabbed') \r\n            }\r\n        })\r\n        return () => dragger.destroy()\r\n    }, [])\r\n\r\n    return (\r\n        <>  \r\n            <SectionWithCode\r\n                readonly\r\n                title='Getting Started'\r\n                context='we are getting started using draggerjs.'\r\n                code={code.GettingStarted}\r\n            >\r\n                <div className=\"drag-container\" id=\"drag-getting-started\"  data-example>  \r\n                    <div className=\"drag-around n-border-color\">\r\n                        <div className=\"draggable-box center n-flat\">\r\n                            <h1>Drag Me</h1>\r\n                        </div> \r\n                    </div>\r\n                </div>\r\n            </SectionWithCode>\r\n        </>\r\n    );\r\n}","import React, { useEffect } from 'react';\r\nimport Dragger from 'draggerjs'\r\nimport { SectionWithCode } from 'Templates';\r\nimport * as code from '../StringCodes'; \r\n\r\nexport const RawDrag = () => {\r\n    \r\n    useEffect(() => {\r\n        let cleanUp\r\n        let isComplete = false \r\n        const target = document.querySelector('.drag-drawer-content')\r\n        \r\n        const dragger = new Dragger('#drag-raw-drag')\r\n        dragger.on('dragstart', (e) => { \r\n            if(target === e.target) {\r\n                e.target.nodeName !== 'A' && e.preventDefault()\r\n                target.style.left = (isComplete ? 0 : -target.clientWidth) + 'px'\r\n                target.classList.remove('draw-transition')  \r\n                clearTimeout(cleanUp)\r\n            }\r\n        })\r\n        dragger.on('dragmove', (e) => {    \r\n            if(target === e.target) {\r\n                const width = target.clientWidth  \r\n                const distance = (isComplete ? e.moveX - e.startX : (e.moveX - e.startX) - width)\r\n                target.style.left = (0 > distance ? -width > distance ? -width : distance : 0) + 'px' \r\n            }\r\n        }) \r\n        dragger.on('dragend', (e) => { \r\n            if(target === e.target) {\r\n                const width = target.clientWidth \r\n                const distance = isComplete ? (e.endX - e.startX) + width :  e.endX - e.startX \r\n                if(distance > target.clientWidth/2) {\r\n                    target.classList.add('draw-full')\r\n                    isComplete = true\r\n                } else {  \r\n                    target.classList.remove('draw-full') \r\n                    isComplete = false\r\n                }\r\n                target.style.left = null\r\n                target.classList.add('draw-transition') \r\n                cleanUp = setTimeout(() => {\r\n                    target.classList.remove('draw-transition')\r\n                }, 300) \r\n            }\r\n        })\r\n        return () => {\r\n            clearTimeout(cleanUp)\r\n            dragger.destroy()\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>  \r\n            <SectionWithCode\r\n                readonly\r\n                title='Raw Draggable'\r\n                context='you can create with your own drag mechanics.'\r\n                code={code.RawDrag}\r\n            >\r\n                <div className=\"drag-drawer n-bordered\" id=\"drag-raw-drag\" data-example>  \r\n                    <div className=\"drag-drawer-content n-no-shadow n-engrave\" > \r\n                        <nav className=\"n-nav n-nav-flat n-nav-column\" onClick={(e) => e.preventDefault()}>\r\n                            <a className=\"n-nav-link\" href=\"#\">link-1</a>\r\n                            <a className=\"n-nav-link\" href=\"#\">link-2</a>\r\n                            <a className=\"n-nav-link\" href=\"#\">link-3</a>\r\n                        </nav> \r\n                    </div>\r\n                </div>\r\n            </SectionWithCode>\r\n        </>\r\n    );\r\n}","import React, { useEffect } from 'react';\r\nimport Dragger from 'draggerjs'\r\nimport { SectionWithCode, Note } from 'Templates';\r\nimport * as code from '../StringCodes'; \r\n\r\nexport const Switching = () => {\r\n\r\n    useEffect(() => {\r\n        let clone\r\n        const switchingAlgorithm = (e, elementToInsert) => {\r\n            const droppable = e.droppable && e.droppable.closest('.switching-box')\r\n            const currentDroppable = e.currentDroppable  \r\n            if(droppable && currentDroppable \r\n                && droppable !== elementToInsert \r\n                && droppable !== currentDroppable) {\r\n\r\n                const droppableRect = droppable.getBoundingClientRect()\r\n                const isFirstChild = currentDroppable.firstElementChild === droppable\r\n                const isLastChild = currentDroppable.lastElementChild === droppable\r\n                const divident = isFirstChild ? 0 : isLastChild ? droppableRect.height : 2\r\n                /*the clone positioning is base on y axis*/\r\n                const isBefore = e.clientY - droppableRect.top < droppableRect.height/divident\r\n                const next = droppable.nextElementSibling\r\n                if(!next && !isBefore) {\r\n                    currentDroppable.appendChild(elementToInsert)\r\n                }\r\n                currentDroppable.insertBefore(elementToInsert, isBefore ? droppable : next )\r\n            }\r\n        }\r\n\r\n        const dragger = new Dragger('.switching-area', {\r\n            draggable: '.switching-box',\r\n            droppable: '.switching-area',\r\n            axis: 'y',\r\n        })\r\n        \r\n        dragger.on('dragstart', (e) => {\r\n            const target = e.target\r\n            if(e.isDraggableElement) {\r\n                e.preventDefault() \r\n                clone && clone.remove()\r\n                clone = target.cloneNode(true)\r\n                clone.classList.add('drag-clone')\r\n                clone.classList.remove('n-flat-low')\r\n                target.closest('.switching-area').insertBefore(clone, e.target )\r\n                target.classList.add('grabbed')\r\n                target.classList.add('n-float-low')\r\n                target.classList.remove('n-flat-low')  \r\n            }\r\n           \r\n        })\r\n        dragger.on('dragover', (e) => { \r\n            switchingAlgorithm(e, clone)\r\n        })  \r\n        dragger.on('drop', (e) => {\r\n            const target = e.target  \r\n            if(e.isDraggableElement) {  \r\n                switchingAlgorithm(e, target) \r\n            } \r\n        })\r\n        dragger.on('dragend', (e) => {\r\n            const target = e.target\r\n            if(e.isDraggableElement) { \r\n                clone.remove()\r\n                Array.from(e.container.children)\r\n                    .forEach((each, i) => each.dataset.index = i + 1)\r\n                setTimeout(() => {\r\n                    target.classList.add('n-flat')\r\n                    target.classList.remove('n-float')\r\n                    target.classList.remove('grabbed')\r\n                }, 0)\r\n            }\r\n        })\r\n        return () => dragger.destroy()\r\n    }, [])\r\n\r\n    return (\r\n        <>  \r\n            <SectionWithCode\r\n                readonly\r\n                title='Switching'\r\n                context='you can do switching as well.'\r\n                code={code.Switching}\r\n            >  \r\n                <ul className=\"switching-area\" data-example>\r\n                    <li className=\"switching-box n-no-shadow n-flat-low\" data-index=\"1\">\r\n                        <h5>Apple</h5>\r\n                    </li>\r\n                    <li className=\"switching-box n-no-shadow n-flat-low\" data-index=\"2\">\r\n                        <h5>Peach</h5>\r\n                    </li> \r\n                    <li className=\"switching-box n-no-shadow n-flat-low\" data-index=\"3\">\r\n                        <h5>Orange</h5>\r\n                    </li>\r\n                    <li className=\"switching-box n-no-shadow n-flat-low\" data-index=\"4\">\r\n                        <h5>Grapes</h5>\r\n                    </li>\r\n                    <li className=\"switching-box n-no-shadow n-flat-low\" data-index=\"5\">\r\n                        <h5>Banana</h5>\r\n                    </li>\r\n                </ul>  \r\n                <Note\r\n                    variant='warning'\r\n                    title='remember'\r\n                    context={<>When using <b>droppable</b> make sure to add <b>[hidden] {'{'} display: none !important; {'}'}</b> in your stylesheet. due to some changes in browsers which <b>hidden</b> property gets overridden.</>}\r\n                    style={{ marginTop: '20px' }}\r\n                />\r\n            </SectionWithCode>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { Section, Table } from 'Templates';\r\n\r\nconst DraggerRows = [\r\n\t{\r\n\t\tname: 'new Dragger(',\r\n\t\ttype: '',\r\n\t\tdefault: '',\r\n\t\tdescription: '',\r\n\t},\r\n\t{\r\n\t\tname: 'container,',\r\n\t\ttype: 'string | element | node',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is the container or the playground of the Dragger.',\r\n\t},\r\n\t{\r\n\t\tname: 'options',\r\n\t\ttype: 'object',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'It is the options of the Dragger.',\r\n\t\tdata: [\r\n\t\t\t{\r\n\t\t\t\tname: '{',\r\n\t\t\t\ttype: '',\r\n\t\t\t\tdefault: '',\r\n\t\t\t\tdescription: '',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'draggable,',\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: '-',\r\n\t\t\t\tdescription: 'it is the query selector of the element children of container which are allowed to be drag.',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'droppable,',\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: '-',\r\n\t\t\t\tdescription: 'it is the query selector of the element children of container which are allowed to be drop.',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'axis',\r\n\t\t\t\ttype: \"'x' | 'y'\",\r\n\t\t\t\tdefault: 'null',\r\n\t\t\t\tdescription: <>when you have <b>draggable</b>. you can limit its axis by x or y.</>,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'allowBoundContainer,',\r\n\t\t\t\ttype: 'boolean',\r\n\t\t\t\tdefault: 'true',\r\n\t\t\t\tdescription: 'it is use bound the draggable elements inside the container element.',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'allowExactDraggable,',\r\n\t\t\t\ttype: 'boolean',\r\n\t\t\t\tdefault: 'false',\r\n\t\t\t\tdescription: 'it is use to target the exact draggable element, when true even if you targeted the children of the draggable elements, it still will not move.',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'autoscroll,',\r\n\t\t\t\ttype: 'boolean',\r\n\t\t\t\tdefault: 'false',\r\n\t\t\t\tdescription: 'it is use to allow auto scroll in the container.',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'autoscrollSensitivity,',\r\n\t\t\t\ttype: 'number',\r\n\t\t\t\tdefault: '20',\r\n\t\t\t\tdescription: 'it is sensivity radius of the auto scroll when dragging in the container edge.',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'eventListenerOption',\r\n\t\t\t\ttype: 'boolean | object',\r\n\t\t\t\tdefault: 'false',\r\n\t\t\t\tdescription: 'you can set your own options in addEventListener.',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: '}',\r\n\t\t\t\ttype: '',\r\n\t\t\t\tdefault: '',\r\n\t\t\t\tdescription: '',\r\n\t\t\t},\r\n\t\t]\r\n\t}, \r\n\t{\r\n\t\tname: ')',\r\n\t\ttype: '',\r\n\t\tdefault: '',\r\n\t\tdescription: '',\r\n\t},\r\n];  \r\n\r\nconst EventTypes = [\r\n\t{\r\n\t\tname: 'dragstart',\r\n\t\ttype: '-',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it will be invoked when the user touch or click the container',\r\n\t},\r\n\t{\r\n\t\tname: 'dragmove',\r\n\t\ttype: '-',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it will be invoked when the user is dragging inside container',\r\n\t},\r\n\t{\r\n\t\tname: 'dragend',\r\n\t\ttype: '-',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it will be invoked when the user is drop the touch or click inside container',\r\n\t},\r\n\t{\r\n\t\tname: 'dragenter',\r\n\t\ttype: '-',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it will be invoked when the user drag entered the droppable element inside container',\r\n\t},\r\n\t{\r\n\t\tname: 'dragover',\r\n\t\ttype: '-',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it will be invoked when the user drag is moving in the droppable element inside container',\r\n\t},\r\n\t{\r\n\t\tname: 'dragexit',\r\n\t\ttype: '-',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it will be invoked when the user drag exited the droppable element inside container',\r\n\t},\r\n\t{\r\n\t\tname: 'drop',\r\n\t\ttype: '-',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it will be invoked when the user droped inside the droppable element',\r\n\t},\r\n]\r\n\r\nconst MethodRows = [\r\n\t{\r\n\t\tname: 'Instance.on',\r\n\t\ttype: 'void',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is the method to add Dragger event listener',\r\n\t\tdata: [\r\n\t\t\t{\r\n\t\t\t\tname: 'Instance.on(',\r\n\t\t\t\ttype: '',\r\n\t\t\t\tdefault: '',\r\n\t\t\t\tdescription: '',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'eventType',\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: '-',\r\n\t\t\t\tdescription: 'it is the type of event you want to add. the allowed type are the following dragstart, dragend, dragend, dragenter, dragexit and drop',\r\n\t\t\t\tdata: EventTypes\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'callback',\r\n\t\t\t\ttype: 'function',\r\n\t\t\t\tdefault: '-',\r\n\t\t\t\tdescription: 'it is the callback that will be invoke when the eventType is triggered.',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: '): void',\r\n\t\t\t\ttype: '',\r\n\t\t\t\tdefault: '',\r\n\t\t\t\tdescription: '',\r\n\t\t\t},\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: 'Instance.off',\r\n\t\ttype: 'void',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is the method to remove Dragger event listener',\r\n\t\tdata: [\r\n\t\t\t{\r\n\t\t\t\tname: 'Instance.off(',\r\n\t\t\t\ttype: '',\r\n\t\t\t\tdefault: '',\r\n\t\t\t\tdescription: '',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'eventType',\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: '-',\r\n\t\t\t\tdescription: 'it is the type of event you want to remove. the allowed type are the following dragstart, dragmove, dragend, dragenter, dragexit and drop',\r\n\t\t\t\tdata: EventTypes\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: '): void',\r\n\t\t\t\ttype: '',\r\n\t\t\t\tdefault: '',\r\n\t\t\t\tdescription: '',\r\n\t\t\t},\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: 'Instance.destroy',\r\n\t\ttype: 'void',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is use to destroy and kill the Dragger.',\r\n\t},\r\n]\r\n\r\nconst EventsRows = [ \r\n\t{\r\n\t\tname: 'type',\r\n\t\ttype: 'string',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is event type.',\r\n\t},\r\n\t{\r\n\t\tname: 'preventDefault',\r\n\t\ttype: 'method',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is use to prevent default.',\r\n\t},\r\n\t{\r\n\t\tname: 'stopPropagation',\r\n\t\ttype: 'method',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is use to stop the propagation.',\r\n\t},\r\n\t{\r\n\t\tname: 'originalEvent',\r\n\t\ttype: 'object',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is the original event',\r\n\t},\r\n\t{\r\n\t\tname: 'clientX',\r\n\t\ttype: 'number',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is the x position of the cursor in window',\r\n\t},\r\n\t{\r\n\t\tname: 'clientY',\r\n\t\ttype: 'number',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is the y position of the cursor in window',\r\n\t},\r\n\t{\r\n\t\tname: 'startX',\r\n\t\ttype: 'number',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is the start x position of the cursor in container.',\r\n\t},\r\n\t{\r\n\t\tname: 'startY',\r\n\t\ttype: 'number',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is the start y position of the cursor in container.',\r\n\t},\r\n\t{\r\n\t\tname: 'moveX',\r\n\t\ttype: 'number',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is the current x position of the cursor in container.',\r\n\t},\r\n\t{\r\n\t\tname: 'moveY',\r\n\t\ttype: 'number',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is the current y position of the cursor in container.',\r\n\t},\r\n\t{\r\n\t\tname: 'endX',\r\n\t\ttype: 'number',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is the end x position of the cursor in container.',\r\n\t},\r\n\t{\r\n\t\tname: 'endY',\r\n\t\ttype: 'number',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is the end y position of the cursor in container.',\r\n\t},\r\n\t{\r\n\t\tname: 'isDraggableElement',\r\n\t\ttype: 'boolean',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it indicates if the targeted element is draggable.',\r\n\t},\r\n\t{\r\n\t\tname: 'target',\r\n\t\ttype: 'element | node',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is the element which is targeted.',\r\n\t},\r\n\t{\r\n\t\tname: 'container',\r\n\t\ttype: 'element | node',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is the element container.',\r\n\t},\r\n\t{\r\n\t\tname: 'droppable (dragover, dragenter, drop)',\r\n\t\ttype: 'element | node',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is the element inside droppable container where the target is landed. it might be the children of the droppable container.',\r\n\t},\r\n\t{\r\n\t\tname: 'currentDroppable (dragover, dragenter, dragexit, drop)',\r\n\t\ttype: 'element | node',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is the droppable container element which you want to drop (dragenter), you fail to drop (dragexit) or you dropped (drop).',\r\n\t},\r\n]\r\n\r\nexport const Dragger = () => (\r\n\t<Section\r\n\t\ttitle='Dragger'>\r\n\t\t<Table.ForAPI nameLabel=\"Argument\" data={DraggerRows} />\r\n\t</Section>\r\n);\r\n\r\nexport const Methods = () => (\r\n\t<Section\r\n\t\ttitle='Dragger Methods'>\r\n\t\t<Table.ForAPI nameLabel=\"Method\" typeLabel=\"Return\" data={MethodRows} />\r\n\t</Section>\r\n);\r\n\r\nexport const EventProp = () => (\r\n\t<Section\r\n\t\ttitle='Event Properties'>\r\n\t\t<Table.ForAPI data={EventsRows} />\r\n\t</Section>\r\n);","import React from 'react'; \r\nimport { MainContainer, SidePanel, Article, HeadGear } from 'Templates';\r\nimport * as Section from './Sections';\r\nimport * as Table from './Tables';\r\n\r\nconst Draggerjs = () => { \r\n\tconst title = 'Draggerjs (not publish yet)';\r\n\tconst context = `is a pure vanila javascript without dependency which is use to drag and drop elements in easy and understabdable way.`;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<HeadGear>\r\n\t\t\t \t<HeadGear.Meta \r\n\t\t\t\t\ttitle={`${title} - Javascript Libraries | Mytabworks `}\r\n\t\t\t\t\tdescription={context}\r\n\t\t\t\t\timage='/images/icons/icon-512x512.png'\r\n\t\t\t\t/>\r\n\t\t\t</HeadGear>\r\n\t\t\t<MainContainer \r\n\t\t\t\ttitle={title}\r\n\t\t\t\tcontext={context}\r\n\t\t\t\tmain={<DraggerjsMain />}\r\n\t\t\t\tside={<DraggerjsSidePanel />}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nDraggerjs.propTypes = {}; \r\n\r\nconst DraggerjsMain = () => (\r\n\t<>\r\n\t\t<Section.Installation />\r\n\t\t<Section.Importing />\r\n\t\t<Section.GettingStarted /> \r\n\t\t<Section.Autoscroll />\r\n\t\t<Section.RawDrag />\r\n\t\t<Section.Droppable />\r\n\t\t<Section.Cloning />\r\n\t\t<Section.Switching />\r\n\t\t<Article title='API'>\r\n\t\t\t<Table.Dragger /> \r\n\t\t\t<Table.Methods /> \r\n\t\t\t<Table.EventProp />\r\n\t\t</Article>\r\n\t</>\r\n);\r\n\r\nconst DraggerjsSidePanel = () => {\r\n\tconst list = [\r\n\t\t{ label: 'Installation' },\r\n\t\t{ label: 'Imports' },\r\n\t\t{\r\n\t\t\tlabel: 'Getting Started',\r\n\t\t\tsub: [\r\n\t\t\t\t{ label: 'Autoscroll' },\r\n\t\t\t\t{ label: 'Raw Draggable' },\r\n\t\t\t\t{ label: 'Droppable' },\r\n\t\t\t\t{ label: 'Cloning' },\r\n\t\t\t\t{ label: 'Switching' },\r\n\t\t\t],\r\n\t\t},\r\n\t\t{\r\n\t\t\tlabel: 'API',\r\n\t\t\tsub: [\r\n\t\t\t\t{ label: 'Dragger' },\r\n\t\t\t\t{ label: 'Dragger Methods' },\r\n\t\t\t\t{ label: 'Event Properties' },\r\n\t\t\t],\r\n\t\t},\r\n\t];\r\n\treturn <SidePanel.ScrollNav list={list} />;\r\n};\r\n\r\nexport default Draggerjs"],"sourceRoot":""}