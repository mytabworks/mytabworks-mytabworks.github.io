{"version":3,"sources":["Snippets/Redundancy/index.js","App/Main/Pages/React/Topics/Formydable/TourGuideSteps/IntroNotice.js","Components/validozer/validators.js","Components/validozer/messages.js","Components/validozer/utils.js","Components/validozer/index.js","Components/formydable/FormEvent.js","Components/formydable/FormHooks.js","Components/formydable/FormState.js","Components/donevent/index.js","Components/formydable/index.js","App/Main/Pages/React/Topics/Formydable/TourGuideSteps/index.js","Snippets/Gestures/index.js","App/Main/Pages/React/Topics/Formydable/TourGuideSteps sync /.js$","App/Main/Pages/React/Topics/Formydable/TourGuideSteps/AdvanceDesignPattern.js","Snippets/Redundancy sync /.js$","Snippets/Redundancy/ClickGesture.js","Snippets/Redundancy/HookShotChaperone.js","Snippets/Gestures sync /.js$","Snippets/Gestures/Arrow.js","Snippets/Gestures/index.module.css","App/Main/Pages/React/Topics/Formydable/TourGuideSteps/AliasedRegistry.js","App/Main/Pages/React/Topics/Formydable/TourGuideSteps/AliasedRuleParameters.js","App/Main/Pages/React/Topics/Formydable/TourGuideSteps/ControllableFields.js","App/Main/Pages/React/Topics/Formydable/TourGuideSteps/CustomizeMessages.js","App/Main/Pages/React/Topics/Formydable/TourGuideSteps/CustomizeRules.js","App/Main/Pages/React/Topics/Formydable/TourGuideSteps/FormUpdateWithDoneTypingEvent.js","App/Main/Pages/React/Topics/Formydable/TourGuideSteps/GettingStarted.js","App/Main/Pages/React/Topics/Formydable/TourGuideSteps/SubmittingForm.js","App/Main/Pages/React/Topics/Formydable/TourGuideSteps/UpdatingRulesMessages.js","App/Main/Pages/React/Topics/Formydable/StringCodes.js","Components/myt-react-notify/dom-utils.js","Components/myt-react-notify/Render.js","Components/myt-react-notify/index.js","App/Main/Pages/React/Topics/Formydable/ActualExampleCodes.js","App/Main/Pages/React/Topics/Formydable/TourGuides.js","App/Main/Pages/React/Topics/Formydable/Sections.js","App/Main/Pages/React/Topics/Formydable/Tables.js","App/Main/Pages/React/Topics/Formydable/index.js"],"names":["req","require","modules","keys","map","module","exports","reduce","result","current","Object","r","key","IntroNotice","message","style","textAlign","persistent","placement","offset","zIndex","src","alt","width","height","display","validators","alpha","regexp","exe","received","length","this","test","numeric","email","max","parameter","parseInt","Array","isArray","min","required","mimes","from","every","file","filename","name","split","includes","toLowerCase","alpha_space","alpha_slug","alpha_dash","alpha_num","url","max_size","some","value","size","min_size","required_if","parameter_value","other_value","data","val","RegExp","trim","same","messages","string","array","is","a","toString","Validator","rules","isFail","label","validate","isInvalid","filter","Map","extension","Error","forEach","extname","validator","assign","attribute","catch_name","catch_param","catch_value","validation","param","TypeError","allowMessageEvenValid","messageFromstack","replace","alias","failedIn","FormEvent","form","statuses","reset","formstatuses","target","correction","autoscroll","root","document","documentElement","rootTop","scrollTop","errorTop","error","querySelector","Math","getBoundingClientRect","top","callback","field","aliasOf","endsWith","push","paramArray","res","substr","FormData","FormContext","createContext","useFormSupplier","useContext","formUpdater","schema","files","selectedOptions","type","querySelectorAll","element","checked","box","multiple","updateState","isValidated","findOrCreate","state","immutableSchema","originalSchema","resetSchema","useForm","defaultSchema","useState","setSchema","formState","get","formUpdate","useFormWhenMount","useEffect","handlerSubmit","onSubmit","event","isSubmit","preventDefault","updatedSchema","formevent","originalEvent","formSubmit","formRegistry","FormStateProvider","children","Provider","defaultProps","DoneTypingEvent","timeoutReference","ms","withKeyboardCB","typingEventHandlerForChildren","keyCode","which","isInputBlurOrPressEnter","nodeName","typeIsKeyUpUnlessItIsBackspace","FakeEvent","clearTimeout","undefined","setTimeout","onBlur","onKeyUp","onKeyPress","webpackContext","id","webpackContextResolve","__webpack_require__","o","e","code","resolve","AdvanceDesignPattern","find","findByText","to","HookShotChaperone","isDoneOnClick","gesture","background","backdropStyle","opacity","highlightStyle","backgroundColor","ClickGesture","className","tr","gestureStyle","Arrow","targetRef","ref","React","createRef","lineref","reference","line","fi","f","t","targetRect","fromRect","toRect","isUpward","defaultpos","y","x","left","topos","linepath","abs","pythagorasTheorem","css","transition","transform","timeout","angle","arrowGesture","ship","arrowPath","anchor","AliasedRegistry","AliasedRuleParameters","allowNext","allowNextOnClick","isDone","ControllableFields","padding","margin","CustomizeMessages","onNext","localStorage","getItem","setItem","CustomizeRules","variant","color","navigation","allowNextOnType","FormUpdateWithDoneTypingEvent","GettingStarted","onDone","SubmittingForm","UpdatingRulesMessages","CustomRulesCode","basic","intermidiate","advance","container","createElement","body","appendChild","collection","uid","range","unid","i","floor","random","Render","Component","init_placement","props","ComponentContainerName","placementContainer","hasId","cancel","template","delay","timing","notify","cloneElement","pContainerName","plcontainer","getElementById","render","onExit","onExiting","onExited","allowRef","tstyle","offsetHeight","animation","marginTop","each","Notification","initialX","title","dismissible","setState","time","setTime","onTouchStart","touches","clientX","onTouchEnd","changedTouches","onClick","in","suffix","onEntered","MockSubmit","isReady","MockRequest","method","headers","json","then","response","Alerto","locateFailed","FormWrapper","formSubmitHandler","InputWithRules","placeholder","fieldstate","validity","htmlFor","onChange","role","aria-label","InputDoneTypingWithRules","handleDoneTyping","stringifyObject","index","lastModified","Promise","show","currentProp","currentId","Steps","nextToIndex","backToIndex","steps","commonChaperoneSetting","hideEvidence","neumorphism","onLoad","text","dialog","textContent","SpeechSynthesis","speak","onUnLoad","GettingStartedChaperoneSetting","AdvanceChaperoneSetting","Installation","readonly","language","theme","plain","styles","Importing","propertyMutation","TourGuides","triggerId","context","scope","marginBottom","triggerIndex","ActualCode","Alert","StringCode","Issues","Rules","DoneTypingEventRows","default","description","ruleMessage","rulesExtendRows","rulesUpdateMessageRows","Redundant","useFormRows","FormSupplierRows","useFormSupplierRows","ForAPI","rulesExtend","rulesUpdateMessage","FormSupplier","FormydableMain","FormydableSidePanel","ScrollNav","list","sub","Formydable","Meta","slice","image","main","side"],"mappings":"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","file":"static/js/4.515cba2a.chunk.js","sourcesContent":["const req = require.context('./', true, /.js$/);\r\n\r\nconst modules = req.keys().map(req);\r\n\r\nmodule.exports = modules.reduce((result, current) => {\r\n\tconst keys = Object.keys(current);\r\n\treturn keys.reduce((r, key) => {\r\n\t\tr[key] = current[key];\r\n\t\treturn r;\r\n\t}, result);\r\n}, {});\r\n","import React from 'react';\r\nimport Tooltip from 'Snippets/Tooltip';\r\n\r\nexport const IntroNotice = ({ message = 1 }) => (\r\n\t<div style={{ textAlign: 'center' }}>\r\n\t\t<Tooltip\r\n\t\t\tpersistent\r\n\t\t\tplacement='left-top'\r\n\t\t\toffset={[45]}\r\n\t\t\tmessage={\r\n\t\t\t\tmessage === 2 ? (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\tYow, if you haven't check the help in <b>Getting Started</b> yet.\r\n\t\t\t\t\t\tYou will lost in this one.\r\n\t\t\t\t\t</>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\tHi, if you haven't check the guide in <b>Advance Design Pattern</b>{' '}\r\n\t\t\t\t\t\tyet. You will lost in this one.\r\n\t\t\t\t\t</>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\tstyle={{ zIndex: 1000000 }}>\r\n\t\t\t<img\r\n\t\t\t\tsrc='/images/icons/icon-72x72.png'\r\n\t\t\t\talt='beard guy'\r\n\t\t\t\twidth='60px'\r\n\t\t\t\theight='60px'\r\n\t\t\t\tstyle={{ display: 'inline-block' }}\r\n\t\t\t/>\r\n\t\t</Tooltip>\r\n\t</div>\r\n);\r\n","const validators = {\r\n    alpha: {\r\n        regexp: /^[A-Za-z]+$/,\r\n        exe({received}) {\r\n            return received.length && !this.regexp.test(received);\r\n        },\r\n    },\r\n\r\n    numeric: {\r\n        regexp: /^\\d+$/,\r\n        exe({received}) {\r\n            return received.length && !this.regexp.test(received);\r\n        },\r\n    },\r\n\r\n    email: {\r\n        regexp: /^[\\w.]{2,40}@[\\w]{2,20}\\.[a-z]{2,3}(?:\\.[a-z]{2})?$/,\r\n        exe({received}) {\r\n            return received.length && !this.regexp.test(received);\r\n        },\r\n    },\r\n\r\n    max: {\r\n        exe({received, parameter}) {\r\n            const max = parseInt(parameter);\r\n\r\n            return !Array.isArray(received) && /^\\d+$/.test(received)\r\n                ? received && parseInt(received) > max\r\n                : received.length && received.length > max;\r\n        },\r\n    },\r\n\r\n    min: {\r\n        exe({received, parameter}) {\r\n            const min = parseInt(parameter);\r\n\r\n            return !Array.isArray(received) && /^\\d+$/.test(received)\r\n                ? received && parseInt(received) < min\r\n                : received.length && received.length < min;\r\n        },\r\n    },\r\n\r\n    required: {\r\n        exe({received}) {\r\n            return !received.length;\r\n        },\r\n    },\r\n\r\n    mimes: {\r\n        exe({received, parameter}) {\r\n            return !Array.from(received).every((file) => {\r\n                const filename = file.name.split('.');\r\n                return parameter.includes(filename[filename.length - 1].toLowerCase());\r\n            });\r\n        },\r\n    },\r\n    \r\n    alpha_space: {\r\n        regexp: /^[A-Za-z\\s]+$/,\r\n        exe({received}) {\r\n            return received.length && !this.regexp.test(received);\r\n        },\r\n    },\r\n\r\n    alpha_slug: {\r\n        regexp: /^[a-zA-Z\\d_]+$/,\r\n        exe({received}) {\r\n            return received.length && !this.regexp.test(received);\r\n        },\r\n    },\r\n\r\n    alpha_dash: {\r\n        regexp: /^[a-zA-Z\\d-]+$/,\r\n        exe({received}) {\r\n            return received.length && !this.regexp.test(received);\r\n        },\r\n    },\r\n\r\n    alpha_num: {\r\n        regexp: /^[a-zA-Z\\d]+$/,\r\n        exe({received}) {\r\n            return received.length && !this.regexp.test(received);\r\n        },\r\n    },\r\n\r\n    url: {\r\n        regexp: /^(?:https?:\\/\\/)?([a-z]{3}\\.)?([a-z]{3,20}\\.)?[\\w]{3,20}\\.[a-z]{2,3}(?:\\/.*)?$/,\r\n        exe({received}) {\r\n            return received.length && !this.regexp.test(received);\r\n        },\r\n    },\r\n\r\n    max_size: {\r\n        exe({received, parameter}) {\r\n            const max_size = parseInt(parameter);\r\n            return (\r\n                received.length &&\r\n                Array.from(received).some((value) => value.size / 1000 > max_size)\r\n            );\r\n        },\r\n    },\r\n\r\n    min_size: {\r\n        exe({received, parameter}) {\r\n            const min_size = parseInt(parameter);\r\n            return (\r\n                received.length &&\r\n                Array.from(received).some((value) => value.size / 1000 < min_size)\r\n            );\r\n        },\r\n    },\r\n\r\n    required_if: {\r\n        exe({received, parameter, parameter_value, data}) {\r\n            const other_value = data[parameter]\r\n            \r\n            if(Array.isArray(other_value)) {\r\n                return !received.length && other_value.some(\r\n                    (val) => new RegExp(`^${parameter_value.trim()}$`).test(val)\r\n                )\r\n            }\r\n            return (\r\n                !received.length && new RegExp(`^${parameter_value.trim()}$`).test(other_value)\r\n            );\r\n        },\r\n    },\r\n\r\n    same: {\r\n        exe({received, parameter, data}) { \r\n            return received.length && data[parameter] !== received;\r\n        },\r\n    },\r\n};\r\n\r\nexport default validators","const messages = {\r\n    alpha: 'The :attribute may only contain letters.',\r\n\r\n    numeric: 'The :attribute may only contain numbers.',\r\n\r\n    email: 'The :attribute must be a valid email.',\r\n\r\n    max: {\r\n        numeric: 'The :attribute may not be greater than :max.',\r\n        file: 'The :attribute may not be greater than :max files.',\r\n        string: 'The :attribute may not be greater than :max characters.',\r\n        array: 'The :attribute may not be greater than :max items.',\r\n    },\r\n\r\n    min: {\r\n        numeric: 'The :attribute must be atleast :min.',\r\n        file: 'The :attribute must be atleast :min files.',\r\n        string: 'The :attribute must be atleast :min characters.',\r\n        array: 'The :attribute must be atleast :min items.',\r\n    },\r\n\r\n    required: 'The :attribute field is required.',\r\n\r\n    mimes: 'The :attribute only allow :mimes.',\r\n    \r\n    alpha_space: 'The :attribute must contain letters with spaces.',\r\n\r\n    alpha_slug: 'The :attribute may only contain letters, numbers, and underscores.',\r\n\r\n    alpha_dash: 'The :attribute may only contain letters, numbers, and dashes.',\r\n\r\n    alpha_num: 'The :attribute may only contain letters and numbers.',\r\n\r\n    url: 'The :attribute must be a valid url.',\r\n\r\n    max_size: 'The :attribute may not be greater :max_size kilobytes.',\r\n\r\n    min_size: 'The :attribute must be atleast :min_size kilobytes.',\r\n\r\n    required_if: 'The :attribute field is required when :required_if is :value.',\r\n\r\n    same: 'The :attribute and :same must match.',\r\n};\r\n\r\nexport default messages","export const is = {\r\n    obj: (a) => !!a && a !== '[object Object]' && a.toString() === '[object Object]',\r\n    fnc: (a) => typeof a === 'function'\r\n}","import validators from './validators';\r\nimport messages from './messages';\r\nimport { is } from './utils';\r\nexport default class Validator {\r\n    data;\r\n    rules;\r\n    messages = [] \r\n\r\n    static rulesExtend(extension) {\r\n        if(!is.obj(extension)) {\r\n            throw new Error(`Invalid rule extention`);\r\n        }\r\n        Object.keys(extension).forEach((extname) => {\r\n            const { message, ...validator } = extension[extname]\r\n            if(!is.fnc(validator.exe)) {\r\n                throw new Error(`Invalid rule extention method \\`exe\\` is missing in rule \\`${extname}\\``);\r\n            }\r\n            Object.assign(messages, { [extname]: message });\r\n            Object.assign(validators, { [extname]: validator });\r\n        })\r\n    }\r\n    \r\n    static rulesUpdateMessage(name, message) {\r\n        if (!validators[name]) {\r\n            throw new Error(`\"${name}\" is not part of Validator rules`);\r\n        }\r\n        messages[name] =\r\n            is.obj(message) && ['min', 'max'].includes(name)\r\n                ? { ...messages[name], ...message }\r\n                : message;\r\n    }\r\n    \r\n    static validate(received, rules, attribute, data) {\r\n        const array_rules = rules.split('|');\r\n        let catch_name, catch_param, catch_value;\r\n        const isInvalid = array_rules.some((validation) => { \r\n            const [name, param, value] = validation.split(/:|=/);\r\n            catch_name = name;\r\n            catch_param = param;\r\n            catch_value = value;\r\n            if (!validators[name])\r\n                throw new TypeError(\r\n                    `Validator does not recognize rule \\`${name}\\` in \\`${attribute}\\``\r\n                ); \r\n\r\n            return validators[name].exe({ \r\n                received, \r\n                data,\r\n                parameter: param && param.split('@')[0],\r\n                parameter_value: value && value.split('@')[0],\r\n            })\r\n        });\r\n    \r\n        if (isInvalid || validators[catch_name].allowMessageEvenValid) {\r\n            let messageFromstack = messages[catch_name] || validators[catch_name].message || `The :attribute is ${catch_name}`;\r\n            let message;\r\n            if (messageFromstack.toString() === '[object Object]') {\r\n                if (!Array.isArray(received) && /^\\d+$/.test(received)) {\r\n                    messageFromstack = messageFromstack.numeric;\r\n                } else if (typeof received === 'string') {\r\n                    messageFromstack = messageFromstack.string;\r\n                } else if (Array.isArray(received)) {\r\n                    messageFromstack = messageFromstack.array;\r\n                } else {\r\n                    messageFromstack = messageFromstack.file;\r\n                }\r\n            }\r\n    \r\n            message = messageFromstack.replace(':attribute', attribute);\r\n    \r\n            if (catch_param) {\r\n                if (catch_param.includes('@')) {\r\n                    const [, alias] = catch_param.split('@');\r\n                    catch_param = alias;\r\n                }\r\n                message = message.replace(\r\n                    `:${catch_name}`,\r\n                    (catch_param || '').replace(/,/g, ', ')\r\n                );\r\n            }\r\n    \r\n            if (catch_value) {\r\n                if (catch_value.includes('@')) {\r\n                    const [, alias] = catch_value.split('@');\r\n                    catch_value = alias;\r\n                }\r\n                message = message.replace(':value', catch_value);\r\n            }\r\n    \r\n            return {\r\n                isInvalid,\r\n                message,\r\n                failedIn: isInvalid ? catch_name : null,\r\n            };\r\n        }\r\n    \r\n        return { isInvalid, failedIn: null };\r\n    }\r\n\r\n    make(data, rules) {\r\n        this.data = data\r\n        this.rules = rules\r\n        return this\r\n    }\r\n\r\n    fails() {\r\n        let isFail = false;\r\n\r\n        this.messages = Object.keys(this.rules)\r\n            .map((name) => {\r\n                const { rules, label } = this.rules[name];\r\n                const validate = Validator.validate(\r\n                    this.data[name],\r\n                    rules,\r\n                    label || name,\r\n                    this.data\r\n                );\r\n                if (validate.isInvalid && !isFail) {\r\n                    isFail = true;\r\n                }\r\n                return [name, validate.message];\r\n            })\r\n            .filter(([, message]) => !!message);\r\n\r\n        return isFail;\r\n    }\r\n\r\n    errors() {\r\n        return new Map(this.messages);\r\n    }\r\n}\r\n","export class FormEvent {\r\n\r\n\ttarget;\r\n\r\n\tformstatuses = {};\r\n\r\n\treset;\r\n\r\n\tconstructor(form, statuses, reset) {\r\n\t\tthis.formstatuses = statuses;\r\n\t\tthis.target = form;\r\n\t\tthis.reset = reset;\r\n\t}\r\n\r\n\tlocateFailed(correction = 40, autoscroll = true) {\r\n\t\tconst root = document.documentElement;\r\n\t\tconst rootTop = root.scrollTop;\r\n\t\tconst errorTop = Object.keys(this.formstatuses).reduce(\r\n\t\t\t(result, current) => {\r\n\t\t\t\tif (!this.formstatuses[current].isInvalid) return result;\r\n\t\t\t\tconst error = this.target.querySelector(\r\n\t\t\t\t\t`[name=\"${current}\"], [data-alias=\"${current}\"]`\r\n\t\t\t\t);\r\n\r\n\t\t\t\treturn Math.min(\r\n\t\t\t\t\troot.scrollTop + ((error && error.getBoundingClientRect().top) || 0),\r\n\t\t\t\t\tresult\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\trootTop\r\n\t\t);\r\n\r\n\t\tif (errorTop === rootTop) return rootTop;\r\n\r\n\t\treturn autoscroll\r\n\t\t\t? (root.scrollTop = errorTop - correction)\r\n\t\t\t: errorTop - correction;\r\n\t}\r\n\r\n\tisReady() {\r\n\t\tconst form = this.formstatuses;\r\n\r\n\t\treturn Object.keys(form).every((name) => !form[name].isInvalid);\r\n\t}\r\n\r\n\tforEach(callback) {\r\n\t\tconst form = this.formstatuses;\r\n\t\tObject.keys(form).forEach((field) =>\r\n\t\t\tcallback(form[field].value, form[field].aliasOf || field)\r\n\t\t);\r\n\t}\r\n\r\n\tjson() {\r\n\t\tconst result = {};\r\n\r\n\t\tthis.forEach((value, name) => {\r\n\t\t\tconst isArray = name.endsWith('[]');\r\n\t\t\tname = name.replace('[]', '');\r\n\t\t\tif (name in result) {\r\n\t\t\t\tif (Array.isArray(result[name])) {\r\n\t\t\t\t\tresult[name].push(value);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult[name] = [result[name], value];\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tresult[name] = isArray && !Array.isArray(value) ? [value] : value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tparamArray() {\r\n\t\tconst result = [];\r\n\r\n\t\tthis.forEach((value, name) => result.push({ name, value }));\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tparam() {\r\n\t\treturn this.paramArray()\r\n\t\t\t.reduce(\r\n\t\t\t\t(result, current) =>\r\n\t\t\t\t\t(result += Array.isArray(current.value)\r\n\t\t\t\t\t\t? current.value.reduce(\r\n\t\t\t\t\t\t\t\t(res, val) => (res += `&${current.name}=${val}`),\r\n\t\t\t\t\t\t\t\t''\r\n\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t: `&${current.name}=${current.value}`),\r\n\t\t\t\t''\r\n\t\t\t)\r\n\t\t\t.substr(1);\r\n\t}\r\n\r\n\tformData() {\r\n\t\treturn new FormData(this.target);\r\n\t}\r\n}\r\n","import { useState, useEffect, useContext, createContext } from 'react';\r\nimport Validator from 'validozer';\r\nimport { FormEvent } from './FormEvent';\r\n\r\nexport const FormContext = createContext(null);\r\n\r\nexport const useFormSupplier = () => {\r\n\treturn useContext(FormContext);\r\n};\r\n\r\nconst formUpdater = (schema, target, alias) => {\r\n\tlet { name, value, form, files, selectedOptions, type } = target;\r\n\r\n\tif (['checkbox', 'radio'].includes(type)) {\r\n\t\tvalue = Array.from(form.querySelectorAll(`[name=\"${name}\"]`))\r\n\t\t\t.filter((element) => element.checked)\r\n\t\t\t.map((box) => box.value);\r\n\t\tif (type === 'radio') {\r\n\t\t\tvalue = value[0];\r\n\t\t}\r\n\t}\r\n\r\n\tif (alias) {\r\n\t\tname = alias;\r\n\t}\r\n\r\n\tif (files) {\r\n\t\tvalue = files;\r\n\t}\r\n\r\n\tif (selectedOptions && target.multiple) {\r\n\t\tvalue = Array.from(selectedOptions);\r\n\t}\r\n\r\n\tif (!schema[name]) return schema;\r\n\r\n\tconst updateState = {\r\n\t\t...schema[name],\r\n\t\tisValidated: true,\r\n\t\tvalue,\r\n\t};\r\n\r\n\tconst { label, rules } = updateState;\r\n\r\n\tif (rules) {\r\n\t\tObject.assign(\r\n\t\t\tupdateState,\r\n\t\t\tValidator.validate(\r\n\t\t\t\tvalue, \r\n\t\t\t\trules, \r\n\t\t\t\tlabel || target.name, \r\n\t\t\t\tObject.keys(schema).reduce((result, key) => { \r\n\t\t\t\t\tresult[key] = schema[key].value\r\n\t\t\t\t\treturn result\r\n\t\t\t\t}, {})\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\treturn { ...schema, [name]: updateState };\r\n};\r\n\r\nconst findOrCreate = (state = {}) => ({\r\n\tvalue: '',\r\n\tisInvalid: false,\r\n\tisValidated: false,\r\n\tmessage: null,\r\n\taliasOf: null,\r\n\t...state,\r\n});\r\n\r\nconst immutableSchema = (originalSchema) => (\r\n\tObject.keys(originalSchema).reduce((result, name) => {\r\n\t\tresult[name] = {...originalSchema[name]}\r\n\t\treturn result;\r\n\t}, {})\r\n)\r\n\r\nconst resetSchema = (originalSchema) => (\r\n\tObject.keys(originalSchema).reduce((result, name) => {\r\n\t\tresult[name] = {\r\n\t\t\t...originalSchema[name],\r\n\t\t\tisInvalid: false,\r\n\t\t\tisValidated: false,\r\n\t\t\tmessage: null,\r\n\t\t\tvalue: '',\r\n\t\t} \r\n\t\treturn result;\r\n\t}, {})\r\n)\r\n\r\nexport const useForm = (defaultSchema = {}) => {\r\n\tconst [schema, setSchema] = useState(\r\n\t\tObject.keys(defaultSchema).reduce((result, name) => {\r\n\t\t\tresult[name] = {\r\n\t\t\t\tvalue: '',\r\n\t\t\t\t...defaultSchema[name],\r\n\t\t\t\tisInvalid: false,\r\n\t\t\t\tisValidated: false,\r\n\t\t\t\tmessage: null,\r\n\t\t\t\taliasOf: null,\r\n\t\t\t};\r\n\t\t\treturn result;\r\n\t\t}, {})\r\n\t);\r\n\r\n\tconst formState = (get) =>\r\n\t\ttypeof get === 'string'\r\n\t\t\t? findOrCreate(schema[get])\r\n\t\t\t: immutableSchema(schema) \r\n\r\n\tconst formUpdate = ({ target }, alias) => {\r\n\t\tsetSchema((state) => formUpdater(state, target, alias));\r\n\t};\r\n\r\n\tconst useFormWhenMount = ({\r\n\t\tname,\r\n\t\tlabel,\r\n\t\trules,\r\n\t\tvalue = '',\r\n\t\talias = null,\r\n\t}) => {\r\n\t\tuseEffect(() => {\r\n\t\t\t// if (!rules) return;\r\n\r\n\t\t\tsetSchema((state) => ({\r\n\t\t\t\t...state,\r\n\t\t\t\t[alias || name]: {\r\n\t\t\t\t\tlabel,\r\n\t\t\t\t\trules,\r\n\t\t\t\t\tisInvalid: false,\r\n\t\t\t\t\tisValidated: false,\r\n\t\t\t\t\tmessage: null,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\taliasOf: alias && name,\r\n\t\t\t\t},\r\n\t\t\t}));\r\n\r\n\t\t\treturn () => {\r\n\t\t\t\tsetSchema((state) => {\r\n\t\t\t\t\tdelete state[alias || name];\r\n\t\t\t\t\treturn { ...state };\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t}, [name, label, rules, value, alias]);\r\n\t};\r\n\r\n\tconst handlerSubmit = (onSubmit) => {\r\n\t\treturn (event) => {\r\n\t\t\tconst isSubmit = event.type === 'submit'\r\n\t\t\tisSubmit && event.preventDefault();\r\n\t\t\tconst target = event.target;  \r\n\t\t\tconst updatedSchema = Object.keys(schema).reduce((result, name) => {\r\n\t\t\t\treturn target\r\n\t\t\t\t\t? formUpdater(result, { name, value: result[name].value })\r\n\t\t\t\t\t: result;\r\n\t\t\t}, immutableSchema(schema));\r\n\r\n\t\t\tsetSchema(updatedSchema);\r\n\r\n\t\t\tconst reset = () => {\r\n\t\t\t\tsetSchema(resetSchema(updatedSchema));\r\n\t\t\t\tisSubmit && target.reset();\r\n\t\t\t};\r\n\r\n\t\t\tconst formevent = new FormEvent(target, immutableSchema(updatedSchema), reset);\r\n\t\t\tformevent.type = event.type\r\n\t\t\tformevent.originalEvent = event\r\n\t\t\ttypeof onSubmit === 'function' && onSubmit(formevent);\r\n\t\t};\r\n\t};\r\n\r\n\treturn {\r\n\t\tformState,\r\n\t\tformUpdate,\r\n\t\tformSubmit: handlerSubmit,\r\n\t\tformRegistry: useFormWhenMount,\r\n\t};\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FormContext } from './FormHooks';\r\n\r\nconst formPropTypes = {\r\n\tvalue: PropTypes.exact({\r\n\t\tformState: PropTypes.func,\r\n\t\tformUpdate: PropTypes.func,\r\n\t\tformRegistry: PropTypes.func,\r\n\t}).isRequired,\r\n\tchildren: PropTypes.element.isRequired,\r\n};\r\n\r\nconst formDefaultProps = {};\r\n\r\nconst FormStateProvider = ({ value, children }) => {\r\n\treturn <FormContext.Provider value={value}>{children}</FormContext.Provider>;\r\n};\r\n\r\nFormStateProvider.propTypes = formPropTypes;\r\nFormStateProvider.defaultProps = formDefaultProps;\r\n\r\nexport default FormStateProvider;\r\n","const DoneTypingEvent = (callback, ms = 700, withKeyboardCB) => {\r\n    let timeoutReference;\r\n\r\n    const typingEventHandlerForChildren = (event) => {\r\n        const { type, keyCode, target, which } = event;\r\n        const isInputBlurOrPressEnter =\r\n            type === 'blur' ||\r\n            (target.nodeName !== 'TEXTAREA' && (keyCode === 13 || which === 13));\r\n        const typeIsKeyUpUnlessItIsBackspace = type === 'keyup' && keyCode !== 8;\r\n        const FakeEvent = { type, target, keyCode };\r\n        typeof withKeyboardCB === 'function' &&\r\n            type !== 'blur' &&\r\n            withKeyboardCB(event);\r\n\r\n        if (isInputBlurOrPressEnter) {\r\n            if (timeoutReference) {\r\n                clearTimeout(timeoutReference);\r\n                timeoutReference = undefined;\r\n            }\r\n            return callback(FakeEvent);\r\n        }\r\n\r\n        if (typeIsKeyUpUnlessItIsBackspace) return;\r\n\r\n        if (timeoutReference) clearTimeout(timeoutReference);\r\n\r\n        timeoutReference = setTimeout(() => {\r\n            callback(FakeEvent);\r\n            timeoutReference = undefined;\r\n        }, ms);\r\n    };\r\n\r\n    return {\r\n        onBlur: typingEventHandlerForChildren,\r\n        onKeyUp: typingEventHandlerForChildren,\r\n        onKeyPress: typingEventHandlerForChildren,\r\n    };\r\n};\r\n\r\nexport default DoneTypingEvent","export { default as FormSupplier } from './FormState';\r\nexport { useForm, useFormSupplier } from './FormHooks';\r\nexport { default as DoneTypingEvent } from 'donevent';\r\nexport { default as Validator } from 'validozer'; \r\n","const req = require.context('./', true, /.js$/);\r\n\r\nconst modules = req.keys().map(req);\r\n\r\nmodule.exports = modules.reduce((result, current) => {\r\n\tconst keys = Object.keys(current);\r\n\treturn keys.reduce((r, key) => {\r\n\t\tr[key] = current[key];\r\n\t\treturn r;\r\n\t}, result);\r\n}, {});\r\n","const req = require.context('./', true, /.js$/);\r\n\r\nconst modules = req.keys().map(req);\r\n\r\nmodule.exports = modules.reduce((result, current) => {\r\n\tconst keys = Object.keys(current);\r\n\treturn keys.reduce((r, key) => {\r\n\t\tr[key] = current[key];\r\n\t\treturn r;\r\n\t}, result);\r\n}, {});\r\n","var map = {\n\t\"./AdvanceDesignPattern.js\": 752,\n\t\"./AliasedRegistry.js\": 759,\n\t\"./AliasedRuleParameters.js\": 760,\n\t\"./ControllableFields.js\": 761,\n\t\"./CustomizeMessages.js\": 762,\n\t\"./CustomizeRules.js\": 763,\n\t\"./FormUpdateWithDoneTypingEvent.js\": 764,\n\t\"./GettingStarted.js\": 765,\n\t\"./IntroNotice.js\": 569,\n\t\"./SubmittingForm.js\": 766,\n\t\"./UpdatingRulesMessages.js\": 767,\n\t\"./index.js\": 640\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 751;","import React from 'react';\r\nimport { Link } from 'reaouter';\r\nimport { findByText } from 'Common/Utils';\r\nimport { HookShotChaperone, ClickGesture } from 'Snippets/Redundancy';\r\nexport const AdvanceDesignPattern = [ \r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tFor advance design pattern. We included from the <b>formydable</b>{' '}\r\n\t\t\t\t<b>import</b>, the <b>useFormSupplier</b> and <b>FormSupplier</b>...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:useFormSupplier')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tThen we create a container component that handles the form submission...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:FormWrapper')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tThis component must contain a property of <b>children</b> to render the\r\n\t\t\t\tform fields inside form and <b>onSubmit</b> to passed it on{' '}\r\n\t\t\t\t<b>formSubmit</b> to handle the submission...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:children')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tAs you observe the <b>useForm</b>. We didn't register a schema. But We\r\n\t\t\t\treturn the last and 4th function. the <b>formRegistry</b>...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:useForm')[2];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tBecause <b>formRegistry</b> will handle all the registry this time. but\r\n\t\t\t\thow? there are no form fields inside...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:formRegistry')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tHere is how... We will going to use the <b>FormSupplier</b> to supply\r\n\t\t\t\tthe 3 form fields important functions. Firstly, the <b>formState</b> to\r\n\t\t\t\tget fields state. Secondly, The <b>formUpdate</b> to handle changes. And\r\n\t\t\t\tlastly, The <b>formRegistry</b> to register the fields into the\r\n\t\t\t\tschema...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:FormSupplier')[2];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tAnd we will set those functions in value property of <b>FormSupplier</b>\r\n\t\t\t\t. so that later on, the children fields can get those functions using\r\n\t\t\t\tthe <b>useFormSupplier</b>\r\n\t\t\t\t...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:value')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tAnd don't forget to set <b>onSubmit</b> handler on the <b>form</b>. And\r\n\t\t\t\tthat's it for our container component...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:formSubmitHandler')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tAnd now, We will create a form field component that is related to our\r\n\t\t\t\tcontainer component...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:InputWithRules ')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tThis component is just a typical input field with a property of{' '}\r\n\t\t\t\t<b>type</b>, <b>id</b>, <b>name</b>, <b>value</b>, and{' '}\r\n\t\t\t\t<b>placeholder</b>. But since this component is reusable we will add{' '}\r\n\t\t\t\t<b>label</b> to set a label for both form registry and physical, And\r\n\t\t\t\tespecially don't forget the main attraction of this library, the{' '}\r\n\t\t\t\t<b>rules</b>...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:rules')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tNow we will get the functions supplied by <b>FormSupplier</b>. by using{' '}\r\n\t\t\t\t<b>useFormSupplier</b>\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:useFormSupplier')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tSince we already know the <b>formState</b> and <b>formUpdate</b> from\r\n\t\t\t\tthe earlier demos. what I want to emphasize is the <b>formRegistry</b>,\r\n\t\t\t\tbecause it is new to us...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:formRegistry')[2];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tUsing <b>formRegistry</b> you must passed an object that containing{' '}\r\n\t\t\t\t<b>name</b>, <b>label</b>, <b>value</b>, and <b>rules</b>. <b>name</b> which is the\r\n\t\t\t\tsame with the input's attribute name. it is use to identify it's state when using{' '}\r\n\t\t\t\t<b>formUpdate</b>. <b>label</b> which will be use for labeling error\r\n\t\t\t\tmessages. <b>value</b> which is use in controllable field to put default value in schema. \r\n\t\t\t\tAnd lastly the <b>rules</b>... you know what rules is for...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:rules')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tThen we will single fetch the field state by passing the <b>name</b> as\r\n\t\t\t\tidentifier on <b>formState</b>. so it will know which is which...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:formState')[3];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tIn <Link to=\"/neumorphism\" label=\"Neumorphism\" /> class <b>n-form-field</b>. You can set another class{' '}\r\n\t\t\t\t<b>n-form-invalid</b> to show the red border that signifies invalid. And\r\n\t\t\t\tclass <b>n-form-valid</b> which shows green border that is signifies\r\n\t\t\t\tvalid...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:validity')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tIn the statement we use field state property <b>isInvalid</b> to\r\n\t\t\t\tdetermine if it is invalid. Then, We will set a string <b>n-form-invalid</b>\r\n\t\t\t\t...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:isInvalid')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tOr else using field state property <b>isValidated</b> to determine if\r\n\t\t\t\tthe form field is already touched by the user or validated. Then, We\r\n\t\t\t\twill set a string <b>n-form-valid</b>. Otherwise it will set a empty\r\n\t\t\t\tstring...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:isValidated')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tThen we set the component properties in form field perspective places...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:n-form-field')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tAnd before I finish in our form field component(<b>InputWithRules</b>),\r\n\t\t\t\tI want you to know why I ignore the <b>type \"file\"</b> from the\r\n\t\t\t\tcirculation of controllable fields. it is because <b>type \"file\"</b>{' '}\r\n\t\t\t\tdefault value is not assignable...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:\"file\"')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tFinally, We will going to use our newly created components.{' '}\r\n\t\t\t\t<b>FormWrapper</b> and <b>InputWithRules</b>...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:FormWrapper')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tThen, We will going to assign our submit handler in container(\r\n\t\t\t\t<b>FormWrapper</b>) <b>onSubmit</b>...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:onSubmit')[3];\r\n\t\t},\r\n\t\t...HookShotChaperone({\r\n\t\t\ttarget: (target) => findByText(target, 'span:onSubmit')[3],\r\n\t\t\tfrom: (target) => findByText(target, 'span:MockSubmit')[1],\r\n\t\t\tto: (target) => findByText(target, 'span:MockSubmit')[0],\r\n\t\t}),\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tAnd then, We put our form field component(<b>InputWithRules</b>) inside\r\n\t\t\t\tcontainer(\r\n\t\t\t\t<b>FormWrapper</b>)...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:InputWithRules')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: <>Well done!! Let's try out the result!</>,\r\n\t\tfind: 'input',\r\n\t\tisDoneOnClick: true,\r\n\t\tgesture: <ClickGesture />,\r\n\t\tbackground: {\r\n\t\t\tbackdropStyle: { opacity: 1 },\r\n\t\t\thighlightStyle: { backgroundColor: 'rgba(255,255,255, 1)' },\r\n\t\t},\r\n\t},\r\n];\r\n\r\n// note if the there is not rules assign on formRegistry it will ignore it and will not register but it still do -\r\n// unessesary functionalites that is why i make a statement since it will be ignore\r\n","var map = {\n\t\"./ClickGesture.js\": 754,\n\t\"./HookShotChaperone.js\": 755,\n\t\"./index.js\": 567\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 753;","import React from 'react';\r\n\r\nexport const ClickGesture = () => (\r\n\t<div className='custom-click-gesture'>\r\n\t\t<i className='mytabworks hand-pointer' />\r\n\t</div>\r\n);\r\n","import React from 'react';\r\nimport { Arrow } from '../Gestures';\r\n\r\nexport const HookShotChaperone = ({ target, from, to, key = 0 }) => {\r\n\treturn {\r\n\t\tgesture: (tr) => (\r\n\t\t\t<Arrow key={key} target={tr} find={target} from={from} to={to} />\r\n\t\t),\r\n\t\tbackground: {\r\n\t\t\tbackdropStyle: { opacity: 0.3 },\r\n\t\t\thighlightStyle: { backgroundColor: 'rgba(255,255,255, 0.2)' },\r\n\t\t\tgestureStyle: { zIndex: '999998' },\r\n\t\t},\r\n\t};\r\n};\r\n","var map = {\n\t\"./Arrow.js\": 757,\n\t\"./index.js\": 641\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 756;","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { css, angle, pythagorasTheorem } from 'Common/Utils';\r\nimport style from './index.module.css';\r\n\r\nexport const Arrow = ({ target: targetRef, find, from, to }) => {\r\n\tconst ref = React.createRef();\r\n\tconst lineref = React.createRef();\r\n\tuseEffect(() => {\r\n\t\tconst reference = ref.current;\r\n\t\tconst target = targetRef.current;\r\n\t\tconst line = lineref.current;\r\n\t\tif (!(reference && target && line)) return;\r\n\t\tconst fi =\r\n\t\t\t(find &&\r\n\t\t\t\t(typeof find === 'function'\r\n\t\t\t\t\t? find(target)\r\n\t\t\t\t\t: target.querySelector(find))) ||\r\n\t\t\ttarget;\r\n\t\tconst f = from && from(target);\r\n\t\tconst t = to && to(target);\r\n\t\tconst targetRect = fi.getBoundingClientRect();\r\n\t\tconst fromRect = f.getBoundingClientRect();\r\n\t\tconst toRect = t.getBoundingClientRect();\r\n\t\tconst isUpward = fromRect.top > toRect.top;\r\n\r\n\t\tconst defaultpos = {\r\n\t\t\ty:\r\n\t\t\t\tfromRect.top -\r\n\t\t\t\t(fromRect.height > 20 ? -10 : fromRect.height / 2) -\r\n\t\t\t\ttargetRect.top,\r\n\t\t\tx:\r\n\t\t\t\tfromRect.left +\r\n\t\t\t\t(fromRect.width > 200 ? 0 : fromRect.width / 2) -\r\n\t\t\t\ttargetRect.left -\r\n\t\t\t\ttargetRect.width / 2,\r\n\t\t};\r\n\t\tconst topos = {\r\n\t\t\ty: toRect.top - toRect.height / 2 - targetRect.top,\r\n\t\t\tx:\r\n\t\t\t\ttoRect.left + toRect.width / 2 - targetRect.left - targetRect.width / 2,\r\n\t\t};\r\n\t\tconst linepath =\r\n\t\t\tMath.abs(pythagorasTheorem(defaultpos, topos)) +\r\n\t\t\t(isUpward ? toRect.height : 0);\r\n\t\tcss(reference, {\r\n\t\t\ttop: `${defaultpos.y}px`,\r\n\t\t\tleft: `${defaultpos.x}px`,\r\n\t\t\ttransition: 'transform 1s ease-out',\r\n\t\t\ttransform: `rotate(180deg)`,\r\n\t\t});\r\n\t\tcss(line, {\r\n\t\t\twidth: `${linepath}px`,\r\n\t\t});\r\n\t\tconst timeout = setTimeout(() => {\r\n\t\t\tcss(reference, {\r\n\t\t\t\ttransition:\r\n\t\t\t\t\t'transform 200ms ease-in, width 300ms cubic-bezier(0.82, 0.07, 0.61, 1.93) 100ms',\r\n\t\t\t\ttransform: `rotate(${angle(defaultpos, topos)}deg)`,\r\n\t\t\t\twidth: `${linepath}px`,\r\n\t\t\t});\r\n\t\t}, 1000);\r\n\t\treturn () => clearTimeout(timeout);\r\n\t}, [targetRef, from, to, ref, find, lineref]);\r\n\r\n\treturn (\r\n\t\t<div ref={ref} className={style.arrowGesture}>\r\n\t\t\t<i className={`mytabworks icon-ship ${style.ship}`} />\r\n\t\t\t<div ref={lineref} className={style.arrowPath}></div>\r\n\t\t\t<i className={`mytabworks icon-anchor ${style.anchor}`} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nArrow.propTypes = {\r\n\ttarget: PropTypes.any.isRequired,\r\n\tfind: PropTypes.func,\r\n\tfrom: PropTypes.func.isRequired,\r\n\tto: PropTypes.func.isRequired,\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"arrowGesture\":\"Gestures_arrowGesture__31Kuy\",\"arrowPath\":\"Gestures_arrowPath__3MMc5\",\"anchor\":\"Gestures_anchor__1q-58\",\"ship\":\"Gestures_ship__8pQ_-\"};","import React from 'react';\r\nimport { findByText } from 'Common/Utils';\r\nimport { IntroNotice } from './IntroNotice';\r\nimport { HookShotChaperone, ClickGesture } from 'Snippets/Redundancy';\r\n\r\nexport const AliasedRegistry = [\r\n\t{\r\n\t\tmessage: <IntroNotice />,\r\n\t\tfind: 'a[data-chaperone-trigger]',\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tIt is inevitable that some form fields are multiple with the same name\r\n\t\t\t\ton it. The problem is we wanted to add those new or other fields into\r\n\t\t\t\tform state registry. for that reason <b>formydable</b> use{' '}\r\n\t\t\t\t<b>alias registry</b> and make a counter measure about those stuffs.\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:InputMultiple')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tTo implement multiple input text field. You have to make a component\r\n\t\t\t\tthat handle the adding and removing of field...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:fields')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tFirstly, We have to register our component <b>props</b> to make a\r\n\t\t\t\tdefault first text field in our collection of fields...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:props')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tAll the fields that are going to be add, are sharing with the same\r\n\t\t\t\tproperties except the <b>alias</b>...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:alias')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tSince all our fields sharing the same name or properties. The alias will\r\n\t\t\t\tbe the key to keep the distinction of each field in the schema....\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:unique')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tTo render all collection of field that all have been registered in the{' '}\r\n\t\t\t\t<b>fields</b>. We have to use <b>map</b>...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:map')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tNow, We will go to our button label. If index is equal to <b>0</b>. It\r\n\t\t\t\twill be a adding button...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:btnLabel')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tWhen we are adding a field data from collection. We just spread the{' '}\r\n\t\t\t\t<b>props</b> and assign a alias to make it unique as identifier...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:props')[4];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tWhen we are removing field data from collection. We will use{' '}\r\n\t\t\t\t<b>alias</b> to identify which field will be remove...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:field')[4];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: <>Now, lets take a look on our map render...</>,\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:return')[2];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tSince we are inside <b>map</b> we have to put <b>key</b> property on\r\n\t\t\t\teach wrapper. We are going to use <b>alias</b> since it is our\r\n\t\t\t\tidentifier...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:key')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tNow, we are going to our field component(InputWithAliasRules) which\r\n\t\t\t\thandle the registration and changes of each field to the schema. We will\r\n\t\t\t\tget into that shortly...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:InputWithAliasRules')[0];\r\n\t\t},\r\n\t\t...HookShotChaperone({\r\n\t\t\ttarget: (target) => findByText(target, 'span:InputWithAliasRules')[0],\r\n\t\t\tfrom: (target) => findByText(target, 'span:InputWithAliasRules')[1],\r\n\t\t\tto: (target) => findByText(target, 'span:InputWithAliasRules')[0],\r\n\t\t}),\r\n\t},\r\n\t{\r\n\t\tmessage: <>Then, We will spread-assign all property of each field...</>,\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:field')[6];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tNow, When we go to our field component(InputWithAliasRules). We have the\r\n\t\t\t\taccess to all properties...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:type')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tThen, We get the <b>FormSupplier</b> value by using{' '}\r\n\t\t\t\t<b>useFormSupplier</b>...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:useFormSupplier')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tNow, to register with alias. All we just have to do is to put{' '}\r\n\t\t\t\t<b>alias</b> in the registry...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:formRegistry')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>Now, I will show you how we update our schema with alias registry...</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:formUpdate')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tBefore, we just directly put <b>formUpdate</b> on every onChange.\r\n\t\t\t\tbecause <b>formUpdate</b> depends solely on the input attribute{' '}\r\n\t\t\t\t<b>name</b> to know which field state to update. But now, we have to\r\n\t\t\t\taccess the second parameter, to directly tell <b>formUpdate</b>{' '}\r\n\t\t\t\twhich field state will be updated, and will not depend on the input\r\n\t\t\t\tattribute <b>name</b>. since we register the alias which will be the key\r\n\t\t\t\tto access it's state...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:handleFieldChange')[0];\r\n\t\t},\r\n\t\t...HookShotChaperone({\r\n\t\t\ttarget: (target) => findByText(target, 'span:handleFieldChange')[0],\r\n\t\t\tfrom: (target) => findByText(target, 'span:handleFieldChange')[1],\r\n\t\t\tto: (target) => findByText(target, 'span:handleFieldChange')[0],\r\n\t\t}),\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tFinally, We will use our component inside our container (\r\n\t\t\t\t<b>FormWrapper</b>). The one we created in <b>Advance Design Pattern</b>{' '}\r\n\t\t\t\tsection...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:InputMultiple')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: <>And That's all! Let's try out the result!</>,\r\n\t\tfind: 'input',\r\n\t\tisDoneOnClick: true,\r\n\t\tgesture: <ClickGesture />,\r\n\t\tbackground: {\r\n\t\t\tbackdropStyle: { opacity: 1 },\r\n\t\t\thighlightStyle: { backgroundColor: 'rgba(255,255,255, 1)' },\r\n\t\t},\r\n\t},\r\n];\r\n","import React from 'react';\r\nimport { findByText } from 'Common/Utils';\r\nimport { IntroNotice } from './IntroNotice';\r\nimport { ClickGesture } from 'Snippets/Redundancy';\r\n\r\nexport const AliasedRuleParameters = [\r\n\t{\r\n\t\tmessage: <IntroNotice />,\r\n\t\tfind: 'a[data-chaperone-trigger]',\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tAs you can see, We use only <b>FormWrapper</b> and <b>InputWithRules</b>{' '}\r\n\t\t\t\tfrom <b>Advance Design Pattern</b> section...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:FormWrapper')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tIn this example we use the <b>required_if</b> rule as an example because\r\n\t\t\t\tit has 2 parameters. The normal usage of rule with parameter is like the\r\n\t\t\t\trule below. The first parameter is the <b>gender</b> which is the{' '}\r\n\t\t\t\t<b>name</b> of target form field, And the second parameter is the <b>1</b>{' '}\r\n\t\t\t\twhich is the requirement value of the target. if ever the requirement\r\n\t\t\t\thas met and the field <b>gender</b> has a value of <b>1</b>, Then\r\n\t\t\t\tit will be required...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:required_if')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tbut remember when using <b>required_if</b> and <b>same</b> rules. the\r\n\t\t\t\ttarget field must be also registered to the schema even without rules related in it, to be able to check it's\r\n\t\t\t\tvalue...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:formRegistry')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tBut if we do that. The parameter we put on rule will be put on the\r\n\t\t\t\tfeedback...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn target.querySelector('button');\r\n\t\t},\r\n\t\tallowNext: false,\r\n\t\tallowNextOnClick: true,\r\n\t\tgesture: <ClickGesture />,\r\n\t\tbackground: {\r\n\t\t\tbackdropStyle: { opacity: 1 },\r\n\t\t\thighlightStyle: { backgroundColor: 'rgba(255,255,255, 1)' },\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tAs you read the message. the parameter we put on <b>required_if</b> is\r\n\t\t\t\tbeen put on the feedback which is vague for the users...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn target.querySelector('.n-invalid-feedback');\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tThat is why we need an alias which in the user's view will understand.\r\n\t\t\t\tAs you can see the rule below that we use symbol <b>@</b> to make an\r\n\t\t\t\talias, so that the <b>gender</b> will be replace to <b>Gender</b>{' '}\r\n\t\t\t\tand <b>1</b> will be replace into <b>Male</b> so that the user will\r\n\t\t\t\tunderstand the feedback...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:rules')[5];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: <>As a result the user will now understand!</>,\r\n\t\tisDone: true,\r\n\t\tfind(target) {\r\n\t\t\treturn target.querySelectorAll('.n-invalid-feedback')[1];\r\n\t\t},\r\n\t},\r\n];\r\n","import React from 'react';\r\nimport { findByText } from 'Common/Utils';\r\nimport { HookShotChaperone, ClickGesture } from 'Snippets/Redundancy';\r\nimport { IntroNotice } from './IntroNotice';\r\n\r\nexport const ControllableFields = [\r\n\t{\r\n\t\tmessage: <IntroNotice message={2} />,\r\n\t\tfind: 'a[data-chaperone-trigger]',\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tTo implement controllable form fields, you must put the field state property{' '}\r\n\t\t\t\t<b>value</b> in the form field attribute <b>value</b>...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:email')[4];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tBut firstly, I wanna stressed on how you can set a default value in the\r\n\t\t\t\tcirculation of the controllable fields...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:usernameDefault')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tYou can set a <b>value</b> in the schema to set a default\r\n\t\t\t\tvalue. but remember once you <b>submit</b> a form and <b>reset</b> it.\r\n\t\t\t\tit will neglect the schema after, because that is how <b>react</b> <b>useState</b>\r\n\t\t\t\t{' '}works. but if you want to update constantly the schema or the default value\r\n\t\t\t\tlike when you update some data, you can <b>unmount</b> the component(which you put the \r\n\t\t\t\t{' '}<b>useForm</b>) after submit then <b>mount</b> it again when you are about to update data...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:value')[0];\r\n\t\t},\r\n\t\t...HookShotChaperone({\r\n\t\t\ttarget(target) {\r\n\t\t\t\treturn findByText(target, 'span:value')[0];\r\n\t\t\t},\r\n\t\t\tfrom(target) {\r\n\t\t\t\treturn findByText(target, 'span:usernameDefault')[1];\r\n\t\t\t},\r\n\t\t\tto(target) {\r\n\t\t\t\treturn findByText(target, 'span:usernameDefault')[0];\r\n\t\t\t},\r\n\t\t}),\r\n\t}, \r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\t<div style={{ textAlign: 'center', padding: '20px 5px' }}>\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tsrc='/images/icons/icon-72x72.png'\r\n\t\t\t\t\t\talt='beard guy'\r\n\t\t\t\t\t\twidth='60px'\r\n\t\t\t\t\t\theight='60px'\r\n\t\t\t\t\t\tstyle={{ display: 'inline-block', margin: '0 auto' }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>That was quick! Let's try out the result!</div>\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind: 'input',\r\n\t\tisDoneOnClick: true,\r\n\t\tgesture: <ClickGesture />,\r\n\t\tbackground: {\r\n\t\t\tbackdropStyle: { opacity: 1 },\r\n\t\t\thighlightStyle: { backgroundColor: 'rgba(255,255,255, 1)' },\r\n\t\t},\r\n\t},\r\n];\r\n","import React from 'react';\r\nimport { findByText } from 'Common/Utils';\r\nimport { IntroNotice } from './IntroNotice';\r\nimport { ClickGesture } from 'Snippets/Redundancy';\r\n\r\nexport const CustomizeMessages = [\r\n\t{\r\n\t\tmessage: <IntroNotice message={2} />,\r\n\t\tfind: 'a[data-chaperone-trigger]',\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tFirstly, I wanna show you how to use <b>formSate</b> in single\r\n\t\t\t\tfetchingly...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:formState')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tAnd Secondly, before we go back to the topic. I wanna show you how to\r\n\t\t\t\tuse field state property <b>isValidated</b>. it will be fixed{' '}\r\n\t\t\t\t<b>true</b> if ever the user touched the form field, and it will be{' '}\r\n\t\t\t\t<b>false</b> again once the form is <b>reseted</b>...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:isValidated')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tLet'z back to the topic. as you can observe on first and second demo.\r\n\t\t\t\tEach rules has it's own <b>message model pattern</b> which is provided\r\n\t\t\t\twhen the specific rule has failed and it will be found in field state{' '}\r\n\t\t\t\tproperty <b>message</b>...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:required')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tIf ever you want to make your own messages on some specific rules, you\r\n\t\t\t\tcan always use field state property <b>failedIn</b> that will bring you\r\n\t\t\t\twhich rule has been failing. so you can make a simple statement to work\r\n\t\t\t\taround it. like below...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tonNext() {\r\n\t\t\tlocalStorage.getItem('f-cmes') || localStorage.setItem('f-cmes', 1);\r\n\t\t},\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:failedIn')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: <>That was quick! Let's try out the result!</>,\r\n\t\tfind: '.code-result textarea',\r\n\t\tisDoneOnClick: true,\r\n\t\tgesture: <ClickGesture />,\r\n\t\tbackground: {\r\n\t\t\tbackdropStyle: { opacity: 1 },\r\n\t\t\thighlightStyle: { backgroundColor: 'rgba(255,255,255, 1)' },\r\n\t\t},\r\n\t},\r\n];\r\n","import React from 'react';\r\nimport { findByText } from 'Common/Utils';\r\nimport Tooltip from 'Snippets/Tooltip';\r\nimport { IntroNotice } from './IntroNotice';\r\nimport { ClickGesture } from 'Snippets/Redundancy';\r\n\r\nexport const CustomizeRules = {\r\n\t'customize-rules-basic': [\r\n\t\t{\r\n\t\t\tmessage: <IntroNotice />,\r\n\t\t\tfind: 'a[data-chaperone-trigger]',\r\n\t\t},\r\n\t\t{\r\n\t\t\tmessage: (\r\n\t\t\t\t<>\r\n\t\t\t\t\tFirstly, We have to import <b>Validator</b> from <b>formydable</b>\r\n\t\t\t\t\t...\r\n\t\t\t\t</>\r\n\t\t\t),\r\n\t\t\tfind(target) {\r\n\t\t\t\treturn findByText(target, 'span:Validator')[0];\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tmessage: (\r\n\t\t\t\t<>\r\n\t\t\t\t\tAfter we import our <b>Validator</b>, We will make our first normal{' '}\r\n\t\t\t\t\t<b>rule</b>. We will name it <b>strong_password</b>...\r\n\t\t\t\t</>\r\n\t\t\t),\r\n\t\t\tfind(target) {\r\n\t\t\t\treturn findByText(target, 'span:strong_password')[0];\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tmessage: (\r\n\t\t\t\t<>\r\n\t\t\t\t\tAnd, Our rule must contain object that has a method of <b>exe</b>...\r\n\t\t\t\t</>\r\n\t\t\t),\r\n\t\t\tfind(target) {\r\n\t\t\t\treturn findByText(target, 'span:exe')[0];\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tmessage: (\r\n\t\t\t\t<>\r\n\t\t\t\t\tAnd a property of <b>message</b>...\r\n\t\t\t\t</>\r\n\t\t\t),\r\n\t\t\tfind(target) {\r\n\t\t\t\treturn findByText(target, 'span:message')[0];\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tmessage: (\r\n\t\t\t\t<>\r\n\t\t\t\t\tThe method of <b>exe</b> have a object parameter that contain 4\r\n\t\t\t\t\tproperties: received, data, parameter, and parameter_value. but it\r\n\t\t\t\t\tdepends on the rule you are making. But for now we focus on{' '}\r\n\t\t\t\t\t<b>received</b>...\r\n\t\t\t\t</>\r\n\t\t\t),\r\n\t\t\tfind(target) {\r\n\t\t\t\treturn findByText(target, 'span:exe')[0];\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tmessage: (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<b>received</b> is the <b>value</b> of the field which we recieved...\r\n\t\t\t\t</>\r\n\t\t\t),\r\n\t\t\tfind(target) {\r\n\t\t\t\treturn findByText(target, 'span:received')[0];\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tmessage: (\r\n\t\t\t\t<>\r\n\t\t\t\t\tThen we make some pattern of expression to test if the <b>received</b>{' '}\r\n\t\t\t\t\thas matched the pattern...\r\n\t\t\t\t</>\r\n\t\t\t),\r\n\t\t\tfind(target) {\r\n\t\t\t\treturn findByText(target, 'span:test')[0];\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tmessage: (\r\n\t\t\t\t<>\r\n\t\t\t\t\tThen, We <b>return</b> the result of the <b>testing</b>. The{' '}\r\n\t\t\t\t\t<b>mechanics</b> of <b>exe</b> is that, If the <b>testing</b> was{' '}\r\n\t\t\t\t\t<b>invalid</b>, Then we must <b>return</b> <b>true</b>. But if the{' '}\r\n\t\t\t\t\t<b>testing</b> was <b>valid</b>, Then we <b>return</b> <b>false</b>...\r\n\t\t\t\t</>\r\n\t\t\t),\r\n\t\t\tfind(target) {\r\n\t\t\t\treturn findByText(target, 'span:return')[0];\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tmessage: (\r\n\t\t\t\t<>\r\n\t\t\t\t\tAs you can observe on the <b>condition</b>. We put{' '}\r\n\t\t\t\t\t<b>received.length</b> which indicates that, this only have a chance\r\n\t\t\t\t\tto return <b>true</b>, If the <b>recieved</b> starting to have any\r\n\t\t\t\t\tvalue at all. So that we cannot interfer in the work of the rule{' '}\r\n\t\t\t\t\t<b>required</b>\r\n\t\t\t\t\t...\r\n\t\t\t\t</>\r\n\t\t\t),\r\n\t\t\tfind(target) {\r\n\t\t\t\treturn findByText(target, 'span:length')[0];\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tmessage: (\r\n\t\t\t\t<>\r\n\t\t\t\t\tWe put !(not) sign on the <b>test</b>. Because of our pattern. if the{' '}\r\n\t\t\t\t\t<b>received</b> matched the <b>regular expression</b> then it will\r\n\t\t\t\t\tbring us <b>true</b>. Except our mechanics in <b>exe</b> was that, we\r\n\t\t\t\t\tonly return <b>true</b> if the <b>recieved</b> is <b>invalid</b>. But\r\n\t\t\t\t\tit is still depends on your testing as long you follow the mechanics\r\n\t\t\t\t\twe are all good...\r\n\t\t\t\t</>\r\n\t\t\t),\r\n\t\t\tfind(target) {\r\n\t\t\t\treturn findByText(target, 'span:test')[2];\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tmessage: (\r\n\t\t\t\t<>\r\n\t\t\t\t\tThen, We will go on our property <b>message</b>. property{' '}\r\n\t\t\t\t\t<b>message</b> is a feedback message template for the user. also\r\n\t\t\t\t\tproperty <b>message</b> has{' '}\r\n\t\t\t\t\t<b>\r\n\t\t\t\t\t\t3{' '}\r\n\t\t\t\t\t\t<Tooltip\r\n\t\t\t\t\t\t\tvariant='dark'\r\n\t\t\t\t\t\t\toffset={[0, 10]}\r\n\t\t\t\t\t\t\tmessage={\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t<b>interpolation</b> is the insertion of something of a\r\n\t\t\t\t\t\t\t\t\tdifferent nature into something else.\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tstyle={{ zIndex: 1000000 }}>\r\n\t\t\t\t\t\t\t<span style={{ color: '#007bff' }}>interpolations</span>\r\n\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t</b>\r\n\t\t\t\t\t. but for the time being, we only focus on the <b>:attribute</b>. The{' '}\r\n\t\t\t\t\t<b>:attribute</b> will be the place where the <b>label</b>(we\r\n\t\t\t\t\tregistered on the schema) will be put on...\r\n\t\t\t\t</>\r\n\t\t\t),\r\n\t\t\tfind(target) {\r\n\t\t\t\treturn findByText(target, 'span:message')[0];\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tmessage: (\r\n\t\t\t\t<>\r\n\t\t\t\t\tThen, If we are all set we will put our rule(<b>strong_password</b>)\r\n\t\t\t\t\tin the <b>Validator</b> method <b>rulesExtend</b>...\r\n\t\t\t\t</>\r\n\t\t\t),\r\n\t\t\tfind(target) {\r\n\t\t\t\treturn findByText(target, 'span:rulesExtend')[0];\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tmessage: <>Now, Lets use our newly created rule...</>,\r\n\t\t\tfind(target) {\r\n\t\t\t\treturn findByText(target, 'span:strong_password')[2];\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tmessage: <>Then, Lets try it out...</>,\r\n\t\t\tfind: '[name=\"pass-strong\"]',\r\n\t\t\tgesture: <ClickGesture />,\r\n\t\t\tbackground: {\r\n\t\t\t\tbackdropStyle: { opacity: 1 },\r\n\t\t\t\thighlightStyle: { backgroundColor: 'rgba(255,255,255, 1)' },\r\n\t\t\t},\r\n\t\t\tallowNext: false,\r\n\t\t\tallowNextOnClick: true,\r\n\t\t\tnavigation: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tmessage: <>Let's type and see if it is working...</>,\r\n\t\t\tfind: '[name=\"pass-strong\"]',\r\n\t\t\tallowNext: false,\r\n\t\t\tallowNextOnType: true,\r\n\t\t\tnavigation: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tmessage: (\r\n\t\t\t\t<>\r\n\t\t\t\t\tAt least we should make valide the rule <b>strong_password</b>...\r\n\t\t\t\t</>\r\n\t\t\t),\r\n\t\t\tfind: '[name=\"pass-strong\"]',\r\n\t\t\tonNext({ target }) {\r\n\t\t\t\tconst received = target.value;\r\n\t\t\t\treturn /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).+$/g.test(\r\n\t\t\t\t\treceived\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tplacement: 'left',\r\n\t\t\tallowNext: false,\r\n\t\t\tallowNextOnType: true,\r\n\t\t\tnavigation: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tmessage: (\r\n\t\t\t\t<>Well done! You can try the intermidiate of customizing rule...</>\r\n\t\t\t),\r\n\t\t\tfind(target) {\r\n\t\t\t\treturn findByText(target, 'a:intermidiate')[0];\r\n\t\t\t},\r\n\t\t\tisDone: true,\r\n\t\t},\r\n\t],\r\n};\r\n","import React from 'react';\r\nimport { findByText } from 'Common/Utils';\r\nimport { IntroNotice } from './IntroNotice';\r\nimport { HookShotChaperone, ClickGesture } from 'Snippets/Redundancy';\r\n\r\nexport const FormUpdateWithDoneTypingEvent = [\r\n\t{\r\n\t\tmessage: <IntroNotice />,\r\n\t\tfind: 'a[data-chaperone-trigger]',\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tFirstly, We have to import <b>DoneTypingEvent</b> from <b>formydable</b>\r\n\t\t\t\t...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:DoneTypingEvent')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tThe concept is still the same with <b>InputWithRules</b> in{' '}\r\n\t\t\t\t<b>Advance Design Pattern</b> section...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:InputDoneTypingWithRules')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tExcept using <b>DoneTypingEvent</b> on handling change...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:DoneTypingEvent')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tThis is how we use it we passed a callback function in the first\r\n\t\t\t\tparameter of <b>DoneTypingEvent</b>. that will be triggered after the\r\n\t\t\t\tuser stop typing...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:event')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tAnd, in the second parameter we passed a miliseconds which will be the\r\n\t\t\t\ttime lag...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:300')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tThen, We set-up the <b>formUpdate</b> inside the callback...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:formUpdate')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: <>After that, We spread it in the form field...</>,\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:handleDoneTyping')[1];\r\n\t\t},\r\n\t\t...HookShotChaperone({\r\n\t\t\ttarget: (target) => findByText(target, 'span:handleDoneTyping')[1],\r\n\t\t\tfrom: (target) => findByText(target, 'span:handleDoneTyping')[1],\r\n\t\t\tto: (target) => findByText(target, 'span:handleDoneTyping')[0],\r\n\t\t}),\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tFinally, We will use our component inside our container (\r\n\t\t\t\t<b>FormWrapper</b>). The one we created in <b>Advance Design Pattern</b>{' '}\r\n\t\t\t\tsection...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:InputDoneTypingWithRules')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: <>And That's all! Let's try out the result!</>,\r\n\t\tfind: 'input',\r\n\t\tisDoneOnClick: true,\r\n\t\tgesture: <ClickGesture />,\r\n\t\tbackground: {\r\n\t\t\tbackdropStyle: { opacity: 1 },\r\n\t\t\thighlightStyle: { backgroundColor: 'rgba(255,255,255, 1)' },\r\n\t\t},\r\n\t},\r\n];\r\n\r\n// note you cannot do controllable fields using DoneTypingEvent\r\n","import React from 'react';\r\nimport { findByText } from 'Common/Utils';\r\nimport { ClickGesture } from 'Snippets/Redundancy'\r\n\r\nexport const GettingStarted = [\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tFirstly, we have to import <b>useForm</b> from <b>formydable</b>...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:useForm')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: `Secondly, we will create a schema for the default registration of the fields rule...`,\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:registerSchema')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tplacement: 'right',\r\n\t\tmessage: `Then, to register the field on the schema. you must put the attribute \\`name\\` of the field as the key here. so formydable know which is which...`,\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:fname')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tAnd it's <b>assignment/value</b> must be an <b>object</b> that contains\r\n\t\t\t\ta <b>label</b> which will be use in error messages...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:label')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tAnd especially, It must contain the main use of this library the{' '}\r\n\t\t\t\t<b>rules</b>...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:rules')[0];\r\n\t\t},\r\n\t\tonNext() {\r\n\t\t\tif (!localStorage.getItem('f-rules')) {\r\n\t\t\t\tlocalStorage.setItem('f-rules', '1');\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tWhen the registry is all set. we can now register the schema in{' '}\r\n\t\t\t\t<b>useForm</b> hooks...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:registerSchema')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tAnd then, the <b>useForm</b> will return <b>formState</b>,{' '}\r\n\t\t\t\t<b>formUpdate</b>, <b>formSubmit</b>, and <b>formRegistry</b>. but for\r\n\t\t\t\tnow we only use <b>formState</b> and <b>formUpdate</b>...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:formState')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tThe <b>formState</b> is use to fetch the updated field state in the\r\n\t\t\t\tschema. you can also fetch singularity by passing the name of the field.\r\n\t\t\t\t<br />\r\n\t\t\t\t<b>e.g. const fname = formState(\"fname\")</b>\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:formState')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: `Then, it will return the fields state...`,\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:fname')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tEach field state contains the following properties: <br />\r\n\t\t\t\t<b>isInvalid</b>: it will be <b>true</b> if the field inputs doesn't\r\n\t\t\t\tmatched the rules requirement\r\n\t\t\t\t<br />\r\n\t\t\t\t<b>message</b>: it will provide a message of the failed rule.\r\n\t\t\t\t<br />\r\n\t\t\t\t<b>failedIn</b>: it will provide which rule the user have failed in.\r\n\t\t\t\t<br />\r\n\t\t\t\t<b>isValidated</b>: it will be <b>true</b> if the input field has been\r\n\t\t\t\tvalidated or touched by the user\r\n\t\t\t\t<br />\r\n\t\t\t\t<b>value</b>: it will provide the field updated value.\r\n\t\t\t\t<br />\r\n\t\t\t</>\r\n\t\t),\r\n\t\tplacement: 'bottom-right',\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:fname')[4];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: `For the effectiveness of giving a proper error message. you must check first if the field is invalid`,\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:isInvalid')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: `Then, If it is truly invalid we will render the message`,\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:message')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\t<b>Well done!!</b> Now, We must try the result!\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn target.querySelector('input');\r\n\t\t},\r\n\t\tonDone() {\r\n\t\t\tlocalStorage.getItem('f-gstar') || localStorage.setItem('f-gstar', '1');\r\n\t\t},\r\n\t\tisDoneOnClick: true,\r\n\t\tgesture: <ClickGesture />,\r\n\t\tbackground: {\r\n\t\t\tbackdropStyle: { opacity: 1 },\r\n\t\t\thighlightStyle: { backgroundColor: 'rgba(255,255,255, 1)' },\r\n\t\t},\r\n\t},\r\n];\r\n\r\n// note\r\n// rules validation order is from left to right. it will validate firstly the one on the left side which is the most priority. commonly \"required\" rule.\r\n//\r\n","import React from 'react';\r\nimport { findByText } from 'Common/Utils';\r\nimport { IntroNotice } from './IntroNotice';\r\nimport { HookShotChaperone, ClickGesture } from 'Snippets/Redundancy';\r\nexport const SubmittingForm = [\r\n\t{\r\n\t\tmessage: <IntroNotice message={2} />,\r\n\t\tfind: 'a[data-chaperone-trigger]',\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>Beforehand, I want to emphasize on how to use arrayed field name...</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:languages')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tIt is use to determine that the text/checkbox field is <b>multiple</b>{' '}\r\n\t\t\t\tin the submit. although you can use the normal one. but the disadvantage\r\n\t\t\t\tis that the <b>FormEvent</b> doesn't recognized it as a <b>multiple</b>{' '}\r\n\t\t\t\tat first. until it is more than 1 which will cause a confusion/problem\r\n\t\t\t\tin the back-end. on the other hand the arrayed name will be\r\n\t\t\t\tautomatically recognized by the FormEvent as multiple...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:languages')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tIf you ever step a foot on arrayed field name. You can always use this\r\n\t\t\t\tmethod below to make an alias variable or make a formState single\r\n\t\t\t\tfetch...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:languages')[2];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tAnd now, We can use <b>formSubmit</b>. It is use to handle the submition\r\n\t\t\t\tof the form fields...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:formSubmit')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tThis is how we use it. We passed a <b>function</b> inside{' '}\r\n\t\t\t\t<b>formSubmit</b>...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:formSubmit')[2];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tThe <b>function</b> we passed must have an argument like below. because\r\n\t\t\t\tthis argument passed to our <b>function</b> is the instance of\r\n\t\t\t\tFormEvent...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:event')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: <>You can check the FormEvent Methods here for more info...</>,\r\n\t\tfind() {\r\n\t\t\treturn document.querySelector('.scroll-nav a[href=\"#useform\"]');\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\t<b>FormEvent</b> method <b>isReady</b> is use to determine whether the\r\n\t\t\t\tform fields is ready or no invalidations. Inside this section of\r\n\t\t\t\tstatement were you put your sever-side request like ajax or something...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:isReady')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tThere are many ways of getting the form data from <b>FormEvent</b>. it\r\n\t\t\t\tdepends on your content-type. Method <b>param</b> is use for url encoded\r\n\t\t\t\tcontent-type...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:param')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tAfter you make a request, don't forget to use <b>FormEvent</b> method{' '}\r\n\t\t\t\t<b>reset</b>. To reset both the form and controllable fields...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:reset')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tOn the other side of the statement. You can use <b>FormEvent</b> method{' '}\r\n\t\t\t\t<b>locateFailed</b> to locate the failed fields whenever it is out of\r\n\t\t\t\tthe view port...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:locateFailed')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tFinally, We assign it on <b>form onSubmit</b>...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:formSubmit')[3];\r\n\t\t},\r\n\t\t...HookShotChaperone({\r\n\t\t\ttarget: (target) => findByText(target, 'span:formSubmit')[3],\r\n\t\t\tfrom: (target) => findByText(target, 'span:formSubmit')[3],\r\n\t\t\tto: (target) => findByText(target, 'span:formSubmit')[1],\r\n\t\t}),\r\n\t},\r\n\t{\r\n\t\tmessage: <>That was eazy! Let's try out the result!</>,\r\n\t\tfind: 'select',\r\n\t\tisDoneOnClick: true,\r\n\t\tgesture: <ClickGesture />,\r\n\t\tbackground: {\r\n\t\t\tbackdropStyle: { opacity: 1 },\r\n\t\t\thighlightStyle: { backgroundColor: 'rgba(255,255,255, 1)' },\r\n\t\t\tgestureStyle: { zIndex: null }\r\n\t\t},\r\n\t},\r\n];\r\n\r\n// note\r\n// those fields who are not registered from the schema are excluded from -\r\n// FormEvent method json, param and paramArray. if you want to involve the -\r\n// unregistered field you can always use method formData that will return FormData instance...\r\n","import React from 'react';\r\nimport { findByText } from 'Common/Utils';\r\nimport { IntroNotice } from './IntroNotice';\r\nimport { ClickGesture } from 'Snippets/Redundancy'\r\nexport const UpdatingRulesMessages = [\r\n\t{\r\n\t\tmessage: <IntroNotice />,\r\n\t\tfind: 'a[data-chaperone-trigger]',\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tFirstly, We have to import <b>Validator</b> from <b>formydable</b>\r\n\t\t\t\t...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:Validator')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tThen we use <b>Validator</b> method <b>rulesUpdateMessage</b> to update\r\n\t\t\t\tthe vailable rules messages...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:rulesUpdateMessage')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tIn the first parameter of the method. We must passed the{' '}\r\n\t\t\t\t<b>rule name</b> of which we want to update...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:alpha_dash')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: (\r\n\t\t\t<>\r\n\t\t\t\tIn the second parameter of the method. We must passed the{' '}\r\n\t\t\t\t<b>new message</b> of the rule...\r\n\t\t\t</>\r\n\t\t),\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:Oh')[0];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: <>Now, We use the rules we updated...</>,\r\n\t\tfind(target) {\r\n\t\t\treturn findByText(target, 'span:alpha_dash')[1];\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\tmessage: <>That was quick! Let's try out the result!</>,\r\n\t\tfind: 'input',\r\n\t\tisDoneOnClick: true,\r\n\t\tgesture: <ClickGesture />,\r\n\t\tbackground: {\r\n\t\t\tbackdropStyle: { opacity: 1 },\r\n\t\t\thighlightStyle: { backgroundColor: 'rgba(255,255,255, 1)' },\r\n\t\t},\r\n\t},\r\n];\r\n","export const BasicCode = `import React from \"react\";\r\nimport { useForm } from \"formydable\";\r\n\r\nconst FormBasic = () => {\r\n    const registerSchema = {\r\n        fname: { label: \"First Name\", rules: \"required|alpha|min:3\" },\r\n        lname: { label: \"Last Name\", rules: \"required|alpha|min:3|max:20\" }, \r\n    };\r\n\r\n    const { formState, formUpdate } = useForm(registerSchema);\r\n\r\n    const { fname, lname } = formState(); \r\n    \r\n    return ( \r\n        <form> \r\n            <div className=\"n-form-field\">\r\n                <label>First Name</label>\r\n                <input \r\n                    className=\"n-form-control\"\r\n                    name=\"fname\" \r\n                    placeholder=\"first name...\"\r\n                    onChange={formUpdate}\r\n                />\r\n                {fname.isInvalid && <div className=\"error-feedback\">{fname.message}</div>}\r\n            </div>\r\n            <div className=\"n-form-field\">\r\n                <label>Last Name</label>\r\n                <input \r\n                    className=\"n-form-control\"\r\n                    name=\"lname\"\r\n                    placeholder=\"last name...\"\r\n                    onChange={formUpdate}\r\n                /> \r\n                {lname.isInvalid && <div className=\"error-feedback\">{lname.message}</div>} \r\n            </div>\r\n        </form> \r\n    );\r\n}\r\n\r\n#render(<FormBasic />)`;\r\n\r\nexport const Controllable = `import React from \"react\";\r\nimport { useForm } from \"formydable\";\r\n\r\nconst FormControllable = () => {\r\n    const usernameDefault = \"mytabworks\"\r\n    const registerSchema = {\r\n        username: { label: \"Username\", rules: \"required|alpha_slug|min:5\", value: usernameDefault },\r\n        email: { label: \"E-mail\", rules: \"required|email\" }, \r\n    };\r\n\r\n    const { formState, formUpdate } = useForm(registerSchema);\r\n\r\n    const { username, email } = formState(); \r\n    \r\n    return ( \r\n        <form> \r\n            <div className=\"n-form-field\">\r\n                <label>Username</label>\r\n                <input \r\n                    className=\"n-form-control\"\r\n                    name=\"username\"\r\n                    value={username.value}\r\n                    placeholder=\"username...\"\r\n                    onChange={formUpdate}\r\n                />\r\n                {username.isInvalid && <div className=\"error-feedback\">{username.message}</div>}\r\n            </div>\r\n            <div className=\"n-form-field\">\r\n                <label>E-mail</label>\r\n                <input \r\n                    className=\"n-form-control\"\r\n                    name=\"email\"\r\n                    value={email.value}\r\n                    placeholder=\"e-mail...\"\r\n                    onChange={formUpdate}\r\n                /> \r\n                {email.isInvalid && <div className=\"error-feedback\">{email.message}</div>} \r\n            </div>\r\n        </form> \r\n    );\r\n}\r\n\r\n#render(<FormControllable />)`;\r\n\r\nexport const CustomMessages = `import React from \"react\";\r\nimport { useForm } from \"formydable\";\r\n\r\nconst CustomMesssages = () => {\r\n    const registerSchema = {\r\n        reaction: { label: \"Reactions\", rules: \"required|alpha_space|min:10|max:20\" }\r\n    };\r\n\r\n    const { formState, formUpdate } = useForm(registerSchema);\r\n\r\n    const reaction = formState(\"reaction\"); \r\n    \r\n    return ( \r\n        <form>   \r\n            <div className={\\`n-form-field\\${reaction.isInvalid \r\n                ? \" n-form-invalid\" \r\n                : reaction.isValidated \r\n                    ? \" n-form-valid\" \r\n                    : \"\"}\\`\r\n                }>\r\n                <label>what is on your mind?</label>\r\n                <textarea \r\n                    className=\"n-form-control\"\r\n                    name=\"reaction\"\r\n                    value={reaction.value}\r\n                    placeholder=\"try type anything...\"\r\n                    onChange={formUpdate}\r\n                />\r\n                {reaction.isInvalid && <div className=\"n-invalid-feedback\">{\r\n                    reaction.failedIn === \"min\" \r\n                    ? \"That is too short\" \r\n                    : reaction.failedIn === \"max\" \r\n                    ? \"That is too long\"\r\n                    : reaction.message }\r\n                </div>} \r\n                <div className=\"n-valid-feedback\"><span role=\"img\">✔️</span> Looks Good!</div>\r\n            </div>\r\n        </form> \r\n    );\r\n}\r\n\r\n#render(<CustomMesssages />)`;\r\n\r\nexport const WithSubmitCode = `import React from \"react\";\r\nimport { useForm } from \"formydable\"; \r\n\r\nconst FormWithSubmit = () => {\r\n    const registerSchema = { \r\n        gender: { label: \"Gender\", rules: \"required\" },\r\n        biography: { label: \"Biography\", rules: \"required|alpha_space|min:20|max:100\" },\r\n        \"languages[]\": { label: \"Language You Like\", rules: \"required|min:2|max:3\" }\r\n    };\r\n    \r\n    const { formState, formUpdate, formSubmit } = useForm(registerSchema);\r\n\r\n    const { gender, biography, \"languages[]\": languages } = formState(); \r\n\r\n    const formSubmitHandler = formSubmit((event) => {\r\n        if (event.isReady()) {\r\n            MockRequest(\"/mock/url-encoded/request\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n                },\r\n                body: event.param()\r\n            }) \r\n            .then((response) => { \r\n                Alert(response.json(), \"success\")\r\n            })\r\n\r\n            event.reset()\r\n            \r\n        } else {\r\n            Alert(\"Failed! all field rules must fulfilled\", \"danger\")\r\n            event.locateFailed()\r\n        }\r\n    }); \r\n\r\n    const messageDisplay = (fieldstate) => fieldstate.isInvalid && <div className=\"error-feedback\">{fieldstate.message}</div>\r\n    \r\n    return ( \r\n        <form onSubmit={formSubmitHandler}>  \r\n            <div className=\"n-form-field\">\r\n                <label>Gender</label>\r\n                <select className=\"n-form-control\" name=\"gender\" onChange={formUpdate}>\r\n                    <option value=\"\">Choose gender</option>\r\n                    <option value=\"1\">Male</option>\r\n                    <option value=\"2\">Female</option>\r\n                </select>  \r\n                {messageDisplay(gender)}\r\n            </div> \r\n            <div className=\"n-form-field\">\r\n                <label>Biography</label>\r\n                <textarea className=\"n-form-control\" name=\"biography\" onChange={formUpdate} />\r\n                {messageDisplay(biography)} \r\n            </div>\r\n            <div className=\"n-form-field\">\r\n                <label className=\"n-form-check\">\r\n                    <input className=\"n-form-control\" type=\"checkbox\" name=\"languages[]\" value=\"js\" onClick={formUpdate} />\r\n                    js\r\n                </label>\r\n                <label className=\"n-form-check\">\r\n                    <input className=\"n-form-control\" type=\"checkbox\" name=\"languages[]\" value=\"c#\" onClick={formUpdate} />\r\n                    c#\r\n                </label>\r\n                <label className=\"n-form-check\">\r\n                    <input className=\"n-form-control\" type=\"checkbox\" name=\"languages[]\" value=\"c++\" onClick={formUpdate} />\r\n                    c++\r\n                </label>\r\n                <label className=\"n-form-check\">\r\n                    <input className=\"n-form-control\" type=\"checkbox\" name=\"languages[]\" value=\"python\" onClick={formUpdate} />\r\n                    python\r\n                </label>\r\n            </div>\r\n            {messageDisplay(languages)}\r\n            <button type=\"submit\" className=\"n-btn\">Submit</button>\r\n        </form> \r\n    );\r\n}\r\n\r\n#render(<FormWithSubmit/>)`;\r\n\r\nexport const AdvanceCode = `import React from \"react\";\r\nimport { useForm, useFormSupplier, FormSupplier } from \"formydable\"; \r\n\r\nconst FormWrapper = ({children, onSubmit}) => {\r\n    const { formState, formUpdate, formSubmit, formRegistry } = useForm();\r\n    \r\n    const formSubmitHandler = formSubmit(onSubmit);  \r\n    \r\n    return ( \r\n        <FormSupplier value={{ formState, formUpdate, formRegistry }}>\r\n            <form onSubmit={formSubmitHandler}> \r\n                {children}\r\n                <button type=\"submit\" className=\"n-btn\">Submit</button>\r\n            </form>\r\n        </FormSupplier> \r\n    );\r\n}\r\n\r\nconst InputWithRules = ({type = \"text\", name, label, rules, value = \"\", placeholder = \"enter here...\", id}) => { \r\n\r\n    const { formState, formUpdate, formRegistry } = useFormSupplier(); \r\n \r\n    formRegistry({ name, label, rules, value }) \r\n    \r\n    const fieldstate = formState(name); \r\n    \r\n    const validity = (\r\n            fieldstate.isInvalid \r\n            ? \"n-form-invalid\" \r\n            : fieldstate.isValidated \r\n            ? \"n-form-valid\"\r\n            : \"\"\r\n        )\r\n\r\n    return ( \r\n        <div className={\\`n-form-field \\${validity}\\`}>\r\n            <label htmlFor={id || name}>\r\n                {label}\r\n                {rules.includes(\"required\") && (\r\n                    <span className=\"label-required\">*</span>\r\n                )}\r\n            </label>\r\n            <input \r\n                className=\"n-form-control\"\r\n                id={id || name}\r\n                type={type}\r\n                name={name}\r\n                value={type !== \"file\" ? fieldstate.value : undefined}\r\n                placeholder={placeholder}\r\n                onChange={formUpdate} \r\n            /> \r\n            <div className=\"n-invalid-feedback\">\r\n                {fieldstate.isInvalid && fieldstate.message}\r\n            </div> \r\n            <div className=\"n-valid-feedback\">\r\n                <span role=\"img\">✔️</span> Looks good!\r\n            </div>  \r\n        </div>\r\n    );\r\n}\r\n\r\nconst MockSubmit = (event) => {\r\n    if (event.isReady()) {  \r\n        MockRequest(\"/mock/json/request\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: event.json()\r\n        }) \r\n        .then((response) => {\r\n            Alert(response.json(), \"success\")\r\n        }) \r\n\r\n        event.reset() \r\n\r\n    } else {\r\n        Alert(\"Failed! all field rules must fulfilled\", \"danger\")\r\n        event.locateFailed()\r\n    }\r\n}\r\n\r\n#render(\r\n    <FormWrapper onSubmit={MockSubmit}>\r\n        <InputWithRules name=\"fname\" label=\"First Name\" rules=\"required|alpha|min:3\" />\r\n        <InputWithRules name=\"lname\" label=\"Last Name\" rules=\"required\" />\r\n        <InputWithRules name=\"email\" label=\"E-mail\" rules=\"required|email\" />\r\n        <InputWithRules type=\"file\" name=\"resume\" label=\"Resume\" rules=\"mimes:pdf,png|min_size:100|max_size:1000\" />\r\n    </FormWrapper>\r\n)`;\r\n\r\nexport const AliasRegistry = `import React from \"react\";\r\nimport { useFormSupplier } from \"formydable\"; \r\n\r\nconst InputMultiple = (props) => {\r\n\r\n    const [fields, setFields] = React.useState([\r\n        {...props, alias: \\`unique-id-\\${Math.random()}\\`}\r\n    ]); \r\n\r\n    return (\r\n        <div className=\"n-form-field\">\r\n            <label htmlFor={props.name}>{props.label}</label>\r\n            {fields.map((field, index) => {  \r\n                const btnLabel = index === 0 ? \"add\" : \"remove\"\r\n                const handleClick = () => {  \r\n                    setFields((state) => {\r\n                        return index === 0 \r\n                        ? [\r\n                            ...state,\r\n                            {\r\n                                ...props,\r\n                                alias: \\`unique-id-\\${Math.random()}\\`,\r\n                            }\r\n                        ] \r\n                        : state.filter((value) => value.alias !== field.alias)\r\n                    }) \r\n                } \r\n\r\n                return ( \r\n                    <InputWithAliasRules key={field.alias} btnLabel={btnLabel} onClick={handleClick} {...field} /> \r\n                )   \r\n            })} \r\n        </div>\r\n    )\r\n}\r\n\r\nconst InputWithAliasRules = ({  type = \"text\", name, alias, label, rules, placeholder = \"enter here...\", btnLabel, onClick}) => { \r\n    \r\n    const { formState, formUpdate, formRegistry } = useFormSupplier(); \r\n \r\n    formRegistry({ name, label, rules, alias })\r\n    \r\n    const fieldstate = formState(alias);\r\n    \r\n    const handleFieldChange = (event) => { \r\n        formUpdate({ target: event.target }, alias);\r\n    }; \r\n    \r\n    const validity = (\r\n        fieldstate.isInvalid \r\n        ? \"n-form-invalid\" \r\n        : fieldstate.isValidated \r\n        ? \"n-form-valid\"\r\n        : \"\"\r\n    )\r\n\r\n    return (   \r\n        <div className={\\`n-form-field \\${validity}\\`}>\r\n            <div className=\"n-input-group\"> \r\n                <input \r\n                    className=\"n-form-control\"\r\n                    id={name}\r\n                    type={type}\r\n                    name={name}\r\n                    data-alias={alias}\r\n                    placeholder={placeholder}\r\n                    onChange={handleFieldChange} \r\n                /> \r\n                <div className=\"n-input-group-append\">\r\n                    <button\r\n                        className=\"n-btn\" \r\n                        type=\"button\"\r\n                        onClick={onClick}>\r\n                        {btnLabel}\r\n                    </button>\r\n                </div>  \r\n            </div>\r\n            <div className=\"n-invalid-feedback\">\r\n                {fieldstate.isInvalid && fieldstate.message}\r\n            </div> \r\n            <div className=\"n-valid-feedback\">\r\n                <span role=\"img\">✔️</span> Looks good!\r\n            </div>\r\n        </div>   \r\n    );\r\n}\r\n\r\n#render(\r\n    <FormWrapper onSubmit={MockSubmit}>\r\n        <InputMultiple name=\"favorites\" label=\"Favorites\" rules=\"required|alpha|min:2\" />\r\n    </FormWrapper>\r\n);`;\r\n\r\nexport const DoneTypingCode = `import React from \"react\";\r\nimport { useFormSupplier, DoneTypingEvent } from \"formydable\"; \r\n\r\nconst InputDoneTypingWithRules = ({  type = \"text\", name, label, rules, placeholder = \"enter here...\", id}) => { \r\n\r\n    const { formState, formUpdate, formRegistry } = useFormSupplier(); \r\n \r\n    formRegistry({ name, label, rules }) \r\n    \r\n    const fieldstate = formState(name);\r\n    \r\n    const handleDoneTyping = DoneTypingEvent((event) => {\r\n        formUpdate({ target: event.target });\r\n    }, 300); \r\n    \r\n    const validity = (\r\n        fieldstate.isInvalid \r\n        ? \"n-form-invalid\" \r\n        : fieldstate.isValidated \r\n        ? \"n-form-valid\"\r\n        : \"\"\r\n    )\r\n\r\n    return ( \r\n        <div className={\\`n-form-field \\${validity}\\`}>\r\n            <label htmlFor={id || name}>\r\n                {label}\r\n                {rules.includes('required') && (\r\n                    <span className='label-required'>*</span>\r\n                )}\r\n            </label>\r\n            <input \r\n                className=\"n-form-control\"\r\n                id={id || name}\r\n                type={type}\r\n                name={name}\r\n                placeholder={placeholder}  \r\n                {...handleDoneTyping}\r\n            /> \r\n            <div className=\"n-invalid-feedback\">\r\n                {fieldstate.isInvalid && fieldstate.message}\r\n            </div> \r\n            <div className=\"n-valid-feedback\">\r\n                Looks good!\r\n            </div>  \r\n        </div>\r\n    );\r\n}\r\n\r\n#render(\r\n    <FormWrapper onSubmit={MockSubmit}>   \r\n        <InputDoneTypingWithRules name=\"done-typing\" label=\"With DoneTypingEvent\" rules=\"required|alpha|min:20|max:25\" />\r\n        <InputWithRules name=\"normal-change-event\" label=\"Without DoneTypingEvent\" rules=\"required|alpha|min:20|max:25\" /> \r\n    </FormWrapper>\r\n)`;\r\n\r\nexport const AliasRules = `import React from \"react\";\r\nimport { useFormSupplier } from \"formydable\";\r\n\r\nconst RadioGender = () => {\r\n    const { formState, formUpdate, formRegistry } = useFormSupplier() \r\n    \r\n    const fieldstate = formState(\"gender\")\r\n\r\n    formRegistry({ name: \"gender\", label: \"Gender\", rules: \"required\", value: \"1\" })\r\n\r\n    return (\r\n        <div className=\"n-form-field\">\r\n            <label>Gender</label>\r\n            <div>\r\n                <label className=\"n-form-check-inline\">\r\n                    <input className=\"n-form-control\" type=\"radio\" name=\"gender\" value=\"1\" checked={fieldstate.value === \"1\"} onChange={formUpdate}/>\r\n                    male\r\n                </label>\r\n                <label className=\"n-form-check-inline\">\r\n                    <input className=\"n-form-control\" type=\"radio\" name=\"gender\" value=\"2\" checked={fieldstate.value === \"2\"}  onChange={formUpdate}/>\r\n                    female\r\n                </label>\r\n            </div>\r\n            {fieldstate.isInvalid && <div className=\"error-feedback\">{fieldstate.message}</div>}\r\n        </div>\r\n    );\r\n} \r\n\r\n#render(\r\n    <FormWrapper onSubmit={MockSubmit}>   \r\n        <RadioGender />\r\n        <InputWithRules name=\"normal-rules\" label=\"Normal rules\" rules=\"required_if:gender=1\" />\r\n        <InputWithRules name=\"aliased-rules\" label=\"With Alias rules\" rules=\"required_if:gender@Gender=1@male\" />\r\n    </FormWrapper>\r\n)`;\r\n\r\nexport const CustomRulesCode = {\r\n    basic: `import React from \"react\";\r\nimport { Validator } from \"formydable\"; \r\n\r\nconst strong_password = {\r\n    exe({received}) {  \r\n        const test = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).+$/g.test(received);\r\n        return received.length && !test;\r\n    },\r\n    message: \"The :attribute must have 1 small letter, 1 capital letter, 1 number, and 1 special character\" \r\n};\r\n\r\nValidator.rulesExtend({ strong_password });\r\n\r\n#render(\r\n    <FormWrapper onSubmit={MockSubmit}> \r\n        <InputWithRules \r\n            type=\"password\" \r\n            name=\"pass-strong\" \r\n            label=\"Strong Password\" \r\n            rules=\"required|strong_password|min:8\" \r\n        />   \r\n    </FormWrapper>\r\n)`,\r\n\r\n    intermidiate: `import React from \"react\";\r\nimport { Validator } from \"formydable\"; \r\n\r\nconst enumerate = {\r\n    exe({received, parameter}) {  \r\n        const test = parameter.split(\",\").includes(received);\r\n        return received.length && !test;\r\n    },\r\n    message: \"The :attribute must only contain :enumerate\" \r\n};  \r\n\r\nconst required_if_checkbox = {\r\n    exe({received, parameter, parameter_value}) {  \r\n        const checkbox = document.querySelector(\\`[name=\"\\${parameter}\"]\\`)\r\n        const test = checkbox.checked === Boolean(parameter_value) \r\n        return test && !received.length;\r\n    },\r\n    message: \"The :attribute is required when :required_if_checkbox is :value\" \r\n}; \r\n\r\nconst same_value = {\r\n    exe({received, parameter, data}) { \r\n        return received.length && data[parameter] !== received;\r\n    },\r\n    message: \"The :attribute must be the same value with :same_value\"\r\n};\r\n\r\nValidator.rulesExtend({ enumerate, required_if_checkbox, same_value });\r\n\r\n#render(\r\n    <FormWrapper onSubmit={MockSubmit}>   \r\n        <label className=\"n-form-check\">\r\n            <input className=\"n-form-control\" type=\"checkbox\" name=\"checky\" defaultChecked={true}/> \r\n            checky \r\n        </label>\r\n        <InputWithRules \r\n            name=\"language\" \r\n            label=\"Language\" \r\n            rules=\"required_if_checkbox:checky=true|enumerate:js,c#,c++,python\" \r\n        /> \r\n        <InputWithRules \r\n            name=\"confirm\" \r\n            label=\"Confirm\" \r\n            rules=\"required_if_checkbox:checky=true|same_value:language\" \r\n        /> \r\n    </FormWrapper>\r\n)`,\r\n\r\n    advance: `import React from \"react\";\r\nimport { Validator, useFormSupplier } from \"formydable\"; \r\n\r\nconst password_status = {\r\n    allowMessageEvenValid: true,\r\n    exe(received, parameter) {  \r\n        const isMessageType = parameter === \"short\"\r\n        let rate = 0\r\n        const qualifications = [   \r\n            /[A-Z]/, \r\n            /[a-z]/, \r\n            /[0-9]/, \r\n            /[#?!@$%^&*-]/,\r\n            /^.{8,}$/\r\n        ]\r\n        qualifications.forEach((regex) => {\r\n            if(regex.test(received)) {\r\n                rate++\r\n            }\r\n        })\r\n\r\n        const very_strong = rate === 5;\r\n        const strong = rate > 3;\r\n        const weak = rate >= 2;\r\n        const very_weak = rate === 1;\r\n        \r\n        if(very_strong) {\r\n            this.message = isMessageType ? \"very-strong\" : \"The :attribute is very strong\"\r\n        } else if(strong) {\r\n            this.message = isMessageType ? \"strong\" : \"The :attribute is strong\"\r\n        } else if(weak) {\r\n            this.message = isMessageType ? \"weak\" : \"The :attribute is weak\"\r\n        } else if(very_weak) {\r\n            this.message = isMessageType ? \"very-weak\" : \"The :attribute is very weak\"\r\n        } else {\r\n            this.message = isMessageType ? \"super-weak\" : \"The :attribute is must be filled\"\r\n        }\r\n \r\n        return !strong;\r\n    }\r\n};\r\n\r\nValidator.rulesExtend({ password_status });\r\n\r\nconst PasswordStyle = ({name, label}) => {\r\n    const { formState, formUpdate, formRegistry } = useFormSupplier(); \r\n \r\n    formRegistry({ name, label, rules: \"password_status:short\" })\r\n    \r\n    const state = formState(name);\r\n    \r\n    const handleChange = (event) => {\r\n        formUpdate({ target: event.target });\r\n    }\r\n\r\n    const validity = (\r\n        state.isInvalid \r\n        ? \"is-invalid\" \r\n        : state.isValidated \r\n        ? \"is-valid\"\r\n        : \"\"\r\n    )\r\n\r\n    return ( \r\n        <div className=\"n-form-field\">\r\n            <style>\r\n                {\\`.password-prog {\r\n                    margin-top: 2px;\r\n                    width: 0%;\r\n                    height: 3px;\r\n                    background-color: crimson;\r\n                    transition: all 200ms ease-out;\r\n                }\r\n                .password-prog.very-strong {\r\n                    width: 100%;\r\n                    background-color: rgb(80, 224, 164);\r\n                }\r\n                .password-prog.strong {\r\n                    width: 75%;\r\n                    background-color: rgb(214, 236, 164);\r\n                }\r\n                .password-prog.weak {\r\n                    width: 50%;\r\n                    background-color: rgb(235, 176, 68);\r\n                }\r\n                .password-prog.very-weak {\r\n                    width: 25%;\r\n                    background-color: rgb(241, 142, 162);\r\n                }\\`}\r\n            </style>\r\n            <label htmlFor={name}>{label}</label>\r\n            <input \r\n                id={name}\r\n                type=\"password\"\r\n                name={name}\r\n                placeholder=\"enter password..\" \r\n                className={\\`n-form-control \\${validity}\\`} \r\n                onChange={handleChange}\r\n            /> \r\n            <div className={\\`password-prog \\${(state && state.isValidated  && state.message) || \"\"}\\`}>  \r\n            </div>  \r\n            <small>{(state && state.isValidated && state.message.replace(\"-\", \" \"))}</small>\r\n        </div>\r\n    )\r\n}\r\n\r\n#render(\r\n    <FormWrapper onSubmit={MockSubmit}>     \r\n        <InputWithRules \r\n                type=\"password\" \r\n                name=\"pass-status\" \r\n                label=\"Password Status\" \r\n                rules=\"password_status\" \r\n            />\r\n        <PasswordStyle name=\"pass-styled\" label=\"Password Status Short\" />\r\n    </FormWrapper>\r\n)`,\r\n};\r\n\r\nexport const RulesUpdateMessage = `import React from \"react\";\r\nimport { Validator } from \"formydable\";\r\n\r\nValidator.rulesUpdateMessage(\"alpha_dash\", \"Oh no!! :attribute must be with dashes\")\r\nValidator.rulesUpdateMessage(\"same\", \"Oh Ow!! :attribute must be perfectly same with :same\")\r\n\r\n#render(\r\n    <FormWrapper onSubmit={MockSubmit}>    \r\n        <InputWithRules id=\"dash-id\" name=\"dash-cases\" label=\"Alpha Dashes\" rules=\"required|alpha_dash\" />\r\n        <InputWithRules name=\"confirm\" label=\"Confirm Match\" rules=\"required|same:dash-id@Alpha Dashes\" />\r\n    </FormWrapper>\r\n)`;\r\n","export const root = document;\r\nexport const container = root.createElement('div');\r\n// container.id = \"myt-react-notify\";\r\nroot.body.appendChild(container);\r\nexport const collection = {};\r\nexport const uid = (length = 6, range = 36) => {\r\n\tlet unid = '';\r\n\tfor (let i = 0; i < length; i++) {\r\n\t\tunid += Math.floor(Math.random() * range).toString(range);\r\n\t}\r\n\treturn unid;\r\n};\r\n","import React, { cloneElement } from 'react';\r\nimport { render } from 'react-dom';\r\nimport { container, collection, root, uid } from './dom-utils';\r\n\r\nexport const Render = (Component) => {\r\n\tconst init_placement = Component.props.placement;\r\n\tif (!init_placement) return;\r\n\tconst ComponentContainerName = 'notify-' + init_placement;\r\n\r\n\tif (!(ComponentContainerName in collection)) {\r\n\t\tcollection[ComponentContainerName] = [];\r\n\t\tconst placementContainer = root.createElement('div');\r\n\t\tplacementContainer.id = ComponentContainerName;\r\n\t\tcontainer.appendChild(placementContainer);\r\n\t}\r\n\r\n\tconst {\r\n\t\tid: hasId,\r\n\t\tcancel = false,\r\n\t\tdelay,\r\n\t\ttiming,\r\n\t\tplacement,\r\n\t\ttemplate,\r\n\t\t...props\r\n\t} = Component.props;\r\n\t// if (hasId && cancel && false) {\r\n\t// \tcollection[ComponentContainerName] = collection[\r\n\t// \t\tComponentContainerName\r\n\t// \t].filter((notify) => notify.props.id !== hasId);\r\n\t// } else\r\n\tif (\r\n\t\thasId &&\r\n\t\tcollection[ComponentContainerName].find(\r\n\t\t\t(notify) => notify.props.id === hasId\r\n\t\t)\r\n\t) {\r\n\t\tcollection[ComponentContainerName] = collection[ComponentContainerName].map(\r\n\t\t\t(notify) => {\r\n\t\t\t\treturn notify.props.id === hasId\r\n\t\t\t\t\t? cloneElement(Component, {\r\n\t\t\t\t\t\t\t...notify.props,\r\n\t\t\t\t\t\t\t...props,\r\n\t\t\t\t\t\t\tkey: notify.key,\r\n\t\t\t\t\t\t\tcancel,\r\n\t\t\t\t\t\t\ttemplate: { ...notify.props.template, ...template }\r\n\t\t\t\t\t  })\r\n\t\t\t\t\t: notify;\r\n\t\t\t}\r\n\t\t);\r\n\t} else if (!cancel) {\r\n\t\tcollection[ComponentContainerName][\r\n\t\t\tComponentContainerName.includes('top') ? 'push' : 'unshift'\r\n\t\t](cloneElement(Component, { key: uid(), cancel: false }));\r\n\t}\r\n\tObject.keys(collection).forEach((pContainerName) => {\r\n\t\tconst plcontainer = root.getElementById(pContainerName);\r\n\r\n\t\trender(\r\n\t\t\t<>\r\n\t\t\t\t{collection[pContainerName].map((notify) => {\r\n\t\t\t\t\tconst { onExit, onExiting, onExited } = notify.props;\r\n\t\t\t\t\treturn cloneElement(notify, {\r\n\t\t\t\t\t\tkey: notify.key,\r\n\t\t\t\t\t\tallowRef: true,\r\n\t\t\t\t\t\tonExit: (target) => {\r\n\t\t\t\t\t\t\tonExit && onExit(target);\r\n\t\t\t\t\t\t\tif (!target) return;\r\n\t\t\t\t\t\t\tconst tstyle = target.style;\r\n\t\t\t\t\t\t\ttstyle.zIndex = 1032;\r\n\t\t\t\t\t\t\ttstyle.height = target.offsetHeight + 'px';\r\n\t\t\t\t\t\t\tconst animation = `300ms ${(notify.props.timing || 1000) -\r\n\t\t\t\t\t\t\t\t400}ms`;\r\n\t\t\t\t\t\t\ttstyle.transition = `height ${animation}, margin-top ${animation}`;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tonExiting: (target) => {\r\n\t\t\t\t\t\t\tonExiting && onExiting(target);\r\n\t\t\t\t\t\t\tif (!target) return;\r\n\t\t\t\t\t\t\tconst tstyle = target.style;\r\n\t\t\t\t\t\t\ttstyle.zIndex = 1031;\r\n\t\t\t\t\t\t\ttstyle.marginTop = tstyle.height = '0';\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tonExited: (target) => {\r\n\t\t\t\t\t\t\tonExited && onExited(target);\r\n\t\t\t\t\t\t\tcollection[pContainerName] = collection[pContainerName].filter(\r\n\t\t\t\t\t\t\t\t(each) => each.key !== notify.key\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t})}\r\n\t\t\t</>,\r\n\t\t\tplcontainer\r\n\t\t);\r\n\t});\r\n};\r\n\r\nexport const RenderHasId = (id) =>\r\n\tObject.keys(collection).some((placement) =>\r\n\t\tcollection[placement].some((notify) => notify.props.id === id)\r\n\t);\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Animation } from 'myt-react-snippets';\r\nimport './index.css';\r\nexport * from './Render';\r\nconst NotificationProps = {\r\n\ttemplate: PropTypes.exact({\r\n\t\ttitle: PropTypes.string,\r\n\t\tmessage: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\r\n\t\tvariant: PropTypes.oneOf(['success', 'primary', 'danger', 'warning']),\r\n\t\tdismissible: PropTypes.bool,\r\n\t}),\r\n\tanimation: PropTypes.exact({\r\n\t\tenter: PropTypes.string.isRequired,\r\n\t\texit: PropTypes.string.isRequired,\r\n\t}),\r\n\tchildren: PropTypes.func,\r\n\tplacement: PropTypes.oneOf([\r\n\t\t'top-left',\r\n\t\t'top-right',\r\n\t\t'bottom-left',\r\n\t\t'bottom-right',\r\n\t]),\r\n\ttiming: PropTypes.number,\r\n\tdelay: PropTypes.number,\r\n\tcancel: PropTypes.bool,\r\n};\r\n\r\nconst NotificationDefault = {\r\n\ttemplate: {},\r\n\tplacement: 'bottom-right',\r\n\ttiming: 500,\r\n\tdelay: 5000,\r\n};\r\n\r\nexport const Notification = ({\r\n\ttemplate: { title, message, variant = 'default', dismissible = true },\r\n\tchildren,\r\n\tanimation,\r\n\tplacement,\r\n\ttiming,\r\n\tdelay,\r\n\tcancel,\r\n\t...props\r\n}) => {\r\n\tconst [state, setState] = useState(true);\r\n\r\n\tconst [time, setTime] = useState(null);\r\n\r\n\tlet initialX;\r\n\r\n\tconst startTouchHandler = (e) => {\r\n\t\tinitialX = e.touches[0].clientX;\r\n\t};\r\n\tconst endTouchHandler = (e) => {\r\n\t\tif (initialX && initialX < (e.touches[0] || e.changedTouches[0]).clientX) {\r\n\t\t\tsetState(false);\r\n\t\t}\r\n\t};\r\n\r\n\tconst render = (\r\n\t\t<div\r\n\t\t\tclassName='notify-template-wrapper'\r\n\t\t\tonTouchStart={startTouchHandler}\r\n\t\t\tonTouchEnd={endTouchHandler}>\r\n\t\t\t{children ? (\r\n\t\t\t\tchildren(setState)\r\n\t\t\t) : (\r\n\t\t\t\t<div className={`notify-template ${variant}`}>\r\n\t\t\t\t\t{!!title && <b>{title}</b>}\r\n\t\t\t\t\t<div className='message'>{message}</div>\r\n\t\t\t\t\t{dismissible && (\r\n\t\t\t\t\t\t<button type='button' onClick={() => setState(false)}>\r\n\t\t\t\t\t\t\t&times;\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n\r\n\tReact.useEffect(() => {\r\n\t\tcancel && setState(false);\r\n\t\treturn () => time && clearTimeout(time);\r\n\t}, [time, cancel]);\r\n\r\n\treturn (\r\n\t\t<Animation\r\n\t\t\t{...props}\r\n\t\t\tclassName={animation ? '' : 'fade-notify'}\r\n\t\t\tin={state}\r\n\t\t\ttiming={timing}\r\n\t\t\tsuffix={animation}\r\n\t\t\tonEntered={(target) => {\r\n\t\t\t\tprops.onEntered && props.onEntered(target);\r\n\t\t\t\tdelay &&\r\n\t\t\t\t\tsetTime(\r\n\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\tsetState(false);\r\n\t\t\t\t\t\t}, delay)\r\n\t\t\t\t\t);\r\n\t\t\t}}\r\n\t\t\tonExited={(target) => {\r\n\t\t\t\tprops.onExited && props.onExited(target);\r\n\t\t\t\tclearTimeout(time);\r\n\t\t\t}}>\r\n\t\t\t{render}\r\n\t\t</Animation>\r\n\t);\r\n};\r\n\r\nNotification.defaultProps = NotificationDefault;\r\nNotification.propTypes = NotificationProps;\r\n","import React from 'react';\r\nimport {\r\n\tuseForm,\r\n\tFormSupplier,\r\n\tuseFormSupplier,\r\n\tDoneTypingEvent,\r\n} from 'formydable';\r\nimport { Render, Notification } from 'myt-react-notify';\r\nexport const MockSubmit = (event) => {\r\n\tif (event.isReady()) {\r\n\t\tMockRequest('/mock/json/request', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t},\r\n\t\t\tbody: event.json(),\r\n\t\t})\r\n\t\t.then((response) => {\r\n\t\t\tAlerto(response.json(), 'success');\r\n\t\t}) \r\n\r\n\t\tevent.reset(); \r\n\t\t\r\n\t} else {\r\n\t\tAlerto('Failed! all field rules must fulfilled', 'danger');\r\n\t\tevent.locateFailed();\r\n\t}\r\n};\r\nexport const FormWrapper = ({ children, onSubmit }) => {\r\n\tconst { formState, formUpdate, formRegistry, formSubmit } = useForm();\r\n\r\n\tconst formSubmitHandler = formSubmit(onSubmit);\r\n\r\n\treturn (\r\n\t\t<FormSupplier value={{ formState, formUpdate, formRegistry }}>\r\n\t\t\t<form onSubmit={formSubmitHandler}>\r\n\t\t\t\t{children}\r\n\t\t\t\t<button type='submit' className='n-btn'>\r\n\t\t\t\t\tSubmit\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\t\t</FormSupplier>\r\n\t);\r\n};\r\n\r\nexport const InputWithRules = ({\r\n\ttype = 'text',\r\n\tname,\r\n\tlabel,\r\n\trules,\r\n\tvalue = '',\r\n\tplaceholder = 'enter here...',\r\n\tid,\r\n}) => {\r\n\tconst { formState, formUpdate, formRegistry } = useFormSupplier();\r\n\r\n\tformRegistry({ name, label, rules, value });\r\n\r\n\tconst fieldstate = formState(name);\r\n\r\n\tconst validity = fieldstate.isInvalid\r\n\t\t? 'n-form-invalid'\r\n\t\t: fieldstate.isValidated\r\n\t\t? 'n-form-valid'\r\n\t\t: '';\r\n\r\n\treturn (\r\n\t\t<div className={`n-form-field ${validity}`}>\r\n\t\t\t<label htmlFor={id || name}>\r\n\t\t\t\t{label}\r\n\t\t\t\t{rules.includes('required') && (\r\n\t\t\t\t\t<span className='label-required'>*</span>\r\n\t\t\t\t)}\r\n\t\t\t</label>\r\n\t\t\t<input\r\n\t\t\t\tclassName='n-form-control'\r\n\t\t\t\tid={id || name}\r\n\t\t\t\ttype={type}\r\n\t\t\t\tname={name}\r\n\t\t\t\tvalue={type !== 'file' ? fieldstate.value : undefined}\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\tonChange={formUpdate}\r\n\t\t\t/>\r\n\t\t\t<div className='n-invalid-feedback'>{fieldstate.message}</div>\r\n\t\t\t<div className='n-valid-feedback'><span role='img' aria-label=\"checked\">✔️</span> Looks good!</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport const InputDoneTypingWithRules = ({\r\n\ttype = 'text',\r\n\tname,\r\n\tlabel,\r\n\trules,\r\n\tplaceholder = 'enter here...',\r\n}) => {\r\n\tconst { formState, formUpdate, formRegistry } = useFormSupplier();\r\n\r\n\tif (rules) {\r\n\t\tformRegistry({ name, label, rules });\r\n\t}\r\n\r\n\tconst fieldstate = formState(name);\r\n\r\n\tconst handleDoneTyping = DoneTypingEvent((event) => {\r\n\t\tformUpdate({ target: event.target });\r\n\t}, 300);\r\n\r\n\tconst validity =\r\n\t\t(fieldstate &&\r\n\t\t\t(fieldstate.isInvalid\r\n\t\t\t\t? 'n-form-invalid'\r\n\t\t\t\t: fieldstate.isValidated && 'n-form-valid')) ||\r\n\t\t'';\r\n\r\n\treturn (\r\n\t\t<div className='n-form-field'>\r\n\t\t\t<label htmlFor={name}>\r\n\t\t\t\t{label}\r\n\t\t\t\t{rules.includes('required') && (\r\n\t\t\t\t\t<span className='label-required'>*</span>\r\n\t\t\t\t)}\r\n\t\t\t</label>\r\n\t\t\t<input\r\n\t\t\t\tid={name}\r\n\t\t\t\ttype={type}\r\n\t\t\t\tname={name}\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\tclassName={`n-form-control ${validity}`}\r\n\t\t\t\t{...handleDoneTyping}\r\n\t\t\t/>\r\n\t\t\t<div className='n-invalid-feedback'>{fieldstate && fieldstate.message}</div>\r\n\t\t\t<div className='n-valid-feedback'>Looks good!</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst fileString = (files) =>\r\n\tObject.keys(files).reduce((result, index) => {\r\n\t\treturn (result += `     ${index}: File {\r\n\t  name:${files[index].name},\r\n\t  lastModified:${files[index].lastModified},\r\n\t  size:${files[index].size},\r\n\t  type:${files[index].type}\r\n    }\\n`);\r\n\t}, ' {\\n') + '  }';\r\n\r\nconst stringifyObject = (json) =>\r\n\tObject.keys(json).reduce(\r\n\t\t(result, key) =>\r\n\t\t\t(result += `  ${key}:${\r\n\t\t\t\ttypeof json[key] === 'string'\r\n\t\t\t\t\t? json[key]\r\n\t\t\t\t\t: Array.isArray(json[key])\r\n\t\t\t\t\t? `[${json[key]}]`\r\n\t\t\t\t\t: fileString(json[key])\r\n\t\t\t}\\n`),\r\n\t\t'{\\n'\r\n\t) + '}';\r\n\r\nexport const Alerto = (message, variant) => {\r\n\tRender(<Notification template={{ message, variant }} />);\r\n};\r\nexport const MockRequest = (url, { method, body, headers }) => {\r\n\treturn new Promise((resolve) => {\r\n\t\tRender(\r\n\t\t\t<Notification id={url} placement='top-right' delay={10000}>\r\n\t\t\t\t{(show) => (\r\n\t\t\t\t\t<div className='n-float-low px-4 py-3 br-5'>\r\n\t\t\t\t\t\t<div className='d-flex flex-center-y'>\r\n\t\t\t\t\t\t\t<h5>Request Success!</h5>\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\tclassName='n-btn n-btn-xs ml-auto'\r\n\t\t\t\t\t\t\t\ttype='button'\r\n\t\t\t\t\t\t\t\tonClick={() => show(false)}>\r\n\t\t\t\t\t\t\t\t×\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<pre>\r\n\t\t\t\t\t\t\t<code>\r\n\t\t\t\t\t\t\t\turl: {url},{'\\n'}method: {method},{'\\n'}headers:\r\n\t\t\t\t\t\t\t\t{stringifyObject(headers)},{'\\n'}body:{' '}\r\n\t\t\t\t\t\t\t\t{typeof body === 'string' ? body : stringifyObject(body)}\r\n\t\t\t\t\t\t\t</code>\r\n\t\t\t\t\t\t</pre>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</Notification>\r\n\t\t);\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\tjson() {\r\n\t\t\t\t\treturn 'Success! the form is submited';\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t}, 1000);\r\n\t});\r\n};\r\n","import * as Steps from './TourGuideSteps';\r\n\r\nexport const GettingStarted = ({ index, currentId }, defaultProps) => {\r\n\tlet currentProp = Steps.GettingStarted[index];\r\n\tif (index === 4) {\r\n\t\tcurrentProp.nextToIndex = localStorage.getItem('f-rules') ? 5 : 100;\r\n\t}\r\n\tif (index === 100) {\r\n\t\tcurrentProp = {\r\n\t\t\tindex: 100,\r\n\t\t\tplacement: 'left',\r\n\t\t\tmessage: `You can always check the rules in here.`,\r\n\t\t\tfind() {\r\n\t\t\t\treturn document.querySelector('.scroll-nav a[href=\"#rules\"]');\r\n\t\t\t},\r\n\t\t\tnextToIndex: 5,\r\n\t\t\tbackToIndex: 4,\r\n\t\t\tnavigation: null,\r\n\t\t};\r\n\t}\r\n\treturn {\r\n\t\tindex,\r\n\t\t...defaultProps,\r\n\t\tnavigation: Steps.GettingStarted.length,\r\n\t\t...currentProp,\r\n\t};\r\n};\r\n\r\nexport const ControllableFields = ({ index }, defaultProps) => {\r\n\tlet currentProp = Steps.ControllableFields[index];\r\n\treturn {\r\n\t\tindex,\r\n\t\t...defaultProps,\r\n\t\t...currentProp,\r\n\t\tnavigation: Steps.ControllableFields.length,\r\n\t};\r\n};\r\n\r\nexport const CustomizeMessages = ({ index }, defaultProps) => {\r\n\tlet currentProp = Steps.CustomizeMessages[index];\r\n\tif (index === 4) {\r\n\t\tcurrentProp.nextToIndex = localStorage.getItem('f-cmes') ? 5 : 100;\r\n\t}\r\n\tif (index === 100) {\r\n\t\tcurrentProp = {\r\n\t\t\tindex: 100,\r\n\t\t\tplacement: 'left',\r\n\t\t\tmessage: `You can always check the updating rules messages in here.`,\r\n\t\t\tfind() {\r\n\t\t\t\treturn document.querySelector(\r\n\t\t\t\t\t'.scroll-nav a[href=\"#updating-rules-messages\"]'\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tnextToIndex: 5,\r\n\t\t\tbackToIndex: 4,\r\n\t\t\tnavigation: null,\r\n\t\t};\r\n\t}\r\n\treturn {\r\n\t\tindex,\r\n\t\t...defaultProps,\r\n\t\tnavigation: Steps.CustomizeMessages.length,\r\n\t\t...currentProp,\r\n\t};\r\n};\r\n\r\nexport const SubmittingForm = ({ index }, defaultProps) => {\r\n\tlet currentProp = Steps.SubmittingForm[index];\r\n\treturn {\r\n\t\tindex,\r\n\t\t...defaultProps,\r\n\t\t...currentProp,\r\n\t\tnavigation: Steps.SubmittingForm.length,\r\n\t};\r\n};\r\n\r\nexport const AdvanceDesignPattern = ({ index }, defaultProps) => {\r\n\tlet currentProp = Steps.AdvanceDesignPattern[index];\r\n\treturn {\r\n\t\tindex,\r\n\t\t...defaultProps,\r\n\t\t...currentProp,\r\n\t\tnavigation: Steps.AdvanceDesignPattern.length,\r\n\t};\r\n};\r\n\r\nexport const AliasedRegistry = ({ index }, defaultProps) => {\r\n\tlet currentProp = Steps.AliasedRegistry[index];\r\n\treturn {\r\n\t\tindex,\r\n\t\t...defaultProps,\r\n\t\t...currentProp,\r\n\t\tnavigation: Steps.AliasedRegistry.length,\r\n\t};\r\n};\r\n\r\nexport const FormUpdateWithDoneTypingEvent = ({ index }, defaultProps) => {\r\n\tlet currentProp = Steps.FormUpdateWithDoneTypingEvent[index];\r\n\treturn {\r\n\t\tindex,\r\n\t\t...defaultProps,\r\n\t\t...currentProp,\r\n\t\tnavigation: Steps.FormUpdateWithDoneTypingEvent.length,\r\n\t};\r\n};\r\n\r\nexport const CustomizeRules = ({ index, currentId }, defaultProps) => {\r\n\tconst steps = Steps.CustomizeRules[currentId] || [];\r\n\tlet currentProp = steps[index];\r\n\treturn {\r\n\t\tindex,\r\n\t\t...defaultProps,\r\n\t\tnavigation: steps.length,\r\n\t\t...currentProp,\r\n\t\tid: currentId in Steps.CustomizeRules ? currentId : defaultProps.id,\r\n\t};\r\n};\r\n\r\nexport const AliasedRuleParameters = ({ index }, defaultProps) => {\r\n\tlet currentProp = Steps.AliasedRuleParameters[index];\r\n\treturn {\r\n\t\tindex,\r\n\t\t...defaultProps,\r\n\t\t...currentProp,\r\n\t\tnavigation: Steps.AliasedRuleParameters.length,\r\n\t};\r\n};\r\n\r\nexport const UpdatingRulesMessages = ({ index }, defaultProps) => {\r\n\tlet currentProp = Steps.UpdatingRulesMessages[index];\r\n\treturn {\r\n\t\tindex,\r\n\t\t...defaultProps,\r\n\t\t...currentProp,\r\n\t\tnavigation: Steps.UpdatingRulesMessages.length,\r\n\t};\r\n};\r\n","import React from 'react';\r\nimport { Chaperone, ChaperoneStep } from 'chaperone';\r\nimport * as scope from 'formydable';\r\nimport * as StringCode from './StringCodes';\r\nimport * as ActualCode from './ActualExampleCodes';\r\nimport * as TourGuides from './TourGuides';\r\nimport { SectionWithCode, Note } from 'Templates';\r\nimport { SpeechSynthesis } from 'Common/Utils';\r\n\r\nconst commonChaperoneSetting = {\r\n\thideEvidence: false,\r\n\tneumorphism: false,\r\n\tplacement: 'top-right',\r\n\tbackground: {\r\n\t\tbackdropStyle: { opacity: 0.3 },\r\n\t\thighlightStyle: { backgroundColor: 'rgba(255,255,255, 0.2)' },\r\n\t},\r\n\tonLoad: ({ dialog }) => {\r\n\t\tconst text = dialog.children[0].textContent;\r\n\t\tSpeechSynthesis.speak({ text });\r\n\t},\r\n\tonUnLoad: () => SpeechSynthesis.cancel(),\r\n};\r\n\r\nconst GettingStartedChaperoneSetting = {\r\n\t...commonChaperoneSetting,\r\n\tonLoad: ({ dialog, index }) => {\r\n\t\tconst text =\r\n\t\t\tindex === 0\r\n\t\t\t\t? `Yow, if you haven't check the help in Getting Started yet. You will loss in this one. click here to go check it out.`\r\n\t\t\t\t: dialog.children[0].textContent;\r\n\t\tSpeechSynthesis.speak({ text });\r\n\t},\r\n};\r\n\r\nconst AdvanceChaperoneSetting = {\r\n\t...commonChaperoneSetting,\r\n\tonLoad: ({ dialog, index }) => {\r\n\t\tconst text =\r\n\t\t\tindex === 0\r\n\t\t\t\t? `Hi, if you haven't check the guide in\r\n\t\tAdvance Design Pattern yet. You will loss in this one.\r\n\t\tclick here to go\r\n\t\tcheck it out.`\r\n\t\t\t\t: dialog.children[0].textContent;\r\n\t\tSpeechSynthesis.speak({ text });\r\n\t},\r\n};\r\n\r\nexport const Installation = () => (\r\n\t<SectionWithCode\r\n\t\treadonly\r\n\t\ttitle='Installation'\r\n\t\tcode={`npm i formydable`}\r\n\t\tlanguage='js'\r\n\t\ttheme={{\r\n\t\t\tplain: {\r\n\t\t\t\tcolor: 'rgb(215,215,215)',\r\n\t\t\t\tbackgroundColor: 'rgb(86,86,86)',\r\n\t\t\t},\r\n\t\t\tstyles: [],\r\n\t\t}}\r\n\t/>\r\n);\r\n\r\nexport const Importing = () => (\r\n\t<SectionWithCode\r\n\t\treadonly\r\n\t\ttitle='Imports'\r\n\t\tcode='import { useForm, useFormSupplier, FormSupplier, Validator, DoneTypingEvent } from \"formydable\"'\r\n\t/>\r\n);\r\nexport const GettingStarted = ({ id = 'getting-started' }) => (\r\n\t<Chaperone>\r\n\t\t<ChaperoneStep\r\n\t\t\t{...commonChaperoneSetting}\r\n\t\t\tid={id}\r\n\t\t\tpropertyMutation={TourGuides.GettingStarted}>\r\n\t\t\t<SectionWithCode\r\n\t\t\t\ttriggerId={id}\r\n\t\t\t\ttitle='Getting Started'\r\n\t\t\t\tcontext='This is a react form validator that is delightfully made by mytabowrks\r\n\t\t\twhich is blazingly fast and can be easily use and implement in any field\r\n\t\t\tcomponents with ease.'\r\n\t\t\t\tcode={StringCode.BasicCode}\r\n\t\t\t\tscope={scope}\r\n\t\t\t/>\r\n\t\t</ChaperoneStep>\r\n\t\t<Note\r\n\t\t\tvariant='info'\r\n\t\t\ttitle='Tip'\r\n\t\t\tcontext={\r\n\t\t\t\t<>\r\n\t\t\t\t\tRules validation order is from left to right. it will validate firstly\r\n\t\t\t\t\tthe one on the left side which is the most priority. commonly{' '}\r\n\t\t\t\t\t<b>required</b> rule.\r\n\t\t\t\t</>\r\n\t\t\t}\r\n\t\t\tstyle={{ marginTop: '-20px', marginBottom: '20px' }}\r\n\t\t/>\r\n\t</Chaperone>\r\n);\r\n\r\nexport const ControllableFields = ({ id = 'controllable-fields' }) => (\r\n\t<Chaperone>\r\n\t\t<ChaperoneStep\r\n\t\t\t{...GettingStartedChaperoneSetting}\r\n\t\t\tid={id}\r\n\t\t\tpropertyMutation={TourGuides.ControllableFields}>\r\n\t\t\t<SectionWithCode\r\n\t\t\t\ttriggerId={id}\r\n\t\t\t\ttriggerIndex={localStorage.getItem('f-gstar') ? 1 : 0}\r\n\t\t\t\ttitle='Controllable Fields'\r\n\t\t\t\tcontext='you can make controllable fields without a sweat. just add a single line and you are done.'\r\n\t\t\t\tcode={StringCode.Controllable}\r\n\t\t\t\tscope={scope}\r\n\t\t\t/>\r\n\t\t</ChaperoneStep>\r\n\t</Chaperone>\r\n);\r\nexport const CustomizeMessages = ({ id = 'customize-messages' }) => (\r\n\t<Chaperone>\r\n\t\t<ChaperoneStep\r\n\t\t\t{...GettingStartedChaperoneSetting}\r\n\t\t\tid={id}\r\n\t\t\tpropertyMutation={TourGuides.CustomizeMessages}>\r\n\t\t\t<SectionWithCode\r\n\t\t\t\ttriggerId={id}\r\n\t\t\t\ttriggerIndex={localStorage.getItem('f-gstar') ? 1 : 0}\r\n\t\t\t\ttitle='Customize Messages'\r\n\t\t\t\tcontext='you can make your own static rule messages by using \"failedIn\" without affecting the rules messages model.'\r\n\t\t\t\tcode={StringCode.CustomMessages}\r\n\t\t\t\tscope={scope}\r\n\t\t\t/>\r\n\t\t</ChaperoneStep>\r\n\t\t<Note\r\n\t\t\tvariant='info'\r\n\t\t\tcontext={\r\n\t\t\t\t<>\r\n\t\t\t\t\tRemember setting a <b>schema</b> only works once and will never change again after, \r\n\t\t\t\t\tbecause that is how <b>react</b> <b>useState</b> works. but if you want to update constantly the schema or the default value\r\n\t\t\t\t\tlike when you are updating information, you can <b>unmount</b> the component(which you put the\r\n\t\t\t\t\t{' '}<b>useForm</b>) after submit then <b>mount</b> it again when you are about to update information...\r\n\t\t\t\t</>\r\n\t\t\t}\r\n\t\t\tstyle={{ \r\n\t\t\t\tmarginTop: '-20px', \r\n\t\t\t\tmarginBottom: '20px'\r\n\t\t\t}}\r\n\t\t/>\r\n\t</Chaperone>\r\n);\r\n\r\nexport const SubmittingForm = ({ id = 'submitting-form' }) => (\r\n\t<Chaperone>\r\n\t\t<ChaperoneStep\r\n\t\t\t{...GettingStartedChaperoneSetting}\r\n\t\t\tid={id}\r\n\t\t\tpropertyMutation={TourGuides.SubmittingForm}>\r\n\t\t\t<SectionWithCode\r\n\t\t\t\ttriggerId={id}\r\n\t\t\t\ttriggerIndex={localStorage.getItem('f-gstar') ? 1 : 0}\r\n\t\t\t\ttitle='Submitting Form'\r\n\t\t\t\tcontext='form only exist to submit that is why it is not complete without submitting it on server side.'\r\n\t\t\t\tcode={StringCode.WithSubmitCode}\r\n\t\t\t\tscope={{\r\n\t\t\t\t\t...scope,\r\n\t\t\t\t\tMockRequest: ActualCode.MockRequest,\r\n\t\t\t\t\tAlert: ActualCode.Alerto,\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</ChaperoneStep>\r\n\t\t<Note\r\n\t\t\tvariant='info'\r\n\t\t\tcontext={\r\n\t\t\t\t<>\r\n\t\t\t\t\tRemember setting a <b>schema</b> only works once and will never change again after, \r\n\t\t\t\t\tbecause that is how <b>react</b> <b>useState</b> works. but if you want to update constantly the schema or the default value\r\n\t\t\t\t\tlike when you are updating information, you can <b>unmount</b> the component(which you put the\r\n\t\t\t\t\t{' '}<b>useForm</b>) after submit then <b>mount</b> it again when you are about to update information...\r\n\t\t\t\t</>\r\n\t\t\t}\r\n\t\t\tstyle={{ marginTop: '-20px' }}\r\n\t\t/>\r\n\t\t<Note\r\n\t\t\tvariant='warning'\r\n\t\t\tcontext={\r\n\t\t\t\t<>\r\n\t\t\t\t\tThe fields which are not registered from the schema are excluded from{' '}\r\n\t\t\t\t\t<b>FormEvent</b> method <b>json</b>, <b>param</b> and{' '}\r\n\t\t\t\t\t<b>paramArray</b>.\r\n\t\t\t\t</>\r\n\t\t\t}\r\n\t\t/>\r\n\t\t<Note\r\n\t\t\tvariant='info'\r\n\t\t\tcontext={\r\n\t\t\t\t<>\r\n\t\t\t\t\tIf you want to involve the unregistered field. You can always use{' '}\r\n\t\t\t\t\t<b>FormEvent</b> method <b>formData</b> that will return FormData\r\n\t\t\t\t\tinstance.\r\n\t\t\t\t</>\r\n\t\t\t}\r\n\t\t\tstyle={{ marginBottom: '20px' }}\r\n\t\t/>\r\n\t</Chaperone>\r\n);\r\n\r\nexport const AdvanceDesignPattern = ({ id = 'advance-design-pattern' }) => (\r\n\t<Chaperone>\r\n\t\t<ChaperoneStep\r\n\t\t\t{...commonChaperoneSetting}\r\n\t\t\tid={id}\r\n\t\t\tpropertyMutation={TourGuides.AdvanceDesignPattern}>\r\n\t\t\t<SectionWithCode\r\n\t\t\t\ttriggerId={id}\r\n\t\t\t\ttitle='Advance Design Pattern'\r\n\t\t\t\tcontext='We use FormSupplier to provide formState, formUpdate and formRegistry to children components, and we use useFormSupplier to get FormSupplier provided to children components'\r\n\t\t\t\tcode={StringCode.AdvanceCode}\r\n\t\t\t\tscope={{\r\n\t\t\t\t\t...scope,\r\n\t\t\t\t\tMockRequest: ActualCode.MockRequest,\r\n\t\t\t\t\tAlert: ActualCode.Alerto,\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</ChaperoneStep>\r\n\t</Chaperone>\r\n);\r\n\r\nexport const AliasedRegistry = ({ id = 'aliased-registry' }) => (\r\n\t<Chaperone>\r\n\t\t<ChaperoneStep\r\n\t\t\t{...AdvanceChaperoneSetting}\r\n\t\t\tid={id}\r\n\t\t\tpropertyMutation={TourGuides.AliasedRegistry}>\r\n\t\t\t<SectionWithCode\r\n\t\t\t\ttriggerId={id}\r\n\t\t\t\ttitle='Aliased Registry'\r\n\t\t\t\tcontext='It is inevitable that some form fields are multiple with the same name on it, the problem is we wanted to add those new or other fields into form state registry. for that reason formydable use alias registry and make a counter measure about those stuffs.'\r\n\t\t\t\tcode={StringCode.AliasRegistry}\r\n\t\t\t\tscope={{\r\n\t\t\t\t\t...scope,\r\n\t\t\t\t\tFormWrapper: ActualCode.FormWrapper,\r\n\t\t\t\t\tMockSubmit: ActualCode.MockSubmit,\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</ChaperoneStep>\r\n\t</Chaperone>\r\n);\r\n\r\nexport const FormUpdateWithDoneTypingEvent = ({\r\n\tid = 'with-donetypingevent',\r\n}) => (\r\n\t<Chaperone>\r\n\t\t<ChaperoneStep\r\n\t\t\t{...AdvanceChaperoneSetting}\r\n\t\t\tid={id}\r\n\t\t\tpropertyMutation={TourGuides.FormUpdateWithDoneTypingEvent}>\r\n\t\t\t<SectionWithCode\r\n\t\t\t\ttriggerId={id}\r\n\t\t\t\ttitle='FormUpdate With DoneTypingEvent'\r\n\t\t\t\tcontext='It is use to fire the event after user is done typing, that will save a lot of unessesary execution of state changes while typing.'\r\n\t\t\t\tcode={StringCode.DoneTypingCode}\r\n\t\t\t\tscope={{\r\n\t\t\t\t\t...scope,\r\n\t\t\t\t\tFormWrapper: ActualCode.FormWrapper,\r\n\t\t\t\t\tMockSubmit: ActualCode.MockSubmit,\r\n\t\t\t\t\tInputWithRules: ActualCode.InputWithRules,\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</ChaperoneStep>\r\n\t</Chaperone>\r\n);\r\n\r\nexport const CustomizeRules = ({ id = 'customize-rules' }) => (\r\n\t<Chaperone>\r\n\t\t<ChaperoneStep\r\n\t\t\t{...AdvanceChaperoneSetting}\r\n\t\t\tid={id}\r\n\t\t\tpropertyMutation={TourGuides.CustomizeRules}>\r\n\t\t\t<SectionWithCode\r\n\t\t\t\ttriggerId={id}\r\n\t\t\t\ttitle='Customize Rules'\r\n\t\t\t\tcontext='you can make your own rules.'\r\n\t\t\t\tcode={StringCode.CustomRulesCode}\r\n\t\t\t\tscope={{ ...scope, ...ActualCode }}\r\n\t\t\t/>\r\n\t\t</ChaperoneStep>\r\n\t\t<Note\r\n\t\t\tvariant='info'\r\n\t\t\ttitle='Tip'\r\n\t\t\tcontext={<>Registering customize rules is once and for all.</>}\r\n\t\t\tstyle={{ marginTop: '-20px', marginBottom: '20px' }}\r\n\t\t/>\r\n\t</Chaperone>\r\n);\r\n\r\nexport const AliasedRuleParameters = ({ id = 'aliased-rule-param' }) => (\r\n\t<Chaperone>\r\n\t\t<ChaperoneStep\r\n\t\t\t{...AdvanceChaperoneSetting}\r\n\t\t\tid={id}\r\n\t\t\tpropertyMutation={TourGuides.AliasedRuleParameters}>\r\n\t\t\t<SectionWithCode\r\n\t\t\t\ttriggerId={id}\r\n\t\t\t\ttitle='Aliased Rule Parameters'\r\n\t\t\t\tcontext='developer`s perspective is different with user`s. that is why you can always use aliases (@) to make user`s apprehend the messages'\r\n\t\t\t\tcode={StringCode.AliasRules}\r\n\t\t\t\tscope={{ ...scope, ...ActualCode }}\r\n\t\t\t/>\r\n\t\t</ChaperoneStep>\r\n\t</Chaperone>\r\n);\r\n\r\nexport const UpdatingRulesMessages = ({ id = 'updating-rules-messages' }) => (\r\n\t<Chaperone>\r\n\t\t<ChaperoneStep\r\n\t\t\t{...AdvanceChaperoneSetting}\r\n\t\t\tid={id}\r\n\t\t\tpropertyMutation={TourGuides.UpdatingRulesMessages}>\r\n\t\t\t<SectionWithCode\r\n\t\t\t\ttriggerId={id}\r\n\t\t\t\ttitle='Updating Rules Messages'\r\n\t\t\t\tcontext='if you don`t like the default rules messages you can always do this to change it permanently.'\r\n\t\t\t\tcode={StringCode.RulesUpdateMessage}\r\n\t\t\t\tscope={{ ...scope, ...ActualCode }}\r\n\t\t\t/>\r\n\t\t</ChaperoneStep>\r\n\t</Chaperone>\r\n);\r\n\r\nexport const useForm = () => (\r\n\t<SectionWithCode\r\n\t\treadonly\r\n\t\ttitle='useForm types'\r\n\t\tcontext='it is use to register schema and to get formState, formUpdate, formSubmit, formRegistry.'\r\n\t\tcode='useForm(registry?: { [name: string]: { label: string, rules: string, value?: string|number, aliasOf?: string } }): { formState, formUpdate, formSubmit, formRegistry }'\r\n\t/>\r\n);\r\n\r\nexport const formState = () => (\r\n\t<SectionWithCode\r\n\t\treadonly\r\n\t\ttitle='formState types'\r\n\t\tcontext='it is use to fetch the field state.'\r\n\t\tcode='formState(fetch: string|array): { label: string, rules: string, isInvalid: boolean, isValidated: boolean, failedIn: null|string,  message: null|string } |  [name: string]: { label: string, rules: string, isInvalid: boolean, isValidated: boolean, failedIn: null|string,  message: null|string }'\r\n\t/>\r\n);\r\n\r\nexport const formUpdate = () => (\r\n\t<SectionWithCode\r\n\t\treadonly\r\n\t\ttitle='formUpdate types'\r\n\t\tcontext='it is use to update the field state.'\r\n\t\tcode='formUpdate({ target: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement }, alias?: string): void'\r\n\t/>\r\n);\r\n\r\nexport const formRegistry = () => (\r\n\t<SectionWithCode\r\n\t\treadonly\r\n\t\ttitle='formRegistry types'\r\n\t\tcontext='it is use to remotely register the field rules into the schema.'\r\n\t\tcode='formRegistry({ name: string, label: string, rules: string, value?: string|number, alias?: string }): void'\r\n\t/>\r\n);\r\n\r\nexport const formSubmit = () => (\r\n\t<SectionWithCode\r\n\t\treadonly\r\n\t\ttitle='formSubmit types'\r\n\t\tcontext='it is use to handle the submission of form field.'\r\n\t\tcode='formSubmit((event: FormEvent) => void): void'\r\n\t/>\r\n);\r\n\r\nexport const DoneTypingEvent = () => (\r\n\t<SectionWithCode\r\n\t\treadonly\r\n\t\ttitle='DoneTypingEvent types'\r\n\t\tcontext='it is use to fire the event after user done typing, that will save a lot of unessesary execution while typing.'\r\n\t\tcode='DoneTypingEvent((event) => void, delay: number): void'\r\n\t/>\r\n);\r\n\r\nexport const rulesExtend = () => (\r\n\t<SectionWithCode\r\n\t\treadonly\r\n\t\ttitle='Validator.rulesExtend types'\r\n\t\tcontext='it is use to make your own rules.'\r\n\t\tcode='Validator.rulesExtend({ [rule: string]: { exe(received: string, param1?: string, param2?: string): boolean, message: string } })'\r\n\t/>\r\n);\r\n\r\nexport const rulesUpdateMessage = () => (\r\n\t<SectionWithCode\r\n\t\treadonly\r\n\t\ttitle='Validator.rulesUpdateMessage types'\r\n\t\tcontext='it is use to fire the event after user done typing, that will save a lot of unessesary execution while typing.'\r\n\t\tcode='Validator.rulesUpdateMessage(rule_name: string, message: string|object)'\r\n\t/>\r\n);\r\n\r\nexport const FormSupplier = () => (\r\n\t<SectionWithCode\r\n\t\treadonly\r\n\t\ttitle='FormSupplier types'\r\n\t\tcontext='it is use to set the useForm functions into useFormSupplier.'\r\n\t\tcode='FormSupplier: FunctionComponent<{ value: { formState, formUpdate, formRegistry}}>'\r\n\t/>\r\n);\r\n\r\nexport const useFormSupplier = () => (\r\n\t<SectionWithCode\r\n\t\treadonly\r\n\t\ttitle='useFormSupplier types'\r\n\t\tcontext='it is use to fetch FormSupplier provided.'\r\n\t\tcode='useFormSupplier = (): { formState, formUpdate, formRegistry }'\r\n\t/>\r\n);\r\n\r\nexport const Issues = () => {\r\n\t// React.useEffect(() => {\r\n\t// \tconst url = \"https://api.github.com/repos/mytabworks/formydable/issues\";\r\n\t// \tfetch(url)\r\n\t// \t.then((response) => response.json())\r\n\t// \t.then((data) => console.log(data))\r\n\t// \t.catch((error) => console.error(error))\r\n\t// \treturn () => {\r\n\t\t\t\r\n\t// \t}\r\n\t// }, [])\r\n\treturn <></>\r\n}","import React from 'react';\r\nimport { Section, Table } from 'Templates'; \r\n\r\nexport const Rules = () => (\r\n\t<Section title='Rules'>\r\n\t\t<div className='n-flat of-y-auto br-1r'>\r\n\t\t\t<table className='table-api n-table-bordered n-text-color'>\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th>Name</th>\r\n\t\t\t\t\t\t<th className='width-200'>How to use</th>\r\n\t\t\t\t\t\t<th>Description</th>\r\n\t\t\t\t\t\t<th className='width-200'>Message</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td> required </td>\r\n\t\t\t\t\t\t<td> required </td>\r\n\t\t\t\t\t\t<td> it will require the form field to be filled</td>\r\n\t\t\t\t\t\t<td> The :attribute field is required </td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td> email </td>\r\n\t\t\t\t\t\t<td> email </td>\r\n\t\t\t\t\t\t<td> it will validate if the field contain a valid e-mail</td>\r\n\t\t\t\t\t\t<td> The :attribute field must be valid email</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td> min </td>\r\n\t\t\t\t\t\t<td> min:{'<number>'} </td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\tit will validate the minumum character, number, checkbox is\r\n\t\t\t\t\t\t\tchecked, select(multiple) is selected, file(multiple) is selected.\r\n\t\t\t\t\t\t\t<span className='h-word'>e.g. min:10</span>{' '}\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\tThe :attribute field must be atleast :min (character, items,\r\n\t\t\t\t\t\t\tfiles){' '}\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td> max </td>\r\n\t\t\t\t\t\t<td> max:{'<number>'} </td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\tit will validate the maximum character, number, checkbox is\r\n\t\t\t\t\t\t\tchecked, select(multiple) is selected, file(multiple) is selected.\r\n\t\t\t\t\t\t\t<span className='h-word'>e.g. max:20</span>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\tThe :attribute field may not be greater than :max (character,\r\n\t\t\t\t\t\t\titems, files)\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td> mimes </td>\r\n\t\t\t\t\t\t<td> mimes:{'<files mimes>'} </td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\tit will validate the specific mimes of the files which are\r\n\t\t\t\t\t\t\tallowed.\r\n\t\t\t\t\t\t\t<span className='h-word'>e.g. mimes:jpg,pdf,rar</span>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td> The :attribute only allows :mimes</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td> alpha </td>\r\n\t\t\t\t\t\t<td> alpha </td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\tit will validate if the field value is only contain letter{' '}\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td> The :attribute may only contain letters</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td> alpha_space</td>\r\n\t\t\t\t\t\t<td> alpha_space </td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\tit will validate if the field only contain letters with spaces\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td> The :attribute must contain alphabet with spaces </td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td> alpha_num </td>\r\n\t\t\t\t\t\t<td> alpha_num </td>\r\n\t\t\t\t\t\t<td> it will validate if the field contain letters with numbers</td>\r\n\t\t\t\t\t\t<td>The :attribute may only contain letters and numbers.</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td> alpha_slug </td>\r\n\t\t\t\t\t\t<td> alpha_slug </td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\tit will validate if the field contain letters, numbers, and\r\n\t\t\t\t\t\t\tunderscore\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\tThe :attribute may only contain letters, numbers, and underscore.\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td> alpha_dash </td>\r\n\t\t\t\t\t\t<td> alpha_dash </td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\tit will validate if the field contain letters with numbers and\r\n\t\t\t\t\t\t\tdashes\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\tThe :attribute may only contain letters, numbers, and dashes.\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td> url </td>\r\n\t\t\t\t\t\t<td> url </td>\r\n\t\t\t\t\t\t<td> it will validate if the field contain valid url</td>\r\n\t\t\t\t\t\t<td> The :attribute must be a valid url. </td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td> max_size </td>\r\n\t\t\t\t\t\t<td> max_size:{'<number>'} </td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\tit will validate if the field contain a maximum file size and the\r\n\t\t\t\t\t\t\tsize must calculate in kilobytes.\r\n\t\t\t\t\t\t\t<span className='h-word'>e.g. max_size:5000</span>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td> The :attribute may not be greater :max_size kilobytes.</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td> min_size </td>\r\n\t\t\t\t\t\t<td> min_size:{'<number>'} </td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\tit will validate if the field contain a minimum file size and the\r\n\t\t\t\t\t\t\tsize must calculate in kilobytes.\r\n\t\t\t\t\t\t\t<span className='h-word'>e.g. min_size:1000</span>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td>The :attribute must be atleast :min_size kilobytes.</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td> required_if</td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\trequired_if:{'<field_id>'}={'<expected_value>'}\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\tit will require the field, if the target field matches the\r\n\t\t\t\t\t\t\texpected value. you can use exact value or regular expression like\r\n\t\t\t\t\t\t\t<span className='h-word'>required_if:bio=.+</span>.{' '}\r\n\t\t\t\t\t\t\t<span className='h-word'>.+</span> means has any value.\r\n\t\t\t\t\t\t\t<span className='h-word'>e.g. required_if:country=AU</span> since\r\n\t\t\t\t\t\t\tmost of the time field ids are not the same as the labels and same\r\n\t\t\t\t\t\t\twith the values label. that is why you can use Aliasing(@)\r\n\t\t\t\t\t\t\t<span className='h-word'>\r\n\t\t\t\t\t\t\t\te.g. required_if:country@Country=AU@Australia\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\tThe :attribute field is required when :required_if is\r\n\t\t\t\t\t\t\t:value.\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td> same </td>\r\n\t\t\t\t\t\t<td> same:{'<field_id>'} </td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\tit will validate the field until the target field contain the same\r\n\t\t\t\t\t\t\tvalue.<span className='h-word'>e.g. same:pass</span> since most of\r\n\t\t\t\t\t\t\tthe time field ids are not the same as the labels. you can use\r\n\t\t\t\t\t\t\tAliasing(@)<span className='h-word'>e.g. same:pass@Password</span>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td> The :attribute and :same must match. </td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t</Section>\r\n);\r\n\r\nconst DoneTypingEventRows = [\r\n\t{\r\n\t\tname: 'DoneTypingEvent(',\r\n\t\ttype: '',\r\n\t\tdefault: '',\r\n\t\tdescription: '',\r\n\t},\r\n\t{\r\n\t\tname: 'callback,',\r\n\t\ttype: 'function',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is the callback function when the user stop typing.',\r\n\t\tdata: [\r\n\t\t\t{\r\n\t\t\t\tname: 'function (',\r\n\t\t\t\ttype: '',\r\n\t\t\t\tdefault: '',\r\n\t\t\t\tdescription: '',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'event',\r\n\t\t\t\ttype: 'object',\r\n\t\t\t\tdefault: '-',\r\n\t\t\t\tdescription: 'it consist event properties.',\r\n\t\t\t\tdata: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'type',\r\n\t\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\tdescription: 'type of the event triggered.',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'target',\r\n\t\t\t\t\t\ttype: 'element',\r\n\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\tdescription: 'the element which the event happens.',\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: ') { return void }',\r\n\t\t\t\ttype: '',\r\n\t\t\t\tdefault: '',\r\n\t\t\t\tdescription: '',\r\n\t\t\t},\r\n\t\t],\r\n\t},\r\n\t{\r\n\t\tname: 'delay',\r\n\t\ttype: 'number',\r\n\t\tdefault: '700',\r\n\t\tdescription:\r\n\t\t\t'it is the miliseconds aloted for users typing, if its exceeded on aloted time then it will know that the user stops typing.',\r\n\t},\r\n\t{\r\n\t\tname: ')',\r\n\t\ttype: '',\r\n\t\tdefault: '',\r\n\t\tdescription: '',\r\n\t},\r\n];\r\n\r\nconst ruleMessage = {\r\n\tname: 'message',\r\n\ttype: 'string',\r\n\tdefault: '-',\r\n\tdescription:\r\n\t\t'it is the message template will be displayed when your rules is invalid.',\r\n\tdata: [\r\n\t\t{\r\n\t\t\tname: '`:attribute`',\r\n\t\t\ttype: 'interpulation',\r\n\t\t\tdefault: '-',\r\n\t\t\tdescription:\r\n\t\t\t\t'if it is part of your message, it will be replace by the label you assigned in label schema.',\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: <pre>`:[ruleName]`</pre>,\r\n\t\t\ttype: 'interpulation',\r\n\t\t\tdefault: '-',\r\n\t\t\tdescription:\r\n\t\t\t\t'if it is part of your message, it will be replace by the parameter you put on the rules like `min:5` then `:min` will be replaced by `5`.',\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: '`:value`',\r\n\t\t\ttype: 'interpulation',\r\n\t\t\tdefault: '-',\r\n\t\t\tdescription:\r\n\t\t\t\t'if it is part of your message, it will be replace by the value of your parameter like required_if:favorite=apple, then `:value` will be replaced by `apple`.',\r\n\t\t},\r\n\t],\r\n};\r\n\r\nconst rulesExtendRows = [\r\n\t{\r\n\t\tname: 'Validator.rulesExtend({',\r\n\t\ttype: '',\r\n\t\tdefault: '',\r\n\t\tdescription: '',\r\n\t},\r\n\t{\r\n\t\tname: '[ruleName]',\r\n\t\ttype: 'object',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'your rule name.',\r\n\t\tdata: [\r\n\t\t\t{\r\n\t\t\t\tname: 'exe',\r\n\t\t\t\ttype: 'function',\r\n\t\t\t\tdefault: '-',\r\n\t\t\t\tdescription:\r\n\t\t\t\t\t'it is where the validation happens, you must return true if the input is invalid.',\r\n\t\t\t\tdata: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'function ({',\r\n\t\t\t\t\t\ttype: '',\r\n\t\t\t\t\t\tdefault: '',\r\n\t\t\t\t\t\tdescription: '',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'received,',\r\n\t\t\t\t\t\ttype: 'string | array',\r\n\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\tdescription: 'it is the form input`s value.',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'data,',\r\n\t\t\t\t\t\ttype: 'object',\r\n\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\tdescription: 'it is the collected values of all the form fields which is registered in the schema.',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'parameter,',\r\n\t\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\tdescription:\r\n\t\t\t\t\t\t\t'it is the parameter of your rule. example `min:5`, the parameter then will be the `5`',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'parameter_value',\r\n\t\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\tdescription:\r\n\t\t\t\t\t\t\t'when your rule had a parameter and the parameter had a value, then it will be it. example `required_if:job=programmer`, the value then will be the `programmer`',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: '}) { return boolean }',\r\n\t\t\t\t\t\ttype: '',\r\n\t\t\t\t\t\tdefault: '',\r\n\t\t\t\t\t\tdescription: '',\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\truleMessage,\r\n\t\t\t{\r\n\t\t\t\tname: 'allowMessageEvenValid',\r\n\t\t\t\ttype: 'boolean',\r\n\t\t\t\tdefault: 'false',\r\n\t\t\t\tdescription: 'it is use to allow message to be process and displayed even the received value is valid.',\r\n\t\t\t}\r\n\t\t],\r\n\t},\r\n\t{\r\n\t\tname: '})',\r\n\t\ttype: '',\r\n\t\tdefault: '',\r\n\t\tdescription: '',\r\n\t},\r\n];\r\n\r\nconst rulesUpdateMessageRows = [\r\n\t{\r\n\t\tname: 'Validator.rulesUpdateMessage({',\r\n\t\ttype: '',\r\n\t\tdefault: '',\r\n\t\tdescription: '',\r\n\t},\r\n\t{\r\n\t\tname: 'ruleName,',\r\n\t\ttype: 'string',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'the name of the rule you want to update the message',\r\n\t},\r\n\truleMessage,\r\n\t{\r\n\t\tname: '})',\r\n\t\ttype: '',\r\n\t\tdefault: '',\r\n\t\tdescription: '',\r\n\t},\r\n];\r\n\r\nconst Redundant = [\r\n\t{\r\n\t\tname: 'formState,',\r\n\t\ttype: 'function',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is use to fetch the field state.',\r\n\t\tdata: [\r\n\t\t\t{\r\n\t\t\t\tname: 'const fieldState = formState(',\r\n\t\t\t\ttype: '',\r\n\t\t\t\tdefault: '',\r\n\t\t\t\tdescription: '',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'fetchState',\r\n\t\t\t\ttype: 'string | array',\r\n\t\t\t\tdefault: '-',\r\n\t\t\t\tdescription: 'it is the name of the field which is registered on the schema. furthermore you can passed an array to fetch multiple field states.',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: ')',\r\n\t\t\t\ttype: '',\r\n\t\t\t\tdefault: '',\r\n\t\t\t\tdescription: '',\r\n\t\t\t},\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: 'formUpdate,',\r\n\t\ttype: 'function',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is use to update the field state. and it is commonly used directly in onChange event or if more complex you can use it inside the EventHandler.',\r\n\t\tdata: [\r\n\t\t\t{\r\n\t\t\t\tname: 'formUpdate(',\r\n\t\t\t\ttype: '',\r\n\t\t\t\tdefault: '',\r\n\t\t\t\tdescription: '',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'event,',\r\n\t\t\t\ttype: 'Event | object',\r\n\t\t\t\tdefault: '-',\r\n\t\t\t\tdescription: 'it is the event of the EventListener or alternative imitation of it.',\r\n\t\t\t\tdata: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'target',\r\n\t\t\t\t\t\ttype: 'element | object',\r\n\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\tdescription: 'if you want to imitate the form element. the object must contain property type, value, and name.',\r\n\t\t\t\t\t},\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'directKey?',\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: '-',\r\n\t\t\t\tdescription: 'it is use as a direct access key, to directly tell formUpdate which field state will be updated, and will not depend on the form field attribute name when the event is triggered.',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: ')',\r\n\t\t\t\ttype: '',\r\n\t\t\t\tdefault: '',\r\n\t\t\t\tdescription: '',\r\n\t\t\t},\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: 'formRegistry,',\r\n\t\ttype: 'function',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is use to remotely register the field rules into the schema.',\r\n\t\tdata: [\r\n\t\t\t{\r\n\t\t\t\tname: 'formRegistry({',\r\n\t\t\t\ttype: '',\r\n\t\t\t\tdefault: '',\r\n\t\t\t\tdescription: '',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'name,',\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: '-',\r\n\t\t\t\tdescription: 'it is the name of the form field.',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'label,',\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: '[name]',\r\n\t\t\t\tdescription: 'it is the label of the form field you want to display in the invalid messages.',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'rules,',\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: '-',\r\n\t\t\t\tdescription: 'it is the rules you want to set for form field.',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'value?,',\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: '-',\r\n\t\t\t\tdescription: 'it is the default value you want to set on the form field.',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'aliased?',\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: '-',\r\n\t\t\t\tdescription: 'it is used as an alternative name or identifier of the form field which have a similar name.',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: '})',\r\n\t\t\t\ttype: '',\r\n\t\t\t\tdefault: '',\r\n\t\t\t\tdescription: '',\r\n\t\t\t},\r\n\t\t]\r\n\t}\r\n]\r\n\r\nconst useFormRows = [\r\n\t{\r\n\t\tname: 'const {',\r\n\t\ttype: '',\r\n\t\tdefault: '',\r\n\t\tdescription: '',\r\n\t},\r\n\t...Redundant,\r\n\t{\r\n\t\tname: 'formSubmit',\r\n\t\ttype: 'function',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is use to handle the submission of form field.',\r\n\t\tdata: [\r\n\t\t\t{\r\n\t\t\t\tname: 'const submitHandler = formSubmit(',\r\n\t\t\t\ttype: '',\r\n\t\t\t\tdefault: '',\r\n\t\t\t\tdescription: '',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'callback',\r\n\t\t\t\ttype: 'function',\r\n\t\t\t\tdefault: '-',\r\n\t\t\t\tdescription: 'it is the callback function which will be executed each time the form is submited.',\r\n\t\t\t\tdata: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'function (',\r\n\t\t\t\t\t\ttype: '',\r\n\t\t\t\t\t\tdefault: '',\r\n\t\t\t\t\t\tdescription: '',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'event',\r\n\t\t\t\t\t\ttype: 'FormEvent',\r\n\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\tdescription: 'it is consist of methods which is use to submit.',\r\n\t\t\t\t\t\tdata: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tname: 'event.target',\r\n\t\t\t\t\t\t\t\ttype: 'element',\r\n\t\t\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\t\t\tdescription: 'It will get the form element.',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tname: 'event.locateFailed()',\r\n\t\t\t\t\t\t\t\ttype: 'method',\r\n\t\t\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\t\t\tdescription: 'It will locate the form field that fails the requirements if the field is out of the view point. you can adjust the position by passing a int parameter .locateFailed(70) the default is 40 depends on your navbar height if it is fixed and if you just want to get the scrollTop just do .locateFailed(70, false)',\r\n\t\t\t\t\t\t\t\tdata: [\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tname: 'event.locateFailed(',\r\n\t\t\t\t\t\t\t\t\t\ttype: '',\r\n\t\t\t\t\t\t\t\t\t\tdefault: '',\r\n\t\t\t\t\t\t\t\t\t\tdescription: '',\r\n\t\t\t\t\t\t\t\t\t}, \r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tname: 'prefix,',\r\n\t\t\t\t\t\t\t\t\t\ttype: 'number',\r\n\t\t\t\t\t\t\t\t\t\tdefault: '40',\r\n\t\t\t\t\t\t\t\t\t\tdescription: 'it is the additional top position when the navbar is fixed.',\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tname: 'autoscroll',\r\n\t\t\t\t\t\t\t\t\t\ttype: 'boolean',\r\n\t\t\t\t\t\t\t\t\t\tdefault: 'true',\r\n\t\t\t\t\t\t\t\t\t\tdescription: <>if you just want to get the scrollTop just assign <b>false</b>.</>,\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tname: '): number',\r\n\t\t\t\t\t\t\t\t\t\ttype: '',\r\n\t\t\t\t\t\t\t\t\t\tdefault: '',\r\n\t\t\t\t\t\t\t\t\t\tdescription: '',\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tname: 'event.reset()',\r\n\t\t\t\t\t\t\t\ttype: 'method',\r\n\t\t\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\t\t\tdescription: 'It will reset all the form fields and the schema.',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tname: 'event.isReady()',\r\n\t\t\t\t\t\t\t\ttype: 'method',\r\n\t\t\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\t\t\tdescription: 'It will check if the form is ready and all the value is valid.',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tname: 'event.json()',\r\n\t\t\t\t\t\t\t\ttype: 'method',\r\n\t\t\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\t\t\tdescription: <>It will return the form data in json. that is use for <b>Content-Type: application/json</b>.</>,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tname: 'event.paramArray()',\r\n\t\t\t\t\t\t\t\ttype: 'method',\r\n\t\t\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\t\t\tdescription: 'It will return the form data in array.',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tname: 'event.param()',\r\n\t\t\t\t\t\t\t\ttype: 'method',\r\n\t\t\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\t\t\tdescription: <>It will return the form data in url encode string that is use for <b>Content-Type: application/x-www-form-urlencoded</b>.</>,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tname: 'event.formData()',\r\n\t\t\t\t\t\t\t\ttype: 'method',\r\n\t\t\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\t\t\tdescription: 'it will return instance of FormData.',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tname: 'event.forEach',\r\n\t\t\t\t\t\t\t\ttype: 'method',\r\n\t\t\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\t\t\tdescription: 'it will loop each of the form data.',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: ') { return void }',\r\n\t\t\t\t\t\ttype: '',\r\n\t\t\t\t\t\tdefault: '',\r\n\t\t\t\t\t\tdescription: '',\r\n\t\t\t\t\t},\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: ')',\r\n\t\t\t\ttype: '',\r\n\t\t\t\tdefault: '',\r\n\t\t\t\tdescription: '',\r\n\t\t\t},\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: '} = useForm(',\r\n\t\ttype: '',\r\n\t\tdefault: '',\r\n\t\tdescription: '',\r\n\t},\r\n\t{\r\n\t\tname: 'schema?',\r\n\t\ttype: 'object',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it is the pre-registration of the fields.',\r\n\t\tdata: [\r\n\t\t\t{\r\n\t\t\t\tname: '{',\r\n\t\t\t\ttype: '',\r\n\t\t\t\tdefault: '',\r\n\t\t\t\tdescription: '',\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: '[fields name]:',\r\n\t\t\t\ttype: 'object',\r\n\t\t\t\tdefault: '-',\r\n\t\t\t\tdescription: 'it is the object-key of your field state.',\r\n\t\t\t\tdata: [ \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'label,',\r\n\t\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\t\tdefault: '[fields name]',\r\n\t\t\t\t\t\tdescription: 'it is the label of the form field you want to display in the invalid messages.',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'rules,',\r\n\t\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\tdescription: 'it is the rules you want to set for form field.',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'value?,',\r\n\t\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\tdescription: 'it is the default value you want to set on the form field.',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'aliased?',\r\n\t\t\t\t\t\ttype: 'string',\r\n\t\t\t\t\t\tdefault: '-',\r\n\t\t\t\t\t\tdescription: 'it is used as an alternative name or identifier of the form field which have a similar name.',\r\n\t\t\t\t\t},\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: '}',\r\n\t\t\t\ttype: '',\r\n\t\t\t\tdefault: '',\r\n\t\t\t\tdescription: '',\r\n\t\t\t},\r\n\t\t\t\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: ')',\r\n\t\ttype: '',\r\n\t\tdefault: '',\r\n\t\tdescription: '',\r\n\t},\r\n]\r\n\r\nconst FormSupplierRows = [\r\n\t{\r\n\t\tname: 'value',\r\n\t\ttype: 'object',\r\n\t\tdefault: '-',\r\n\t\tdescription: 'it must contain the useForm funtions: formState, formUpdate, and formRegistry which will be supply to all of its descendant using useFormSupplier.',\r\n\t\tdata: Redundant\r\n\t},\r\n]\r\n\r\nconst useFormSupplierRows = [\r\n\t{\r\n\t\tname: 'const {',\r\n\t\ttype: '',\r\n\t\tdefault: '',\r\n\t\tdescription: '',\r\n\t},\r\n\t...Redundant,\r\n\t{\r\n\t\tname: '} = useFormSupplier()',\r\n\t\ttype: '',\r\n\t\tdefault: '',\r\n\t\tdescription: '',\r\n\t}\r\n]\r\n\r\nexport const DoneTypingEvent = () => (\r\n\t<Section\r\n\t\ttitle='DoneTypingEvent'\r\n\t\tcontext='it is use to fire the event after user done typing, that will save a lot of unessesary execution while typing.'>\r\n\t\t<Table.ForAPI data={DoneTypingEventRows} />\r\n\t</Section>\r\n);\r\n\r\nexport const rulesExtend = () => (\r\n\t<Section\r\n\t\ttitle='Validator.rulesExtend'\r\n\t\tcontext='it is use to make your own rules.'>\r\n\t\t<Table.ForAPI data={rulesExtendRows} />\r\n\t</Section>\r\n);\r\n\r\nexport const rulesUpdateMessage = () => (\r\n\t<Section\r\n\t\ttitle='Validator.rulesUpdateMessage'\r\n\t\tcontext='it is use to change the message of the existing rules.'>\r\n\t\t<Table.ForAPI data={rulesUpdateMessageRows} />\r\n\t</Section>\r\n);\r\n\r\nexport const useForm = () => (\r\n\t<Section\r\n\t\ttitle='useForm'\r\n\t\tcontext='it is use to register schema and to get formState, formUpdate, formSubmit, formRegistry.'>\r\n\t\t<Table.ForAPI data={useFormRows} />\r\n\t</Section>\r\n);\r\n\r\n\r\nexport const FormSupplier = () => (\r\n\t<Section\r\n\t\ttitle='FormSupplier'\r\n\t\tcontext='it is use to set the useForm functions into useFormSupplier which you can use under FormSupplier as a wrapper.'>\r\n\t\t<Table.ForAPI data={FormSupplierRows} />\r\n\t</Section>\r\n);\r\n\r\nexport const useFormSupplier = () => (\r\n\t<Section\r\n\t\ttitle='useFormSupplier'\r\n\t\tcontext='it is use to fetch FormSupplier provided.'>\r\n\t\t<Table.ForAPI data={useFormSupplierRows} />\r\n\t</Section>\r\n);","import React from 'react';\r\nimport { MainContainer, SidePanel, Article, HeadGear } from 'Templates';\r\nimport * as Section from './Sections';\r\nimport * as Table from './Tables';\r\n\r\nconst Formydable = () => { \r\n\tconst title = 'Formydable';\r\n\tconst context = `is a form validator library that is delightfully made in react. It is so\r\n\tlight with unique setting and cognitive design. the rules are\r\n\teloquent which will make the schema so powerful yet easy to understand,\r\n\tand implement on any kind of components. unlike any other form validator library,\r\n\tformydable is complex that allows you to bend\r\n\tand shape it on almost what ever you want. furthermore, formydable is capable on working both controllable and uncontrollable form fields and to know more just read the documentation below.`;\r\n\r\n\treturn (\r\n\t\t<>  \r\n            <HeadGear>\r\n                <HeadGear.Meta \r\n\t\t\t\t\ttitle={`${title} - React Libraries | Mytabworks`}\r\n\t\t\t\t\tdescription={context.slice(0, 100)}\r\n\t\t\t\t\timage='/images/icons/icon-512x512.png'\r\n\t\t\t\t/>\r\n            </HeadGear>\r\n\t\t\t<MainContainer \r\n\t\t\t\ttitle={title}\r\n\t\t\t\tcontext={context}\r\n\t\t\t\tmain={<FormydableMain />}\r\n\t\t\t\tside={<FormydableSidePanel />}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nFormydable.propTypes = {};\r\n\r\nconst FormydableMain = () => (\r\n\t<>\r\n\t\t<Section.Installation />\r\n\t\t<Section.Importing />\r\n\t\t<Section.GettingStarted />\r\n\t\t<Section.ControllableFields />\r\n\t\t<Section.CustomizeMessages />\r\n\t\t<Section.SubmittingForm />\r\n\t\t<Section.AdvanceDesignPattern />\r\n\t\t<Section.AliasedRegistry />\r\n\t\t<Section.FormUpdateWithDoneTypingEvent />\r\n\t\t<Section.AliasedRuleParameters />\r\n\t\t<Section.CustomizeRules />\r\n\t\t<Section.UpdatingRulesMessages />\r\n\t\t<Article title='API'>\r\n\t\t\t<Table.Rules />\r\n\t\t\t<Table.useForm />\r\n\t\t\t<Table.FormSupplier />\r\n\t\t\t<Table.useFormSupplier />\r\n\t\t\t<Table.DoneTypingEvent />\r\n\t\t\t<Article title='Validator'>\r\n\t\t\t\t<Table.rulesExtend />\r\n\t\t\t\t<Table.rulesUpdateMessage />\r\n\t\t\t</Article>\r\n\t\t</Article>\r\n\t\t<Section.Issues />\r\n\t</>\r\n);\r\n\r\nconst FormydableSidePanel = () => {\r\n\tconst list = [\r\n\t\t{ label: 'Installation' },\r\n\t\t{ label: 'Imports' },\r\n\t\t{\r\n\t\t\tlabel: 'Getting Started',\r\n\t\t\tsub: [\r\n\t\t\t\t{ label: 'Controllable Fields' },\r\n\t\t\t\t{ label: 'Customize Messages' },\r\n\t\t\t\t{ label: 'Submitting Form' },\r\n\t\t\t\t{ label: 'Advance Design Pattern' },\r\n\t\t\t\t{ label: 'Aliased Registry' },\r\n\t\t\t\t{ label: 'FormUpdate With DoneTypingEvent' },\r\n\t\t\t\t{ label: 'Aliased Rule Parameters' },\r\n\t\t\t\t{ label: 'Customize Rules' },\r\n\t\t\t\t{ label: 'Updating Rules Messages' },\r\n\t\t\t],\r\n\t\t},\r\n\t\t{\r\n\t\t\tlabel: 'API',\r\n\t\t\tsub: [\r\n\t\t\t\t{ label: 'Rules' },\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: 'useForm',\r\n\t\t\t\t},\r\n\t\t\t\t{ label: 'FormSupplier' },\r\n\t\t\t\t{ label: 'useFormSupplier' },\r\n\t\t\t\t{ label: 'DoneTypingEvent' },\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: 'Validator',\r\n\t\t\t\t\tsub: [\r\n\t\t\t\t\t\t{ label: 'Validator.rulesExtend' },\r\n\t\t\t\t\t\t{ label: 'Validator.rulesUpdateMessage' },\r\n\t\t\t\t\t],\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t},\r\n\t];\r\n\treturn <SidePanel.ScrollNav list={list} />;\r\n};\r\n\r\nexport default Formydable;\r\n"],"sourceRoot":""}